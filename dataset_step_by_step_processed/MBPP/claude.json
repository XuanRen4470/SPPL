[
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the longest chain which can be formed from the given set of pairs.\nTest Example: assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    arr.sort(key=lambda x: x.b)\n    max_length = 1\n    end = arr[0].b\n\n    for i in range(1, n):\n        if arr[i].a > end:\n            max_length += 1\n            end = arr[i].b\n\n    return max_length",
        "gold_label": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max",
        "task_id": 601,
        "test_list": [
            "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3",
            "assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4",
            "assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "class Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\ndef max_chain_length(arr, n):\n    arr.sort(key=lambda x: x.b)\n    max_length = 1\n    end = arr[0].b\n\n    for i in range(1, n):\n        if arr[i].a > end:\n            max_length += 1\n            end = arr[i].b\n\n    return max_length",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the first repeated character in a given string.\nTest Example: assert first_repeated_char(\"abcabc\") == \"a\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def first_repeated_char(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None",
        "gold_label": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"",
        "task_id": 602,
        "test_list": [
            "assert first_repeated_char(\"abcabc\") == \"a\"",
            "assert first_repeated_char(\"abc\") == \"None\"",
            "assert first_repeated_char(\"123123\") == \"1\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def first_repeated_char(str1):\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get a lucid number smaller than or equal to n.\nTest Example: assert get_ludic(10) == [1, 2, 3, 5, 7]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_ludic(n):\n    ludics = [1]\n    candidate = 2\n    while candidate <= n:\n        if all(candidate % ludic != 0 for ludic in ludics[1:]):\n            ludics.append(candidate)\n        candidate += 1\n    return ludics",
        "gold_label": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics",
        "task_id": 603,
        "test_list": [
            "assert get_ludic(10) == [1, 2, 3, 5, 7]",
            "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]",
            "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_ludic(n):\n    ludics = [1]\n    candidates = list(range(2, n + 1))\n    \n    while candidates:\n        next_ludic = candidates.pop(0)\n        ludics.append(next_ludic)\n        \n        if not candidates:\n            break\n        \n        step = len(ludics)\n        candidates = [candidates[i] for i in range(len(candidates)) if (i + 1) % step != 0]\n    \n    return ludics",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to reverse words in a given string.\nTest Example: assert reverse_words(\"python program\")==(\"program python\")\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
        "gold_label": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))",
        "task_id": 604,
        "test_list": [
            "assert reverse_words(\"python program\")==(\"program python\")",
            "assert reverse_words(\"java language\")==(\"language java\")",
            "assert reverse_words(\"indian man\")==(\"man indian\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given integer is a prime number.\nTest Example: assert prime_num(13)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "gold_label": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False",
        "task_id": 605,
        "test_list": [
            "assert prime_num(13)==True",
            "assert prime_num(7)==True",
            "assert prime_num(-1010)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def prime_num(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert degrees to radians.\nTest Example: assert radian_degree(90)==1.5707963267948966\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)",
        "gold_label": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian",
        "task_id": 606,
        "test_list": [
            "assert radian_degree(90)==1.5707963267948966",
            "assert radian_degree(60)==1.0471975511965976",
            "assert radian_degree(120)==2.0943951023931953"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef radian_degree(degree):\n    return math.radians(degree)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\nTest Example: assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (pattern, match.start(), match.end())\n    return None",
        "gold_label": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)",
        "task_id": 607,
        "test_list": [
            "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)",
            "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)",
            "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (pattern, match.start(), match.end())\n    return None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find nth bell number.\nTest Example: assert bell_Number(2) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ",
        "task_id": 608,
        "test_list": [
            "assert bell_Number(2) == 2",
            "assert bell_Number(3) == 5",
            "assert bell_Number(4) == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def bell_Number(n):\n    if n == 0:\n        return 1\n    \n    prev_row = [1]\n    for i in range(1, n + 1):\n        curr_row = [0] * (i + 1)\n        curr_row[0] = prev_row[-1]\n        for j in range(1, i + 1):\n            curr_row[j] = curr_row[j - 1] + prev_row[j - 1]\n        prev_row = curr_row\n    \n    return prev_row[0]",
        "answer_old": "def bell_Number(n):\n    if n == 0:\n        return 1\n    \n    bell = [0] * (n + 1)\n    bell[0] = 1\n    \n    for i in range(1, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * math.comb(i - 1, j)\n    \n    return bell[n]",
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    \n    prev_row = [1]\n    for i in range(1, n + 1):\n        curr_row = [0] * (i + 1)\n        curr_row[0] = prev_row[-1]\n        for j in range(1, i + 1):\n            curr_row[j] = curr_row[j - 1] + prev_row[j - 1]\n        prev_row = curr_row\n    \n    return prev_row[0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find minimum possible value for the given periodic function.\nTest Example: assert floor_Min(10,20,30) == 15\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B",
        "task_id": 609,
        "test_list": [
            "assert floor_Min(10,20,30) == 15",
            "assert floor_Min(1,2,1) == 0",
            "assert floor_Min(11,10,9) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def floor_Min(A, B, N):\n    return min((A * x) // B for x in range(N, B + N))",
        "answer_old": "def floor_Min(A, B, N):\n    period = B\n    offset = N % period\n    min_value = float('inf')\n    \n    for x in range(offset, offset + period):\n        value = (A * x) // B\n        min_value = min(min_value, value)\n    \n    return min_value",
        "answer": "def floor_Min(A, B, N):\n    return min((A * x) // B for x in range(N, B + N))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to remove the k'th element from a given list.\nTest Example: assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_kth_element(lst, k):\n    if 1 <= k <= len(lst):\n        return lst[:k-1] + lst[k:]\n    return lst",
        "gold_label": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]",
        "task_id": 610,
        "test_list": [
            "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]",
            "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]",
            "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_kth_element(lst, k):\n    if 1 <= k <= len(lst):\n        return lst[:k-1] + lst[k:]\n    return lst",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum of nth column from the given tuple list.\nTest Example: assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_of_nth(tuple_list, n):\n    return max(tup[n] for tup in tuple_list)",
        "gold_label": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ",
        "task_id": 611,
        "test_list": [
            "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
            "assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10",
            "assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_of_nth(tuple_list, n):\n    return max(tup[n] for tup in tuple_list)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to merge the first and last elements separately in a list of lists.\nTest Example: assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ",
        "task_id": 612,
        "test_list": [
            "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]",
            "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]",
            "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def merge(lst):\n    return [[row[i] for row in lst] for i in range(len(lst[0]))]",
        "answer_old": "def merge(lst):\n    return [\n        [sublist[0] for sublist in lst],\n        [sublist[-1] for sublist in lst]\n    ]",
        "answer": "def merge(lst):\n    return [[row[i] for row in lst] for i in range(len(lst[0]))]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\nTest Example: assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def maximum_value(test_list):\n    return [(key, max(value)) for key, value in test_list]",
        "gold_label": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ",
        "task_id": 613,
        "test_list": [
            "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]",
            "assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]",
            "assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def maximum_value(test_list):\n    return [(key, max(value)) for key, value in test_list]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the cumulative sum of all the values that are present in the given tuple list.\nTest Example: assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)",
        "gold_label": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)",
        "task_id": 614,
        "test_list": [
            "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30",
            "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37",
            "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def cummulative_sum(tuple_list):\n    return sum(sum(t) for t in tuple_list)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find average value of the numbers in a given tuple of tuples.\nTest Example: assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def average_tuple(nums):\n    return [sum(column) / len(column) for column in zip(*nums)]",
        "gold_label": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result",
        "task_id": 615,
        "test_list": [
            "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]",
            "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]",
            "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def average_tuple(nums):\n    return [sum(column) / len(column) for column in zip(*nums)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to perfom the modulo of tuple elements in the given two tuples.\nTest Example: assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
        "gold_label": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ",
        "task_id": 616,
        "test_list": [
            "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)",
            "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)",
            "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def tuple_modulo(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\nTest Example: assert min_Jumps(3,4,11)==3.5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2",
        "task_id": 617,
        "test_list": [
            "assert min_Jumps(3,4,11)==3.5",
            "assert min_Jumps(3,4,0)==0",
            "assert min_Jumps(11,14,11)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_Jumps(a, b, d):\n    a, b = min(a, b), max(a, b)\n    if d >= b:\n        return (d + b - 1) / b\n    if d == 0:\n        return 0\n    if d <= a:\n        return 1\n    x = d // a\n    y = d % a\n    if y == 0:\n        return x\n    return x + 1 if y <= (b - a) else x + 2",
        "answer_old": "def min_Jumps(a, b, d):\n    a, b = min(a, b), max(a, b)\n    if d == 0:\n        return 0\n    if d <= a:\n        return 1\n    if d <= b:\n        return 2\n    jumps = d // b\n    remaining = d % b\n    if remaining > 0:\n        jumps += 1 if remaining <= a else 2\n    return jumps",
        "answer": "def min_Jumps(a, b, d):\n    a, b = min(a, b), max(a, b)\n    if d >= b:\n        return (d + b - 1) / b\n    if d == 0:\n        return 0\n    if d <= a:\n        return 1\n    x = d // a\n    y = d % a\n    if y == 0:\n        return x\n    return x + 1 if y <= (b - a) else x + 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to divide two lists using map and lambda function.\nTest Example: assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def div_list(nums1, nums2):\n    return list(map(lambda x, y: x / y, nums1, nums2))",
        "gold_label": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)",
        "task_id": 618,
        "test_list": [
            "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]",
            "assert div_list([3,2],[1,4])==[3.0, 0.5]",
            "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def div_list(nums1, nums2):\n    return list(map(lambda x, y: x / y, nums1, nums2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to move all the numbers in it to the given string.\nTest Example: assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def move_num(test_str):\n    return ''.join(char for char in test_str if not char.isdigit()) + ''.join(char for char in test_str if char.isdigit())",
        "gold_label": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ",
        "task_id": 619,
        "test_list": [
            "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'",
            "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'",
            "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def move_num(test_str):\n    return ''.join(char for char in test_str if not char.isdigit()) + ''.join(char for char in test_str if char.isdigit())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the largest subset where each pair is divisible.\nTest Example: assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    max_subset = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_subset = max(max_subset, dp[i])\n    \n    return max_subset",
        "gold_label": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)",
        "task_id": 620,
        "test_list": [
            "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4",
            "assert largest_subset([10, 5, 3, 15, 20], 5) == 3",
            "assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def largest_subset(a, n):\n    a.sort()\n    dp = [1] * n\n    max_subset = 1\n    \n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_subset = max(max_subset, dp[i])\n    \n    return max_subset",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to increment the numeric values in the given strings by k.\nTest Example: assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def increment_numerics(strings, k):\n    result = []\n    for item in strings:\n        if item.isdigit():\n            result.append(str(int(item) + k))\n        else:\n            result.append(item)\n    return result",
        "gold_label": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ",
        "task_id": 621,
        "test_list": [
            "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']",
            "assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']",
            "assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def increment_numerics(strings, k):\n    result = []\n    for item in strings:\n        if item.isdigit():\n            result.append(str(int(item) + k))\n        else:\n            result.append(item)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the median of two sorted arrays of same size.\nTest Example: assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_median(arr1, arr2, n):\n    merged = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n    \n    mid = n\n    return (merged[mid-1] + merged[mid]) / 2",
        "gold_label": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2",
        "task_id": 622,
        "test_list": [
            "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0",
            "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5",
            "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_median(arr1, arr2, n):\n    merged = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    \n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n    \n    mid = n\n    return (merged[mid-1] + merged[mid]) / 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the n-th power of individual elements in a list using lambda function.\nTest Example: assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def nth_nums(nums, n):\n    return list(map(lambda x: x ** n, nums))",
        "gold_label": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums",
        "task_id": 623,
        "test_list": [
            "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])",
            "assert nth_nums([12,15],5)==([248832, 759375])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def nth_nums(nums, n):\n    return list(map(lambda x: x ** n, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to convert the given string to upper case.\nTest Example: assert is_upper(\"person\") ==\"PERSON\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_upper(string):\n    return string.upper()",
        "gold_label": "def is_upper(string):\r\n  return (string.upper())",
        "task_id": 624,
        "test_list": [
            "assert is_upper(\"person\") ==\"PERSON\"",
            "assert is_upper(\"final\") == \"FINAL\"",
            "assert is_upper(\"Valid\") == \"VALID\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_upper(string):\n    return string.upper()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to interchange first and last elements in a given list.\nTest Example: assert swap_List([1,2,3]) == [3,2,1]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "gold_label": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ",
        "task_id": 625,
        "test_list": [
            "assert swap_List([1,2,3]) == [3,2,1]",
            "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]",
            "assert swap_List([4,5,6]) == [6,5,4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the largest triangle that can be inscribed in the semicircle.\nTest Example: assert triangle_area(0) == 0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def triangle_area(r):\n    if r < 0:\n        return -1\n    return (3 * 3**0.5 / 4) * r**2",
        "gold_label": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ",
        "task_id": 626,
        "test_list": [
            "assert triangle_area(0) == 0",
            "assert triangle_area(-1) == -1",
            "assert triangle_area(2) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def triangle_area(r):\n    if r < 0:\n        return -1\n    import math\n    return (3 * math.sqrt(3) / 4) * r * r",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the smallest missing number from the given array.\nTest Example: assert find_First_Missing([0,1,2,3],0,3) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
        "gold_label": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ",
        "task_id": 627,
        "test_list": [
            "assert find_First_Missing([0,1,2,3],0,3) == 4",
            "assert find_First_Missing([0,1,2,6,9],0,4) == 3",
            "assert find_First_Missing([2,3,5,8,9],0,4) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_First_Missing(array, start, end):\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n    return end + 1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\nTest Example: assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "gold_label": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)",
        "task_id": 628,
        "test_list": [
            "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'",
            "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'",
            "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def replace_spaces(string):\n    return string.replace(' ', '%20')",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find even numbers from a mixed list.\nTest Example: assert Split([1,2,3,4,5]) == [2,4]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Split(list):\n    return [num for num in list if num % 2 == 0]",
        "gold_label": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li",
        "task_id": 629,
        "test_list": [
            "assert Split([1,2,3,4,5]) == [2,4]",
            "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]",
            "assert Split ([8,12,15,19]) == [8,12]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Split(list):\n    return [num for num in list if num % 2 == 0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nTest Example: assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent = [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1],   [x, y],   [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]\n    return adjacent",
        "gold_label": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ",
        "task_id": 630,
        "test_list": [
            "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]",
            "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]",
            "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent = [\n        [x-1, y-1], [x-1, y], [x-1, y+1],\n        [x, y-1],   [x, y],   [x, y+1],\n        [x+1, y-1], [x+1, y], [x+1, y+1]\n    ]\n    return adjacent",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\nTest Example: assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef replace_spaces(text):\n    return re.sub(r'\\s', '_', text)",
        "gold_label": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)",
        "task_id": 631,
        "test_list": [
            "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'",
            "assert replace_spaces('The Avengers') == 'The_Avengers'",
            "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef replace_spaces(text):\n    return re.sub(r'\\s', '_', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to move all zeroes to the end of the given list.\nTest Example: assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def move_zero(num_list):\n    non_zero = [num for num in num_list if num != 0]\n    zeros = [0] * (len(num_list) - len(non_zero))\n    return non_zero + zeros",
        "gold_label": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)",
        "task_id": 632,
        "test_list": [
            "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]",
            "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]",
            "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def move_zero(num_list):\n    non_zero = [num for num in num_list if num != 0]\n    zeros = [0] * (len(num_list) - len(non_zero))\n    return non_zero + zeros",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of xor of all pairs of numbers in the given array.\nTest Example: assert pair_OR_Sum([5,9,7,6],4) == 47\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def pair_OR_Sum(arr, n):\n    xor_sum = 0\n    for i in range(32):\n        count = sum((num & (1 << i)) != 0 for num in arr)\n        xor_sum += (count * (n - count)) << i\n    return xor_sum",
        "gold_label": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ",
        "task_id": 633,
        "test_list": [
            "assert pair_OR_Sum([5,9,7,6],4) == 47",
            "assert pair_OR_Sum([7,3,5],3) == 12",
            "assert pair_OR_Sum([7,3],2) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def pair_OR_Sum(arr, n):\n    xor_sum = 0\n    for i in range(32):\n        count = sum((num & (1 << i)) != 0 for num in arr)\n        xor_sum += (count * (n - count)) << i\n    return xor_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of fourth power of first n even natural numbers.\nTest Example: assert even_Power_Sum(2) == 272\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def even_Power_Sum(n):\n    return sum((2*i)**4 for i in range(1, n+1))",
        "gold_label": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ",
        "task_id": 634,
        "test_list": [
            "assert even_Power_Sum(2) == 272",
            "assert even_Power_Sum(3) == 1568",
            "assert even_Power_Sum(4) == 5664"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def even_Power_Sum(n):\n    return sum((2*i)**4 for i in range(1, n+1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to push all values into a heap and then pop off the smallest values one at a time.\nTest Example: assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]",
        "gold_label": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]",
        "task_id": 635,
        "test_list": [
            "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
            "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        heapq.heappush(heap, value)\n    return [heapq.heappop(heap) for _ in range(len(heap))]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\nTest Example: assert Check_Solution(2,0,2) == \"Yes\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Check_Solution(a, b, c):\n    if b**2 - 4*a*c < 0:\n        return \"No\"\n    \n    discriminant = (b**2 - 4*a*c)**0.5\n    root1 = (-b + discriminant) / (2*a)\n    root2 = (-b - discriminant) / (2*a)\n    \n    if abs(root1 * root2 - 1) < 1e-9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "gold_label": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
        "task_id": 636,
        "test_list": [
            "assert Check_Solution(2,0,2) == \"Yes\"",
            "assert Check_Solution(2,-5,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Check_Solution(a, b, c):\n    if b**2 - 4*a*c < 0:\n        return \"No\"\n    \n    discriminant = (b**2 - 4*a*c)**0.5\n    root1 = (-b + discriminant) / (2*a)\n    root2 = (-b - discriminant) / (2*a)\n    \n    if abs(root1 * root2 - 1) < 1e-9:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given amount has no profit and no loss\nTest Example: assert noprofit_noloss(1500,1200)==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    return sale_amount == actual_cost",
        "gold_label": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False",
        "task_id": 637,
        "test_list": [
            "assert noprofit_noloss(1500,1200)==False",
            "assert noprofit_noloss(100,100)==True",
            "assert noprofit_noloss(2000,5000)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def noprofit_noloss(actual_cost, sale_amount):\n    return sale_amount == actual_cost",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate wind chill index.\nTest Example: assert wind_chill(120,35)==40\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef wind_chill(v, t):\n    windchill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(windchill)",
        "gold_label": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))",
        "task_id": 638,
        "test_list": [
            "assert wind_chill(120,35)==40",
            "assert wind_chill(40,70)==86",
            "assert wind_chill(10,100)==116"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef wind_chill(v, t):\n    windchill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(windchill)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nTest Example: assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())",
        "gold_label": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))",
        "task_id": 639,
        "test_list": [
            "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16",
            "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10",
            "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sample_nam(sample_names):\n    return sum(len(name) for name in sample_names if name[0].isupper())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove the parenthesis area in a string.\nTest Example: assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_parenthesis(items):\n    return re.sub(r'\\s*\\([^)]*\\)', '', items[0])\n\nimport re",
        "gold_label": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))",
        "task_id": 640,
        "test_list": [
            "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")",
            "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")",
            "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_parenthesis(items):\n    return re.sub(r'\\s*\\([^)]*\\)', '', items[0])\n\nimport re",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the nth nonagonal number.\nTest Example: assert is_nonagonal(10) == 325\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
        "gold_label": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ",
        "task_id": 641,
        "test_list": [
            "assert is_nonagonal(10) == 325",
            "assert is_nonagonal(15) == 750",
            "assert is_nonagonal(18) == 1089"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_nonagonal(n):\n    return n * (7 * n - 5) // 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove similar rows from the given tuple matrix.\nTest Example: assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_similar_row(test_list):\n    unique_rows = set()\n    for row in test_list:\n        sorted_row = tuple(sorted(set(row)))\n        unique_rows.add(sorted_row)\n    return unique_rows",
        "gold_label": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ",
        "task_id": 642,
        "test_list": [
            "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}",
            "assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}",
            "assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_similar_row(test_list):\n    unique_rows = set()\n    for row in test_list:\n        sorted_row = tuple(sorted(set(row)))\n        unique_rows.add(sorted_row)\n    return unique_rows",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a word containing 'z', not at the start or end of the word.\nTest Example: assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w+z\\w+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "task_id": 643,
        "test_list": [
            "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')",
            "assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w+z\\w+\\b'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to reverse an array upto a given position.\nTest Example: assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]",
        "gold_label": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ",
        "task_id": 644,
        "test_list": [
            "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]",
            "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]",
            "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def reverse_Array_Upto_K(arr, k):\n    return arr[:k][::-1] + arr[k:]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the product of it\u2019s kth index in the given tuples.\nTest Example: assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_k_product(tuples, k):\n    result = 1\n    for tuple_item in tuples:\n        result *= tuple_item[k]\n    return result",
        "gold_label": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ",
        "task_id": 645,
        "test_list": [
            "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665",
            "assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280",
            "assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_k_product(tuples, k):\n    result = 1\n    for tuple_item in tuples:\n        result *= tuple_item[k]\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count number of cubes of size k in a cube of size n.\nTest Example: assert No_of_cubes(2,1) == 8\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
        "gold_label": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No",
        "task_id": 646,
        "test_list": [
            "assert No_of_cubes(2,1) == 8",
            "assert No_of_cubes(5,2) == 64",
            "assert No_of_cubes(1,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def No_of_cubes(n, k):\n    if k > n:\n        return 0\n    return (n - k + 1) ** 3",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to split a string at uppercase letters.\nTest Example: assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def split_upperstring(text):\n    result = []\n    current_word = text[0]\n    for char in text[1:]:\n        if char.isupper():\n            result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    result.append(current_word)\n    return result",
        "gold_label": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))",
        "task_id": 647,
        "test_list": [
            "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']",
            "assert split_upperstring(\"PythonProgram\")==['Python','Program']",
            "assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def split_upperstring(text):\n    result = []\n    current_word = text[0]\n    for char in text[1:]:\n        if char.isupper():\n            result.append(current_word)\n            current_word = char\n        else:\n            current_word += char\n    result.append(current_word)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\nTest Example: assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
        "gold_label": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",
        "task_id": 648,
        "test_list": [
            "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] ",
            "assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] ",
            "assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def exchange_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\nTest Example: assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1])",
        "gold_label": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
        "task_id": 649,
        "test_list": [
            "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29",
            "assert sum_Range_list([1,2,3,4,5],1,2) == 5",
            "assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_Range_list(nums, m, n):\n    return sum(nums[m:n+1])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given two arrays are equal or not.\nTest Example: assert are_Equal([1,2,3],[3,2,1],3,3) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
        "gold_label": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True",
        "task_id": 650,
        "test_list": [
            "assert are_Equal([1,2,3],[3,2,1],3,3) == True",
            "assert are_Equal([1,1,1],[2,2,2],3,3) == False",
            "assert are_Equal([8,9],[4,5,6],2,3) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def are_Equal(arr1, arr2, n, m):\n    if n != m:\n        return False\n    return sorted(arr1) == sorted(arr2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if one tuple is a subset of another tuple.\nTest Example: assert check_subset((10, 4, 5, 6), (5, 10)) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_subset(tuple1, tuple2):\n    return all(item in tuple1 for item in tuple2)",
        "gold_label": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ",
        "task_id": 651,
        "test_list": [
            "assert check_subset((10, 4, 5, 6), (5, 10)) == True",
            "assert check_subset((1, 2, 3, 4), (5, 6)) == False",
            "assert check_subset((7, 8, 9, 10), (10, 8)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_subset(tuple1, tuple2):\n    return all(item in tuple1 for item in tuple2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\nTest Example: assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def matrix_to_list(test_list):\n    flattened = [item for sublist in test_list for item in sublist]\n    columns = list(zip(*flattened))\n    return str(columns)",
        "gold_label": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))",
        "task_id": 652,
        "test_list": [
            "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'",
            "assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'",
            "assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def matrix_to_list(test_list):\n    flattened = [item for sublist in test_list for item in sublist]\n    columns = list(zip(*flattened))\n    return str(columns)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\nTest Example: assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "from collections import defaultdict\n\ndef grouping_dictionary(pairs):\n    result = defaultdict(list)\n    for key, value in pairs:\n        result[key].append(value)\n    return dict(result)",
        "gold_label": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d",
        "task_id": 653,
        "test_list": [
            "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})",
            "assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})",
            "assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "from collections import defaultdict\n\ndef grouping_dictionary(pairs):\n    result = defaultdict(list)\n    for key, value in pairs:\n        result[key].append(value)\n    return dict(result)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the perimeter of a rectangle.\nTest Example: assert rectangle_perimeter(10,20)==60\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
        "gold_label": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter",
        "task_id": 654,
        "test_list": [
            "assert rectangle_perimeter(10,20)==60",
            "assert rectangle_perimeter(10,5)==30",
            "assert rectangle_perimeter(4,2)==12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of fifth power of n natural numbers.\nTest Example: assert fifth_Power_Sum(2) == 33\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
        "gold_label": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ",
        "task_id": 655,
        "test_list": [
            "assert fifth_Power_Sum(2) == 33",
            "assert fifth_Power_Sum(4) == 1300",
            "assert fifth_Power_Sum(3) == 276"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def fifth_Power_Sum(n):\n    return sum(i**5 for i in range(1, n+1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the minimum sum of absolute differences of two arrays.\nTest Example: assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Min_Sum(a, b, n):\n    a.sort()\n    b.sort()\n    return sum(abs(a[i] - b[i]) for i in range(n))",
        "gold_label": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum",
        "task_id": 656,
        "test_list": [
            "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0",
            "assert find_Min_Sum([1,2,3],[4,5,6],3) == 9",
            "assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Min_Sum(a, b, n):\n    a.sort()\n    b.sort()\n    return sum(abs(a[i] - b[i]) for i in range(n))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the first digit in factorial of a given number.\nTest Example: assert first_Digit(5) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ",
        "task_id": 657,
        "test_list": [
            "assert first_Digit(5) == 1",
            "assert first_Digit(10) == 3",
            "assert first_Digit(7) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef first_Digit(n):\n    if n == 0:\n        return 1\n    \n    # Calculate log10 of n!\n    log_factorial = sum(math.log10(i) for i in range(1, n + 1))\n    \n    # Get the fractional part\n    fractional = log_factorial - math.floor(log_factorial)\n    \n    # Calculate the first digit\n    first_digit = math.floor(10 ** fractional)\n    \n    return first_digit",
        "answer_old": "import math\n\ndef first_Digit(n):\n    if n == 0:\n        return 1\n    if n <= 5:\n        return math.factorial(n) // 10**int(math.log10(math.factorial(n)))\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) / 2.0))\n    return int(pow(10, x - int(x) + 1))",
        "answer": "import math\n\ndef first_Digit(n):\n    if n == 0:\n        return 1\n    \n    # Calculate log10 of n!\n    log_factorial = sum(math.log10(i) for i in range(1, n + 1))\n    \n    # Get the fractional part\n    fractional = log_factorial - math.floor(log_factorial)\n    \n    # Calculate the first digit\n    first_digit = math.floor(10 ** fractional)\n    \n    return first_digit",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the item with maximum occurrences in a given list.\nTest Example: assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_occurrences(list1):\n    from collections import Counter\n    return Counter(list1).most_common(1)[0][0]",
        "gold_label": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
        "task_id": 658,
        "test_list": [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2",
            "assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1",
            "assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_occurrences(list1):\n    from collections import Counter\n    return Counter(list1).most_common(1)[0][0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to print duplicants from a list of integers.\nTest Example: assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Repeat(x):\n    seen = set()\n    duplicates = set()\n    for num in x:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)",
        "gold_label": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ",
        "task_id": 659,
        "test_list": [
            "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]",
            "assert Repeat([-1, 1, -1, 8]) == [-1]",
            "assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Repeat(x):\n    seen = set()\n    duplicates = set()\n    for num in x:\n        if num in seen:\n            duplicates.add(num)\n        else:\n            seen.add(num)\n    return list(duplicates)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to choose points from two ranges such that no point lies in both the ranges.\nTest Example: assert find_Points(5,10,1,5) == (1,10)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)",
        "task_id": 660,
        "test_list": [
            "assert find_Points(5,10,1,5) == (1,10)",
            "assert find_Points(3,5,7,9) == (3,9)",
            "assert find_Points(1,5,2,8) == (1,8)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Points(l1, r1, l2, r2):\n    if l1 <= l2:\n        return (l1, max(r1, r2))\n    else:\n        return (l2, max(r1, r2))",
        "answer_old": "def find_Points(l1, r1, l2, r2):\n    if l1 <= l2:\n        x = l2 - 1 if l2 > l1 else l1\n        y = r1\n    else:\n        x = l1\n        y = r2 + 1 if r2 < r1 else r1\n    return (x, y)",
        "answer": "def find_Points(l1, r1, l2, r2):\n    if l1 <= l2:\n        return (l1, max(r1, r2))\n    else:\n        return (l2, max(r1, r2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\nTest Example: assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3:\n        return sum(arr)\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(dp[1], arr[1] + arr[2], arr[0] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i])\n    \n    return dp[n-1]",
        "gold_label": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]",
        "task_id": 661,
        "test_list": [
            "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101",
            "assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013",
            "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sum_of_three_consecutive(arr, n):\n    if n < 3:\n        return sum(arr)\n    \n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(dp[1], arr[1] + arr[2], arr[0] + arr[2])\n    \n    for i in range(3, n):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i-1] + arr[i])\n    \n    return dp[n-1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a list in a dictionary.\nTest Example: assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sorted_dict(dict1):\n    return {key: sorted(value) for key, value in dict1.items()}",
        "gold_label": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict",
        "task_id": 662,
        "test_list": [
            "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}",
            "assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}",
            "assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sorted_dict(dict1):\n    return {key: sorted(value) for key, value in dict1.items()}",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the largest possible value of k such that k modulo x is y.\nTest Example: assert find_max_val(15, 10, 5) == 15\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_max_val(n, x, y):\n    k = n - (n % x) + y\n    if k > n:\n        k -= x\n    return k if k >= 0 else -1",
        "gold_label": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ",
        "task_id": 663,
        "test_list": [
            "assert find_max_val(15, 10, 5) == 15",
            "assert find_max_val(187, 10, 5) == 185",
            "assert find_max_val(16, 11, 1) == 12"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_max_val(n, x, y):\n    k = n - (n % x) + y\n    if k > n:\n        k -= x\n    return k if k >= 0 else -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the average of even numbers till a given even number.\nTest Example: assert average_Even(2) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def average_Even(n):\n    if n % 2 != 0:\n        return \"Invalid Input\"\n    \n    sum_even = 0\n    count = 0\n    \n    for num in range(2, n + 1, 2):\n        sum_even += num\n        count += 1\n    \n    return sum_even // count if count > 0 else 0",
        "gold_label": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ",
        "task_id": 664,
        "test_list": [
            "assert average_Even(2) == 2",
            "assert average_Even(4) == 3",
            "assert average_Even(100) == 51"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def average_Even(n):\n    if n % 2 != 0:\n        return \"Invalid Input\"\n    \n    sum_even = 0\n    count = 0\n    \n    for num in range(2, n + 1, 2):\n        sum_even += num\n        count += 1\n    \n    return sum_even // count if count > 0 else 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to shift first element to the end of given list.\nTest Example: assert move_last([1,2,3,4]) == [2,3,4,1]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def move_last(num_list):\n    if not num_list:\n        return []\n    return num_list[1:] + [num_list[0]]",
        "gold_label": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)",
        "task_id": 665,
        "test_list": [
            "assert move_last([1,2,3,4]) == [2,3,4,1]",
            "assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]",
            "assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def move_last(num_list):\n    if not num_list:\n        return []\n    return num_list[1:] + [num_list[0]]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count occurrence of a character in a string.\nTest Example: assert count_char(\"Python\",'o')==1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_char(string, char):\n    return string.count(char)",
        "gold_label": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count",
        "task_id": 666,
        "test_list": [
            "assert count_char(\"Python\",'o')==1",
            "assert count_char(\"little\",'t')==2",
            "assert count_char(\"assert\",'s')==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_char(string, char):\n    return string.count(char)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count number of vowels in the string.\nTest Example: assert Check_Vow('corner','AaEeIiOoUu') == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Check_Vow(string, vowels):\n    return sum(1 for char in string if char in vowels)",
        "gold_label": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n",
        "task_id": 667,
        "test_list": [
            "assert Check_Vow('corner','AaEeIiOoUu') == 2",
            "assert Check_Vow('valid','AaEeIiOoUu') == 2",
            "assert Check_Vow('true','AaEeIiOoUu') ==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Check_Vow(string, vowels):\n    return sum(1 for char in string if char in vowels)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to replace multiple occurence of character by single.\nTest Example: assert replace('peep','e') == 'pep'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def replace(string, char):\n    result = []\n    prev_char = None\n    for c in string:\n        if c != char or c != prev_char:\n            result.append(c)\n        prev_char = c\n    return ''.join(result)",
        "gold_label": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ",
        "task_id": 668,
        "test_list": [
            "assert replace('peep','e') == 'pep'",
            "assert replace('Greek','e') == 'Grek'",
            "assert replace('Moon','o') == 'Mon'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def replace(string, char):\n    result = []\n    prev_char = None\n    for c in string:\n        if c != char or c != prev_char:\n            result.append(c)\n        prev_char = c\n    return ''.join(result)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given ip address is valid or not using regex.\nTest Example: assert check_IP(\"192.168.0.1\") == 'Valid IP address'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef check_IP(Ip):\n    regex = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(regex, Ip):\n        return \"Valid IP address\"\n    else:\n        return \"Invalid IP address\"",
        "gold_label": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ",
        "task_id": 669,
        "test_list": [
            "assert check_IP(\"192.168.0.1\") == 'Valid IP address'",
            "assert check_IP(\"110.234.52.124\") == 'Valid IP address'",
            "assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef check_IP(Ip):\n    regex = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(regex, Ip):\n        return \"Valid IP address\"\n    else:\n        return \"Invalid IP address\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether a sequence of numbers has a decreasing trend or not.\nTest Example: assert decreasing_trend([-4,-3,-2,-1]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def decreasing_trend(nums):\n    if len(nums) <= 1:\n        return True\n    for i in range(1, len(nums)):\n        if nums[i] >= nums[i-1]:\n            return False\n    return True",
        "gold_label": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
        "task_id": 670,
        "test_list": [
            "assert decreasing_trend([-4,-3,-2,-1]) == True",
            "assert decreasing_trend([1,2,3]) == True",
            "assert decreasing_trend([3,2,1]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def decreasing_trend(nums):\n    if len(nums) <= 1:\n        return True\n    for i in range(1, len(nums)):\n        if nums[i] >= nums[i-1]:\n            return False\n    return True",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to set the right most unset bit.\nTest Example: assert set_Right_most_Unset_Bit(21) == 23\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    return n | (n + 1) & ~n",
        "gold_label": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ",
        "task_id": 671,
        "test_list": [
            "assert set_Right_most_Unset_Bit(21) == 23",
            "assert set_Right_most_Unset_Bit(11) == 15",
            "assert set_Right_most_Unset_Bit(15) == 15"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef set_Right_most_Unset_Bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    return n | (n + 1) & ~n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find maximum of three numbers.\nTest Example: assert max_of_three(10,20,30)==30\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_of_three(a, b, c):\n    return max(a, b, c)",
        "gold_label": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum",
        "task_id": 672,
        "test_list": [
            "assert max_of_three(10,20,30)==30",
            "assert max_of_three(55,47,39)==55",
            "assert max_of_three(10,49,30)==49"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_of_three(a, b, c):\n    return max(a, b, c)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to convert a list of multiple integers into a single integer.\nTest Example: assert convert([1,2,3]) == 123\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def convert(numbers):\n    return int(''.join(map(str, numbers)))",
        "gold_label": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ",
        "task_id": 673,
        "test_list": [
            "assert convert([1,2,3]) == 123",
            "assert convert([4,5,6]) == 456",
            "assert convert([7,8,9]) == 789"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def convert(numbers):\n    return int(''.join(map(str, numbers)))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove duplicate words from a given string using collections module.\nTest Example: assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "from collections import OrderedDict\n\ndef remove_duplicate(string):\n    return ' '.join(OrderedDict.fromkeys(string.split()))",
        "gold_label": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result",
        "task_id": 674,
        "test_list": [
            "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")",
            "assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "from collections import OrderedDict\n\ndef remove_duplicate(string):\n    return ' '.join(OrderedDict.fromkeys(string.split()))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add two integers. however, if the sum is between the given range it will return 20.\nTest Example: assert sum_nums(2,10,11,20)==20\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_nums(x, y, m, n):\n    total = x + y\n    if m <= total <= n:\n        return 20\n    return total",
        "gold_label": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums",
        "task_id": 675,
        "test_list": [
            "assert sum_nums(2,10,11,20)==20",
            "assert sum_nums(15,17,1,10)==32",
            "assert sum_nums(10,15,5,30)==20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_nums(x, y, m, n):\n    total = x + y\n    if m <= total <= n:\n        return 20\n    return total",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove everything except alphanumeric characters from the given string by using regex.\nTest Example: assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef remove_extra_char(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)",
        "gold_label": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))",
        "task_id": 676,
        "test_list": [
            "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'",
            "assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'",
            "assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef remove_extra_char(text):\n    return re.sub(r'[^a-zA-Z0-9]', '', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the triangle is valid or not.\nTest Example: assert validity_triangle(60,50,90)==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def validity_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b + c != 180:\n        return False\n    return True",
        "gold_label": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False",
        "task_id": 677,
        "test_list": [
            "assert validity_triangle(60,50,90)==False",
            "assert validity_triangle(45,75,60)==True",
            "assert validity_triangle(30,50,100)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def validity_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a + b + c != 180:\n        return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to remove spaces from a given string.\nTest Example: assert remove_spaces(\"a b c\") == \"abc\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_spaces(string):\n    return ''.join(string.split())",
        "gold_label": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1",
        "task_id": 678,
        "test_list": [
            "assert remove_spaces(\"a b c\") == \"abc\"",
            "assert remove_spaces(\"1 2 3\") == \"123\"",
            "assert remove_spaces(\" b c\") == \"bc\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_spaces(string):\n    return ''.join(string.split())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to access dictionary key\u2019s element by index.\nTest Example: assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def access_key(dictionary, index):\n    return list(dictionary.keys())[index]",
        "gold_label": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]",
        "task_id": 679,
        "test_list": [
            "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'",
            "assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'",
            "assert access_key({'program':15,'computer':45},1)== 'computer'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def access_key(dictionary, index):\n    return list(dictionary.keys())[index]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether a sequence of numbers has an increasing trend or not.\nTest Example: assert increasing_trend([1,2,3,4]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def increasing_trend(nums):\n    if len(nums) <= 1:\n        return True\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True",
        "gold_label": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
        "task_id": 680,
        "test_list": [
            "assert increasing_trend([1,2,3,4]) == True",
            "assert increasing_trend([4,3,2,1]) == False",
            "assert increasing_trend([0,1,4,9]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def increasing_trend(nums):\n    if len(nums) <= 1:\n        return True\n    for i in range(1, len(nums)):\n        if nums[i] <= nums[i-1]:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the smallest prime divisor of a number.\nTest Example: assert smallest_Divisor(10) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
        "gold_label": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ",
        "task_id": 681,
        "test_list": [
            "assert smallest_Divisor(10) == 2",
            "assert smallest_Divisor(25) == 5",
            "assert smallest_Divisor(31) == 31"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def smallest_Divisor(n):\n    if n < 2:\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return i\n    return n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to multiply two lists using map and lambda function.\nTest Example: assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def mul_list(nums1, nums2):\n    return list(map(lambda x, y: x * y, nums1, nums2))",
        "gold_label": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)",
        "task_id": 682,
        "test_list": [
            "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]",
            "assert mul_list([1,2],[3,4])==[3,8]",
            "assert mul_list([90,120],[50,70])==[4500,8400]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def mul_list(nums1, nums2):\n    return list(map(lambda x, y: x * y, nums1, nums2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given number can be represented by sum of two squares or not.\nTest Example: assert sum_Square(25) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_Square(n):\n    if n < 0:\n        return False\n    \n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            if i*i + j*j == n:\n                return True\n    \n    return False",
        "gold_label": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False",
        "task_id": 683,
        "test_list": [
            "assert sum_Square(25) == True",
            "assert sum_Square(24) == False",
            "assert sum_Square(17) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_Square(n):\n    if n < 0:\n        return False\n    \n    for i in range(int(n**0.5) + 1):\n        for j in range(int(n**0.5) + 1):\n            if i*i + j*j == n:\n                return True\n    \n    return False",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count occurences of a character in a repeated string.\nTest Example: assert count_Char(\"abcac\",'a') == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Char(s, char):\n    char_count = s.count(char)\n    n = 10**12  # Large number of repetitions\n    full_repetitions = n // len(s)\n    remainder = n % len(s)\n    \n    total_count = char_count * full_repetitions\n    total_count += s[:remainder].count(char)\n    \n    return total_count",
        "gold_label": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ",
        "task_id": 684,
        "test_list": [
            "assert count_Char(\"abcac\",'a') == 4",
            "assert count_Char(\"abca\",'c') == 2",
            "assert count_Char(\"aba\",'a') == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Char(s, char):\n    char_count = s.count(char)\n    n = 10**6  # Assuming a very large string repetition\n    full_repetitions = n // len(s)\n    remainder = n % len(s)\n    \n    total_count = char_count * full_repetitions\n    total_count += s[:remainder].count(char)\n    \n    return total_count",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of prime numbers between 1 to n.\nTest Example: assert sum_Of_Primes(10) == 17\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    return sum(i for i in range(2, n+1) if primes[i])",
        "gold_label": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum",
        "task_id": 685,
        "test_list": [
            "assert sum_Of_Primes(10) == 17",
            "assert sum_Of_Primes(20) == 77",
            "assert sum_Of_Primes(5) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_Of_Primes(n):\n    if n < 2:\n        return 0\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    \n    return sum(i for i in range(2, n+1) if primes[i])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the frequency of each element in the given list.\nTest Example: assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.get(item, 0) + 1\n    return str(freq)",
        "gold_label": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) ",
        "task_id": 686,
        "test_list": [
            "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'",
            "assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'",
            "assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def freq_element(test_tup):\n    freq = {}\n    for item in test_tup:\n        freq[item] = freq.get(item, 0) + 1\n    return str(freq)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\nTest Example: assert recur_gcd(12,14) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
        "gold_label": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)",
        "task_id": 687,
        "test_list": [
            "assert recur_gcd(12,14) == 2",
            "assert recur_gcd(13,17) == 1",
            "assert recur_gcd(9, 3) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    return recur_gcd(b, a % b)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get the length of a complex number.\nTest Example: assert len_complex(3,4)==5.0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
        "gold_label": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length",
        "task_id": 688,
        "test_list": [
            "assert len_complex(3,4)==5.0",
            "assert len_complex(9,10)==13.45362404707371",
            "assert len_complex(7,9)==11.40175425099138"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef len_complex(a, b):\n    return math.sqrt(a**2 + b**2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\nTest Example: assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    \n    if arr[0] == 0:\n        return float('inf')\n    \n    max_reach = arr[0]\n    steps_left = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps_left -= 1\n        \n        if steps_left == 0:\n            jumps += 1\n            \n            if i >= max_reach:\n                return float('inf')\n            \n            steps_left = max_reach - i\n    \n    return float('inf')",
        "gold_label": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]",
        "task_id": 689,
        "test_list": [
            "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3",
            "assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3",
            "assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_jumps(arr, n):\n    if n <= 1:\n        return 0\n    \n    if arr[0] == 0:\n        return float('inf')\n    \n    max_reach = arr[0]\n    steps_left = arr[0]\n    jumps = 1\n    \n    for i in range(1, n):\n        if i == n - 1:\n            return jumps\n        \n        max_reach = max(max_reach, i + arr[i])\n        steps_left -= 1\n        \n        if steps_left == 0:\n            jumps += 1\n            \n            if i >= max_reach:\n                return float('inf')\n            \n            steps_left = max_reach - i\n    \n    return float('inf')",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to multiply consecutive numbers of a given list.\nTest Example: assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def mul_consecutive_nums(nums):\n    return [nums[i] * nums[i+1] for i in range(len(nums)-1)]",
        "gold_label": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
        "task_id": 690,
        "test_list": [
            "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]",
            "assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]",
            "assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def mul_consecutive_nums(nums):\n    return [nums[i] * nums[i+1] for i in range(len(nums)-1)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\nTest Example: assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def group_element(test_list):\n    result = {}\n    for first, second in test_list:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result",
        "gold_label": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n",
        "task_id": 691,
        "test_list": [
            "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}",
            "assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}",
            "assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def group_element(test_list):\n    result = {}\n    for first, second in test_list:\n        if second not in result:\n            result[second] = []\n        result[second].append(first)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the last two digits in factorial of a given number.\nTest Example: assert last_Two_Digits(7) == 40\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def last_Two_Digits(N):\n    if N < 0:\n        return None\n    if N >= 20:\n        return 0\n    fac = 1\n    for i in range(1, N + 1):\n        fac = (fac * i) % 100\n    return fac",
        "gold_label": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ",
        "task_id": 692,
        "test_list": [
            "assert last_Two_Digits(7) == 40",
            "assert last_Two_Digits(5) == 20",
            "assert last_Two_Digits(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def last_Two_Digits(N):\n    if N < 0:\n        return None\n    if N >= 20:\n        return 0\n    fac = 1\n    for i in range(1, N + 1):\n        fac = (fac * i) % 100\n    return fac",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove multiple spaces in a string by using regex.\nTest Example: assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef remove_multiple_spaces(text):\n    return re.sub(r'\\s+', ' ', text.strip())",
        "gold_label": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))",
        "task_id": 693,
        "test_list": [
            "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'",
            "assert remove_multiple_spaces('Quad      Core') == 'Quad Core'",
            "assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef remove_multiple_spaces(text):\n    return re.sub(r'\\s+', ' ', text.strip())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract unique values from the given dictionary values.\nTest Example: assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def extract_unique(test_dict):\n    unique_values = set()\n    for values in test_dict.values():\n        unique_values.update(values)\n    return sorted(list(unique_values))",
        "gold_label": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res",
        "task_id": 694,
        "test_list": [
            "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]",
            "assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]",
            "assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def extract_unique(test_dict):\n    unique_values = set()\n    for values in test_dict.values():\n        unique_values.update(values)\n    return sorted(list(unique_values))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\nTest Example: assert check_greater((10, 4, 5), (13, 5, 18)) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_greater(tuple1, tuple2):\n    return all(y > x for x, y in zip(tuple1, tuple2))",
        "gold_label": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "task_id": 695,
        "test_list": [
            "assert check_greater((10, 4, 5), (13, 5, 18)) == True",
            "assert check_greater((1, 2, 3), (2, 1, 4)) == False",
            "assert check_greater((4, 5, 6), (5, 6, 7)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_greater(tuple1, tuple2):\n    return all(y > x for x, y in zip(tuple1, tuple2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to zip two given lists of lists.\nTest Example: assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def zip_list(list1, list2):\n    return [l1 + l2 for l1, l2 in zip(list1, list2)]",
        "gold_label": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result",
        "task_id": 696,
        "test_list": [
            "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]",
            "assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]",
            "assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def zip_list(list1, list2):\n    return [l1 + l2 for l1, l2 in zip(list1, list2)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find number of even elements in the given list using lambda function.\nTest Example: assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_even(array_nums):\n    return sum(1 for num in array_nums if num % 2 == 0)",
        "gold_label": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even",
        "task_id": 697,
        "test_list": [
            "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3",
            "assert count_even([10,15,14,13,-18,12,-20])==5",
            "assert count_even([1, 2, 4, 8, 9])==3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_even(array_nums):\n    return sum(1 for num in array_nums if num % 2 == 0)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\nTest Example: assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_dict_item(test_dict):\n    return dict(sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1]))",
        "gold_label": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n",
        "task_id": 698,
        "test_list": [
            "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
            "assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}",
            "assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_dict_item(test_dict):\n    return dict(sorted(test_dict.items(), key=lambda x: x[0][0] * x[0][1]))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the minimum number of swaps required to convert one binary string to another.\nTest Example: assert min_Swaps(\"1101\",\"1110\") == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    diff_count = sum(a != b for a, b in zip(str1, str2))\n    \n    if diff_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return diff_count // 2",
        "gold_label": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
        "task_id": 699,
        "test_list": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"",
            "assert min_Swaps(\"1110000\",\"0001101\") == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    diff_count = sum(a != b for a, b in zip(str1, str2))\n    \n    if diff_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return diff_count // 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the number of elements in a list which are within a specific range.\nTest Example: assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_range_in_list(li, min, max):\n    return sum(1 for x in li if min <= x <= max)",
        "gold_label": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr",
        "task_id": 700,
        "test_list": [
            "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6",
            "assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5",
            "assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_range_in_list(li, min, max):\n    return sum(1 for x in li if min <= x <= max)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the equilibrium index of the given array.\nTest Example: assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1",
        "gold_label": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1",
        "task_id": 701,
        "test_list": [
            "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3",
            "assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3",
            "assert equilibrium_index([1, 2, 3]) == -1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    for i, num in enumerate(arr):\n        if left_sum == total_sum - left_sum - num:\n            return i\n        left_sum += num\n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\nTest Example: assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def removals(arr, n, k):\n    arr.sort()\n    left = 0\n    right = 0\n    max_length = 0\n    \n    while right < n:\n        if arr[right] - arr[left] <= k:\n            max_length = max(max_length, right - left + 1)\n            right += 1\n        else:\n            left += 1\n    \n    return n - max_length",
        "gold_label": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans",
        "task_id": 702,
        "test_list": [
            "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5",
            "assert removals([1, 5, 6, 2, 8], 5, 2) == 3",
            "assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def removals(arr, n, k):\n    arr.sort()\n    left = 0\n    right = 0\n    max_length = 0\n    \n    while right < n:\n        if arr[right] - arr[left] <= k:\n            max_length = max(max_length, right - left + 1)\n            right += 1\n        else:\n            left += 1\n    \n    return n - max_length",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given key is present in the dictionary or not.\nTest Example: assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_key_present(d, x):\n    return x in d",
        "gold_label": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False",
        "task_id": 703,
        "test_list": [
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True",
            "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_key_present(d, x):\n    return x in d",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the harmonic sum of n-1.\nTest Example: assert harmonic_sum(10)==2.9289682539682538\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def harmonic_sum(n):\n    return sum(1/i for i in range(1, n))",
        "gold_label": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))",
        "task_id": 704,
        "test_list": [
            "assert harmonic_sum(10)==2.9289682539682538",
            "assert harmonic_sum(4)==2.083333333333333",
            "assert harmonic_sum(7)==2.5928571428571425 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def harmonic_sum(n):\n    return sum(1/i for i in range(1, n))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a list of lists by length and value.\nTest Example: assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_sublists(list1):\n    return sorted(list1, key=lambda x: (len(x), x))",
        "gold_label": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1",
        "task_id": 705,
        "test_list": [
            "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]",
            "assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]",
            "assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_sublists(list1):\n    return sorted(list1, key=lambda x: (len(x), x))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find whether an array is subset of another array.\nTest Example: assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_subset(arr1, m, arr2, n):\n    set1 = set(arr1)\n    return all(item in set1 for item in arr2)",
        "gold_label": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t",
        "task_id": 706,
        "test_list": [
            "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True",
            "assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True",
            "assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_subset(arr1, m, arr2, n):\n    set1 = set(arr1)\n    return all(item in set1 for item in arr2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the total set bits from 1 to n.\nTest Example: assert count_Set_Bits(16) == 33\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Set_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count",
        "gold_label": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ",
        "task_id": 707,
        "test_list": [
            "assert count_Set_Bits(16) == 33",
            "assert count_Set_Bits(2) == 2",
            "assert count_Set_Bits(14) == 28"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Set_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to convert a string to a list.\nTest Example: assert Convert('python program') == ['python','program']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Convert(string):\n    return string.split()",
        "gold_label": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ",
        "task_id": 708,
        "test_list": [
            "assert Convert('python program') == ['python','program']",
            "assert Convert('Data Analysis') ==['Data','Analysis']",
            "assert Convert('Hadoop Training') == ['Hadoop','Training']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Convert(string):\n    return string.split()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count unique keys for each value present in the tuple.\nTest Example: assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "from collections import defaultdict\n\ndef get_unique(test_list):\n    value_to_keys = defaultdict(set)\n    for key, value in test_list:\n        value_to_keys[value].add(key)\n    \n    result = {value: len(keys) for value, keys in value_to_keys.items()}\n    return str(result)",
        "gold_label": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) ",
        "task_id": 709,
        "test_list": [
            "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'",
            "assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'",
            "assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "from collections import defaultdict\n\ndef get_unique(test_list):\n    value_to_keys = defaultdict(set)\n    for key, value in test_list:\n        value_to_keys[value].add(key)\n    \n    result = {value: len(keys) for value, keys in value_to_keys.items()}\n    return str(result)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to access the initial and last data of the given tuple record.\nTest Example: assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def front_and_rear(test_tup):\n    return (test_tup[0], test_tup[-1])",
        "gold_label": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ",
        "task_id": 710,
        "test_list": [
            "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)",
            "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)",
            "assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def front_and_rear(test_tup):\n    return (test_tup[0], test_tup[-1])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\nTest Example: assert product_Equal(2841) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def product_Equal(n):\n    str_n = str(n)\n    odd_product = 1\n    even_product = 1\n    \n    for i in range(len(str_n)):\n        if i % 2 == 0:\n            even_product *= int(str_n[i])\n        else:\n            odd_product *= int(str_n[i])\n    \n    return even_product == odd_product",
        "gold_label": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False",
        "task_id": 711,
        "test_list": [
            "assert product_Equal(2841) == True",
            "assert product_Equal(1234) == False",
            "assert product_Equal(1212) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def product_Equal(n):\n    str_n = str(n)\n    odd_product = 1\n    even_product = 1\n    \n    for i in range(len(str_n)):\n        if i % 2 == 0:\n            even_product *= int(str_n[i])\n        else:\n            odd_product *= int(str_n[i])\n    \n    return even_product == odd_product",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove duplicates from a list of lists.\nTest Example: assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_duplicate(lst):\n    seen = set()\n    result = []\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in seen:\n            seen.add(sublist_tuple)\n            result.append(sublist)\n    return result",
        "gold_label": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate",
        "task_id": 712,
        "test_list": [
            "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] ",
            "assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]",
            "assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_duplicate(lst):\n    return list(map(list, set(map(tuple, lst))))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given tuple contains all valid values or not.\nTest Example: assert check_valid((True, True, True, True) ) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_valid(test_tup):\n    return all(test_tup)",
        "gold_label": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ",
        "task_id": 713,
        "test_list": [
            "assert check_valid((True, True, True, True) ) == True",
            "assert check_valid((True, False, True, True) ) == False",
            "assert check_valid((True, True, True, True) ) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_valid(test_tup):\n    return all(test_tup)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of distinct power of prime factor of given number.\nTest Example: assert count_Fac(24) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Fac(n):\n    factors = {}\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n        i += 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    \n    count = 0\n    for prime, power in factors.items():\n        count += len(bin(power)[2:].rstrip('0'))\n    \n    return count",
        "gold_label": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ",
        "task_id": 714,
        "test_list": [
            "assert count_Fac(24) == 3",
            "assert count_Fac(12) == 2",
            "assert count_Fac(4) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Fac(n):\n    factors = {}\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n        i += 1\n    if n > 1:\n        factors[n] = factors.get(n, 0) + 1\n    \n    count = 0\n    for prime, power in factors.items():\n        count += len(bin(power)[2:].rstrip('0'))\n    \n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert the given string of integers into a tuple.\nTest Example: assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def str_to_tuple(test_str):\n    return tuple(int(num) for num in test_str.split(', '))",
        "gold_label": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ",
        "task_id": 715,
        "test_list": [
            "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)",
            "assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)",
            "assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def str_to_tuple(test_str):\n    return tuple(int(num) for num in test_str.split(', '))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the perimeter of a rombus.\nTest Example: assert rombus_perimeter(10)==40\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rombus_perimeter(side_length):\n    return 4 * side_length",
        "gold_label": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
        "task_id": 716,
        "test_list": [
            "assert rombus_perimeter(10)==40",
            "assert rombus_perimeter(5)==20",
            "assert rombus_perimeter(4)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rombus_perimeter(side_length):\n    return 4 * side_length",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the standard deviation.\nTest Example: assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean = sum(data) / n\n    variance = sum((x - mean) ** 2 for x in data) / (n - 1)\n    return math.sqrt(variance)",
        "gold_label": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean",
        "task_id": 717,
        "test_list": [
            "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979",
            "assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287",
            "assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef sd_calc(data):\n    n = len(data)\n    if n <= 1:\n        return 0.0\n    mean = sum(data) / n\n    variance = sum((x - mean) ** 2 for x in data) / (n - 1)\n    return math.sqrt(variance)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to create a list taking alternate elements from another given list.\nTest Example: assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def alternate_elements(list1):\n    return list1[::2]",
        "gold_label": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ",
        "task_id": 718,
        "test_list": [
            "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']",
            "assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]",
            "assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def alternate_elements(list1):\n    return list1[::2]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an a followed by zero or more b's.\nTest Example: assert text_match(\"ac\")==('Found a match!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match(text):\n    pattern = r'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "task_id": 719,
        "test_list": [
            "assert text_match(\"ac\")==('Found a match!')",
            "assert text_match(\"dc\")==('Not matched!')",
            "assert text_match(\"abba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match(text):\n    pattern = r'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add a dictionary to the tuple.\nTest Example: assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)",
        "gold_label": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ",
        "task_id": 720,
        "test_list": [
            "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})",
            "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})",
            "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def add_dict_to_tuple(tup, dictionary):\n    return tup + (dictionary,)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\nTest Example: assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def maxAverageOfPath(cost, N):\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[N-1][N-1] / (2*N - 1)",
        "gold_label": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)",
        "task_id": 721,
        "test_list": [
            "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2",
            "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2",
            "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def maxAverageOfPath(cost, N):\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[N-1][N-1] / (2*N - 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to filter the height and width of students which are stored in a dictionary.\nTest Example: assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def filter_data(students, h, w):\n    return {name: measurements for name, measurements in students.items() if measurements[0] >= h and measurements[1] >= w}",
        "gold_label": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ",
        "task_id": 722,
        "test_list": [
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}",
            "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def filter_data(students, h, w):\n    return {name: measurements for name, measurements in students.items() if measurements[0] >= h and measurements[1] >= w}",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the same pair in two given lists using map function.\nTest Example: assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_same_pair(nums1, nums2):\n    return sum(map(lambda x, y: x == y, nums1, nums2))",
        "gold_label": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result",
        "task_id": 723,
        "test_list": [
            "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4",
            "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11",
            "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_same_pair(nums1, nums2):\n    return sum(map(lambda x, y: x == y, nums1, nums2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the sum of all digits of the base to the specified power.\nTest Example: assert power_base_sum(2,100)==115\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def power_base_sum(base, power):\n    result = pow(base, power)\n    digit_sum = 0\n    while result > 0:\n        digit_sum += result % 10\n        result //= 10\n    return digit_sum",
        "gold_label": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])",
        "task_id": 724,
        "test_list": [
            "assert power_base_sum(2,100)==115",
            "assert power_base_sum(8,10)==37",
            "assert power_base_sum(8,15)==62"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def power_base_sum(base, power):\n    result = pow(base, power)\n    digit_sum = 0\n    while result > 0:\n        digit_sum += result % 10\n        result //= 10\n    return digit_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract values between quotation marks of the given string by using regex.\nTest Example: assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
        "gold_label": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))",
        "task_id": 725,
        "test_list": [
            "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']",
            "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']",
            "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef extract_quotation(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to multiply the adjacent elements of the given tuple.\nTest Example: assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
        "gold_label": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
        "task_id": 726,
        "test_list": [
            "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)",
            "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)",
            "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def multiply_elements(test_tup):\n    return tuple(test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove all characters except letters and numbers using regex\nTest Example: assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef remove_char(S):\n    return re.sub(r'[^a-zA-Z0-9]', '', S)",
        "gold_label": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result",
        "task_id": 727,
        "test_list": [
            "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'",
            "assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'",
            "assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef remove_char(S):\n    return re.sub(r'[^a-zA-Z0-9]', '', S)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sum elements in two lists.\nTest Example: assert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
        "gold_label": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list",
        "task_id": 728,
        "test_list": [
            "assert sum_list([10,20,30],[15,25,35])==[25,45,65]",
            "assert sum_list([1,2,3],[5,6,7])==[6,8,10]",
            "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_list(lst1, lst2):\n    return [a + b for a, b in zip(lst1, lst2)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add two lists using map and lambda function.\nTest Example: assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def add_list(nums1, nums2):\n    return list(map(lambda x, y: x + y, nums1, nums2))",
        "gold_label": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)",
        "task_id": 729,
        "test_list": [
            "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]",
            "assert add_list([1,2],[3,4])==[4,6]",
            "assert add_list([10,20],[50,70])==[60,90]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def add_list(nums1, nums2):\n    return list(map(lambda x, y: x + y, nums1, nums2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove consecutive duplicates of a given list.\nTest Example: assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result",
        "gold_label": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ",
        "task_id": 730,
        "test_list": [
            "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]",
            "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]",
            "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def consecutive_duplicates(nums):\n    result = []\n    for num in nums:\n        if not result or num != result[-1]:\n            result.append(num)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the lateral surface area of a cone.\nTest Example: assert lateralsurface_cone(5,12)==204.20352248333654\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
        "gold_label": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA",
        "task_id": 731,
        "test_list": [
            "assert lateralsurface_cone(5,12)==204.20352248333654",
            "assert lateralsurface_cone(10,15)==566.3586699569488",
            "assert lateralsurface_cone(19,17)==1521.8090132193388"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef lateralsurface_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to replace all occurrences of spaces, commas, or dots with a colon.\nTest Example: assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
        "gold_label": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r",
        "task_id": 732,
        "test_list": [
            "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')",
            "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')",
            "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def replace_specialchar(text):\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the index of the first occurrence of a given number in a sorted array.\nTest Example: assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid-1] < target):\n            return mid\n        elif arr[mid] >= target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1",
        "gold_label": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result",
        "task_id": 733,
        "test_list": [
            "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1",
            "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2",
            "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target and (mid == 0 or arr[mid-1] < target):\n            return mid\n        elif arr[mid] >= target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of products of all possible subarrays.\nTest Example: assert sum_Of_Subarray_Prod([1,2,3],3) == 20\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum",
        "gold_label": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
        "task_id": 734,
        "test_list": [
            "assert sum_Of_Subarray_Prod([1,2,3],3) == 20",
            "assert sum_Of_Subarray_Prod([1,2],2) == 5",
            "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_Of_Subarray_Prod(arr, n):\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to toggle bits of the number except the first and the last bit.\nTest Example: assert toggle_middle_bits(9) == 15\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def toggle_middle_bits(n):\n    if n <= 3:\n        return n\n    \n    # Get the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set except first and last\n    mask = (1 << num_bits) - 1\n    mask ^= (1 << (num_bits - 1)) | 1\n    \n    # Toggle the middle bits using XOR\n    return n ^ mask",
        "gold_label": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
        "task_id": 735,
        "test_list": [
            "assert toggle_middle_bits(9) == 15",
            "assert toggle_middle_bits(10) == 12",
            "assert toggle_middle_bits(11) == 13"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def toggle_middle_bits(n):\n    if n <= 3:\n        return n\n    \n    # Get the number of bits in n\n    num_bits = n.bit_length()\n    \n    # Create a mask with all bits set except first and last\n    mask = (1 << num_bits) - 1\n    mask ^= (1 << (num_bits - 1)) | 1\n    \n    # Toggle the middle bits using XOR\n    return n ^ mask",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to locate the left insertion point for a specified value in sorted order.\nTest Example: assert left_insertion([1,2,4,5],6)==4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
        "gold_label": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i",
        "task_id": 736,
        "test_list": [
            "assert left_insertion([1,2,4,5],6)==4",
            "assert left_insertion([1,2,4,5],3)==2",
            "assert left_insertion([1,2,4,5],7)==4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def left_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given string is starting with a vowel or not using regex.\nTest Example: assert check_str(\"annie\") == 'Valid'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef check_str(string):\n    regex = r'^[aeiouAEIOU]'\n    return 'Valid' if re.match(regex, string) else 'Invalid'",
        "gold_label": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ",
        "task_id": 737,
        "test_list": [
            "assert check_str(\"annie\") == 'Valid'",
            "assert check_str(\"dawood\") == 'Invalid'",
            "assert check_str(\"Else\") == 'Valid'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef check_str(string):\n    regex = r'^[aeiouAEIOU]'\n    return 'Valid' if re.match(regex, string) else 'Invalid'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the geometric sum of n-1.\nTest Example: assert geometric_sum(7) == 1.9921875\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
        "gold_label": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)",
        "task_id": 738,
        "test_list": [
            "assert geometric_sum(7) == 1.9921875",
            "assert geometric_sum(4) == 1.9375",
            "assert geometric_sum(8) == 1.99609375"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    return sum(1 / (2 ** i) for i in range(n))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the index of smallest triangular number with n digits.\nTest Example: assert find_Index(2) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Index(n):\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) // 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1",
        "gold_label": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ",
        "task_id": 739,
        "test_list": [
            "assert find_Index(2) == 4",
            "assert find_Index(3) == 14",
            "assert find_Index(4) == 45"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Index(n):\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) // 2\n        if len(str(triangular_num)) == n:\n            return index\n        index += 1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\nTest Example: assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}",
        "gold_label": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ",
        "task_id": 740,
        "test_list": [
            "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}",
            "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
            "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def tuple_to_dict(tup):\n    return {tup[i]: tup[i+1] for i in range(0, len(tup), 2)}",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether all the characters are same or not.\nTest Example: assert all_Characters_Same(\"python\") == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "gold_label": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True",
        "task_id": 741,
        "test_list": [
            "assert all_Characters_Same(\"python\") == False",
            "assert all_Characters_Same(\"aaa\") == True",
            "assert all_Characters_Same(\"data\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def all_Characters_Same(s):\n    return len(set(s)) == 1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to caluclate the area of a tetrahedron.\nTest Example: assert area_tetrahedron(3)==15.588457268119894\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side**2",
        "gold_label": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area",
        "task_id": 742,
        "test_list": [
            "assert area_tetrahedron(3)==15.588457268119894",
            "assert area_tetrahedron(20)==692.8203230275509",
            "assert area_tetrahedron(10)==173.20508075688772"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef area_tetrahedron(side):\n    return math.sqrt(3) * side**2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to rotate a given list by specified number of items to the right direction.\nTest Example: assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rotate_right(list1, m, n):\n    if not list1 or m <= 0 or n <= 0:\n        return list1\n    \n    length = len(list1)\n    m = m % length\n    n = min(n, length)\n    \n    rotated = list1[-m:] + list1[:-n]\n    return rotated",
        "gold_label": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result",
        "task_id": 743,
        "test_list": [
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
            "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rotate_right(list1, m, n):\n    if not list1 or m <= 0 or n <= 0:\n        return list1\n    \n    length = len(list1)\n    m = m % length\n    n = min(n, length)\n    \n    rotated = list1[-m:] + list1[:-n]\n    return rotated",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given tuple has any none value or not.\nTest Example: assert check_none((10, 4, 5, 6, None)) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_none(test_tup):\n    return any(item is None for item in test_tup)",
        "gold_label": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ",
        "task_id": 744,
        "test_list": [
            "assert check_none((10, 4, 5, 6, None)) == True",
            "assert check_none((7, 8, 9, 11, 14)) == False",
            "assert check_none((1, 2, 3, 4, None)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_none(test_tup):\n    return any(item is None for item in test_tup)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find numbers within a given range where every number is divisible by every digit it contains.\nTest Example: assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for n in range(startnum, endnum + 1):\n        if all(int(digit) != 0 and n % int(digit) == 0 for digit in str(n)):\n            result.append(n)\n    return result",
        "gold_label": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",
        "task_id": 745,
        "test_list": [
            "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]",
            "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]",
            "assert divisible_by_digits(20,25)==[22, 24]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for n in range(startnum, endnum + 1):\n        if all(int(digit) != 0 and n % int(digit) == 0 for digit in str(n)):\n            result.append(n)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find area of a sector.\nTest Example: assert sector_area(4,45)==6.285714285714286\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sector_area(r, a):\n    import math\n    if a >= 360:\n        return None\n    return (math.pi * r**2) * (a / 360)",
        "gold_label": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea",
        "task_id": 746,
        "test_list": [
            "assert sector_area(4,45)==6.285714285714286",
            "assert sector_area(9,45)==31.82142857142857",
            "assert sector_area(9,360)==None"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sector_area(r, a):\n    from math import pi\n    if a >= 360:\n        return None\n    return (pi * r**2) * (a / 360)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the longest common subsequence for the given three string sequence.\nTest Example: assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    return L[m][n][o]",
        "gold_label": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]",
        "task_id": 747,
        "test_list": [
            "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2",
            "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 ",
            "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lcs_of_three(X, Y, Z, m, n, o):\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    return L[m][n][o]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to put spaces between words starting with capital letters in a given string by using regex.\nTest Example: assert capital_words_spaces(\"Python\") == 'Python'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r\"(?<!^)(?=[A-Z])\", \" \", str1)",
        "gold_label": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)",
        "task_id": 748,
        "test_list": [
            "assert capital_words_spaces(\"Python\") == 'Python'",
            "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'",
            "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef capital_words_spaces(str1):\n    return re.sub(r\"(?<!^)(?=[A-Z])\", \" \", str1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a given list of strings of numbers numerically.\nTest Example: assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted(map(int, nums_str))",
        "gold_label": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result",
        "task_id": 749,
        "test_list": [
            "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]",
            "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]",
            "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_numeric_strings(nums_str):\n    return sorted(map(int, nums_str))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add the given tuple to the given list.\nTest Example: assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def add_tuple(test_list, test_tup):\n    return test_list + list(test_tup)",
        "gold_label": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ",
        "task_id": 750,
        "test_list": [
            "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]",
            "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]",
            "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def add_tuple(test_list, test_tup):\n    return test_list + list(test_tup)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given array represents min heap or not.\nTest Example: assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_min_heap(arr, i=0):\n    size = len(arr)\n    for parent in range(size // 2):\n        left = 2 * parent + 1\n        right = 2 * parent + 2\n        \n        if left < size and arr[parent] > arr[left]:\n            return False\n        \n        if right < size and arr[parent] > arr[right]:\n            return False\n    \n    return True",
        "gold_label": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child",
        "task_id": 751,
        "test_list": [
            "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True",
            "assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True",
            "assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_min_heap(arr, i=0):\n    size = len(arr)\n    for parent in range(size // 2):\n        left = 2 * parent + 1\n        right = 2 * parent + 2\n        \n        if left < size and arr[parent] > arr[left]:\n            return False\n        \n        if right < size and arr[parent] > arr[right]:\n            return False\n    \n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the nth jacobsthal number.\nTest Example: assert jacobsthal_num(5) == 11\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b",
        "gold_label": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]",
        "task_id": 752,
        "test_list": [
            "assert jacobsthal_num(5) == 11",
            "assert jacobsthal_num(2) == 1",
            "assert jacobsthal_num(4) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find minimum k records from tuple list.\nTest Example: assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]",
        "gold_label": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ",
        "task_id": 753,
        "test_list": [
            "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]",
            "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]",
            "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_k(test_list, K):\n    return sorted(test_list, key=lambda x: x[1])[:K]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find common index elements from three lists.\nTest Example: assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result",
        "task_id": 754,
        "test_list": [
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]",
            "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]",
            "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def extract_index_list(l1, l2, l3):\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]",
        "answer_old": "def extract_index_list(l1, l2, l3):\n    return list(set(l1) & set(l2) & set(l3))",
        "answer": "def extract_index_list(l1, l2, l3):\n    return [x for x, y, z in zip(l1, l2, l3) if x == y == z]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the second smallest number in a list.\nTest Example: assert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None",
        "gold_label": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ",
        "task_id": 755,
        "test_list": [
            "assert second_smallest([1, 2, -8, -2, 0, -2])==-2",
            "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5",
            "assert second_smallest([2,2])==None"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an a followed by zero or one 'b'.\nTest Example: assert text_match_zero_one(\"ac\")==('Found a match!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "task_id": 756,
        "test_list": [
            "assert text_match_zero_one(\"ac\")==('Found a match!')",
            "assert text_match_zero_one(\"dc\")==('Not matched!')",
            "assert text_match_zero_one(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)?'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the pairs of reverse strings in the given string list.\nTest Example: assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return str(count)",
        "gold_label": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)",
        "task_id": 757,
        "test_list": [
            "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'",
            "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'",
            "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return str(count)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count number of unique lists within a list.\nTest Example: assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        result[sublist_tuple] = result.get(sublist_tuple, 0) + 1\n    return result",
        "gold_label": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result",
        "task_id": 758,
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        result[sublist_tuple] = result.get(sublist_tuple, 0) + 1\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check a decimal with a precision of 2.\nTest Example: assert is_decimal('123.11')==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        decimal_part = str(float_num).split('.')[1]\n        return len(decimal_part) <= 2\n    except (ValueError, IndexError):\n        return False",
        "gold_label": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)",
        "task_id": 759,
        "test_list": [
            "assert is_decimal('123.11')==True",
            "assert is_decimal('e666.86')==False",
            "assert is_decimal('3.124587')==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        decimal_part = str(float_num).split('.')[1]\n        return len(decimal_part) <= 2\n    except (ValueError, IndexError):\n        return False",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether an array contains only one distinct element or not.\nTest Example: assert unique_Element([1,1,1],3) == 'YES'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'",
        "gold_label": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')",
        "task_id": 760,
        "test_list": [
            "assert unique_Element([1,1,1],3) == 'YES'",
            "assert unique_Element([1,2,1,2],4) == 'NO'",
            "assert unique_Element([1,2,3,4,5],5) == 'NO'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def unique_Element(arr, n):\n    return 'YES' if len(set(arr)) == 1 else 'NO'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to caluclate arc length of an angle.\nTest Example: assert arc_length(9,45)==3.5357142857142856\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def arc_length(radius, angle):\n    import math\n    if angle >= 360:\n        return None\n    arc_length = (math.pi * radius * angle) / 180\n    return arc_length",
        "gold_label": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength",
        "task_id": 761,
        "test_list": [
            "assert arc_length(9,45)==3.5357142857142856",
            "assert arc_length(9,480)==None",
            "assert arc_length(5,270)==11.785714285714285"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def arc_length(radius, angle):\n    import math\n    if angle >= 360:\n        return None\n    arc_length = (math.pi * radius * angle) / 180\n    return arc_length",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given month number contains 30 days or not.\nTest Example: assert check_monthnumber_number(6)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_monthnumber_number(month):\n    thirty_day_months = {4, 6, 9, 11}\n    return month in thirty_day_months",
        "gold_label": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False",
        "task_id": 762,
        "test_list": [
            "assert check_monthnumber_number(6)==True",
            "assert check_monthnumber_number(2)==False",
            "assert check_monthnumber_number(12)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_monthnumber_number(month):\n    thirty_day_months = {4, 6, 9, 11}\n    return month in thirty_day_months",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the minimum difference between any two elements in a given array.\nTest Example: assert find_Min_Diff((1,5,3,19,18,25),6) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Min_Diff(arr, n):\n    arr = sorted(arr)\n    return min(arr[i+1] - arr[i] for i in range(n-1))",
        "gold_label": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ",
        "task_id": 763,
        "test_list": [
            "assert find_Min_Diff((1,5,3,19,18,25),6) == 1",
            "assert find_Min_Diff((4,3,2,6),4) == 1",
            "assert find_Min_Diff((30,5,20,9),4) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Min_Diff(arr, n):\n    arr = sorted(arr)\n    return min(arr[i+1] - arr[i] for i in range(n-1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count numeric values in a given string.\nTest Example: assert number_ctr('program2bedone') == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def number_ctr(string):\n    return sum(char.isdigit() for char in string)",
        "gold_label": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr",
        "task_id": 764,
        "test_list": [
            "assert number_ctr('program2bedone') == 1",
            "assert number_ctr('3wonders') ==1",
            "assert number_ctr('123') == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def number_ctr(string):\n    return sum(char.isdigit() for char in string)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find nth polite number.\nTest Example: assert is_polite(7) == 11\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_polite(n):\n    count = 0\n    current = 3\n    while count < n:\n        sum_range = 0\n        start = current\n        while sum_range < current:\n            sum_range += start\n            start += 1\n            if sum_range == current:\n                count += 1\n                if count == n:\n                    return current\n                break\n        current += 1\n    return current",
        "gold_label": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ",
        "task_id": 765,
        "test_list": [
            "assert is_polite(7) == 11",
            "assert is_polite(4) == 7",
            "assert is_polite(9) == 13"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_polite(n):\n    count = 0\n    current = 3\n    while count < n:\n        sum_range = 0\n        start = current\n        while sum_range < current:\n            sum_range += start\n            start += 1\n            if sum_range == current:\n                count += 1\n                if count == n:\n                    return current\n                break\n        current += 1\n    return current",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to iterate over all pairs of consecutive items in a given list.\nTest Example: assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))",
        "gold_label": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp",
        "task_id": 766,
        "test_list": [
            "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]",
            "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]",
            "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def pair_wise(lst):\n    return list(zip(lst, lst[1:]))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\nTest Example: assert get_Pairs_Count([1,1,1,1],4,2) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    num_freq = {}\n    \n    for num in arr:\n        if sum - num in num_freq:\n            count += num_freq[sum - num]\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count",
        "gold_label": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
        "task_id": 767,
        "test_list": [
            "assert get_Pairs_Count([1,1,1,1],4,2) == 6",
            "assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3",
            "assert get_Pairs_Count([1,-2,3],3,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_Pairs_Count(arr, n, sum):\n    count = 0\n    num_freq = {}\n    \n    for num in arr:\n        if sum - num in num_freq:\n            count += num_freq[sum - num]\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check for odd parity of a given number.\nTest Example: assert check_Odd_Parity(13) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_Odd_Parity(num):\n    return bin(num).count('1') % 2 != 0",
        "gold_label": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False",
        "task_id": 768,
        "test_list": [
            "assert check_Odd_Parity(13) == True",
            "assert check_Odd_Parity(21) == True",
            "assert check_Odd_Parity(18) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_Odd_Parity(num):\n    return bin(num).count('1') % 2 != 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to get the difference between two lists.\nTest Example: assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    diff1 = list(set1 - set2)\n    diff2 = list(set2 - set1)\n    return sorted(diff1 + diff2, key=lambda x: li1.index(x) if x in li1 else li2.index(x))",
        "gold_label": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ",
        "task_id": 769,
        "test_list": [
            "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]",
            "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]",
            "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Diff(li1, li2):\n    set1 = set(li1)\n    set2 = set(li2)\n    diff1 = list(set1 - set2)\n    diff2 = list(set2 - set1)\n    return sorted(diff1 + diff2, key=lambda x: li1.index(x) if x in li1 else li2.index(x))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of fourth power of first n odd natural numbers.\nTest Example: assert odd_Num_Sum(2) == 82\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def odd_Num_Sum(n):\n    return sum((2*i - 1)**4 for i in range(1, n + 1))",
        "gold_label": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ",
        "task_id": 770,
        "test_list": [
            "assert odd_Num_Sum(2) == 82",
            "assert odd_Num_Sum(3) == 707",
            "assert odd_Num_Sum(4) == 3108"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def odd_Num_Sum(n):\n    return sum((2*i - 1)**4 for i in range(1, n + 1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given expression is balanced or not.\nTest Example: assert check_expression(\"{()}[{}]\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_expression(exp):\n    stack = []\n    opening = \"({[\"\n    closing = \")}]\"\n    pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    \n    return len(stack) == 0",
        "gold_label": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack",
        "task_id": 771,
        "test_list": [
            "assert check_expression(\"{()}[{}]\") == True",
            "assert check_expression(\"{()}[{]\") == False",
            "assert check_expression(\"{()}[{}][]({})\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_expression(exp):\n    stack = []\n    opening = \"({[\"\n    closing = \")}]\"\n    pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in exp:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    \n    return len(stack) == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove all the words with k length in the given string.\nTest Example: assert remove_length('The person is most value tet', 3) == 'person is most value'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)",
        "gold_label": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ",
        "task_id": 772,
        "test_list": [
            "assert remove_length('The person is most value tet', 3) == 'person is most value'",
            "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'",
            "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the occurrence and position of the substrings within a string.\nTest Example: assert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def occurance_substring(text, pattern):\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None",
        "gold_label": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)",
        "task_id": 773,
        "test_list": [
            "assert occurance_substring('python programming, python language','python')==('python', 0, 6)",
            "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)",
            "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def occurance_substring(text, pattern):\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the string is a valid email address or not using regex.\nTest Example: assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
        "gold_label": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ",
        "task_id": 774,
        "test_list": [
            "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'",
            "assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'",
            "assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef check_email(email):\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.match(pattern, email):\n        return 'Valid Email'\n    else:\n        return 'Invalid Email'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether every odd index contains odd numbers of a given list.\nTest Example: assert odd_position([2,1,4,3,6,7,6,3]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "gold_label": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
        "task_id": 775,
        "test_list": [
            "assert odd_position([2,1,4,3,6,7,6,3]) == True",
            "assert odd_position([4,1,2]) == True",
            "assert odd_position([1,2,3]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count those characters which have vowels as their neighbors in the given string.\nTest Example: assert count_vowels('bestinstareels') == 7\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] not in vowels:\n            if (i > 0 and test_str[i-1] in vowels) or (i < len(test_str)-1 and test_str[i+1] in vowels):\n                count += 1\n    return count",
        "gold_label": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ",
        "task_id": 776,
        "test_list": [
            "assert count_vowels('bestinstareels') == 7",
            "assert count_vowels('partofthejourneyistheend') == 12",
            "assert count_vowels('amazonprime') == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] not in vowels:\n            if (i > 0 and test_str[i-1] in vowels) or (i < len(test_str)-1 and test_str[i+1] in vowels):\n                count += 1\n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of non-repeated elements in a given array.\nTest Example: assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Sum(arr, n):\n    unique_elements = set(arr)\n    return sum(unique_elements)",
        "gold_label": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum",
        "task_id": 777,
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21",
            "assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71",
            "assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Sum(arr, n):\n    unique_elements = set(arr)\n    return sum(unique_elements)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to pack consecutive duplicates of a given list elements into sublists.\nTest Example: assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            result.append(current_sublist)\n            current_sublist = [item]\n    \n    result.append(current_sublist)\n    return result",
        "gold_label": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]",
        "task_id": 778,
        "test_list": [
            "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]",
            "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]",
            "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = [lst[0]]\n    \n    for item in lst[1:]:\n        if item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            result.append(current_sublist)\n            current_sublist = [item]\n    \n    result.append(current_sublist)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the number of unique lists within a list.\nTest Example: assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        result[sublist_tuple] = result.get(sublist_tuple, 0) + 1\n    return result",
        "gold_label": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result",
        "task_id": 779,
        "test_list": [
            "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}",
            "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}",
            "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def unique_sublists(list1):\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        result[sublist_tuple] = result.get(sublist_tuple, 0) + 1\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the combinations of sums with tuples in the given tuple list.\nTest Example: assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_combinations(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            sum_tuple = (tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1])\n            result.append(sum_tuple)\n    return result",
        "gold_label": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ",
        "task_id": 780,
        "test_list": [
            "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]",
            "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]",
            "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_combinations(tuple_list):\n    result = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            sum_tuple = (tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1])\n            result.append(sum_tuple)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the count of divisors is even or odd.\nTest Example: assert count_Divisors(10) == \"Even\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef count_Divisors(n):\n    count = sum(2 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n    count -= int(math.sqrt(n)) ** 2 == n\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
        "gold_label": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ",
        "task_id": 781,
        "test_list": [
            "assert count_Divisors(10) == \"Even\"",
            "assert count_Divisors(100) == \"Odd\"",
            "assert count_Divisors(125) == \"Even\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef count_Divisors(n):\n    count = sum(2 for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n    count -= int(math.sqrt(n)) ** 2 == n\n    return \"Even\" if count % 2 == 0 else \"Odd\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of all odd length subarrays.\nTest Example: assert Odd_Length_Sum([1,2,4]) == 14\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Odd_Length_Sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum",
        "gold_label": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum",
        "task_id": 782,
        "test_list": [
            "assert Odd_Length_Sum([1,2,4]) == 14",
            "assert Odd_Length_Sum([1,2,1,2]) == 15",
            "assert Odd_Length_Sum([1,7]) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Odd_Length_Sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert rgb color to hsv color.\nTest Example: assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    else:  # mx == b\n        h = (60 * ((r-g)/df) + 240) % 360\n    \n    s = (df/mx) * 100 if mx != 0 else 0\n    v = mx * 100\n    \n    return (h, s, v)",
        "gold_label": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v",
        "task_id": 783,
        "test_list": [
            "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)",
            "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)",
            "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    \n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    else:  # mx == b\n        h = (60 * ((r-g)/df) + 240) % 360\n    \n    s = (df/mx) * 100 if mx != 0 else 0\n    v = mx * 100\n    \n    return (h, s, v)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the product of first even and odd number of a given list.\nTest Example: assert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def mul_even_odd(list1):\n    even = next((num for num in list1 if num % 2 == 0), 1)\n    odd = next((num for num in list1 if num % 2 != 0), 1)\n    return even * odd",
        "gold_label": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)",
        "task_id": 784,
        "test_list": [
            "assert mul_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert mul_even_odd([1,5,7,9,10])==10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def mul_even_odd(list1):\n    even = next((num for num in list1 if num % 2 == 0), 1)\n    odd = next((num for num in list1 if num % 2 != 0), 1)\n    return even * odd",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert tuple string to integer tuple.\nTest Example: assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def tuple_str_int(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))",
        "gold_label": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ",
        "task_id": 785,
        "test_list": [
            "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)",
            "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
            "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def tuple_str_int(test_str):\n    return tuple(map(int, test_str.strip('()').split(', ')))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to locate the right insertion point for a specified value in sorted order.\nTest Example: assert right_insertion([1,2,4,5],6)==4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left",
        "gold_label": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i",
        "task_id": 786,
        "test_list": [
            "assert right_insertion([1,2,4,5],6)==4",
            "assert right_insertion([1,2,4,5],3)==2",
            "assert right_insertion([1,2,4,5],7)==4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def right_insertion(a, x):\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an a followed by three 'b'.\nTest Example: assert text_match_three(\"ac\")==('Not matched!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "task_id": 787,
        "test_list": [
            "assert text_match_three(\"ac\")==('Not matched!')",
            "assert text_match_three(\"dc\")==('Not matched!')",
            "assert text_match_three(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to create a new tuple from the given string and list.\nTest Example: assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])",
        "gold_label": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ",
        "task_id": 788,
        "test_list": [
            "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')",
            "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')",
            "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def new_tuple(test_list, test_str):\n    return tuple(test_list + [test_str])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the perimeter of a regular polygon.\nTest Example: assert perimeter_polygon(4,20)==80\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def perimeter_polygon(n, side_length):\n    return n * side_length",
        "gold_label": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter",
        "task_id": 789,
        "test_list": [
            "assert perimeter_polygon(4,20)==80",
            "assert perimeter_polygon(10,15)==150",
            "assert perimeter_polygon(9,7)==63"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def perimeter_polygon(n, side_length):\n    return n * side_length",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether every even index contains even numbers of a given list.\nTest Example: assert even_position([3,2,1]) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
        "gold_label": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
        "task_id": 790,
        "test_list": [
            "assert even_position([3,2,1]) == False",
            "assert even_position([1,2,3]) == False",
            "assert even_position([2,1,4]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove the nested record from the given tuple.\nTest Example: assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
        "gold_label": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ",
        "task_id": 791,
        "test_list": [
            "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)",
            "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)",
            "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_nested(tup):\n    return tuple(item for item in tup if not isinstance(item, tuple))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of lists in a given number of lists.\nTest Example: assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "gold_label": "def count_list(input_list): \r\n    return len(input_list)",
        "task_id": 792,
        "test_list": [
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4",
            "assert count_list([[1,2],[2,3],[4,5]]) == 3",
            "assert count_list([[1,0],[2,0]]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the last position of an element in a sorted array.\nTest Example: assert last([1,2,3],1,3) == 0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def last(arr, x, n):\n    left, right = 0, n - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "gold_label": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res",
        "task_id": 793,
        "test_list": [
            "assert last([1,2,3],1,3) == 0",
            "assert last([1,1,1,2,3,4],1,6) == 2",
            "assert last([2,3,2,3,6,8,9],3,8) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def last(arr, x, n):\n    left, right = 0, n - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nTest Example: assert text_starta_endb(\"aabbbb\")==('Found a match!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
        "task_id": 794,
        "test_list": [
            "assert text_starta_endb(\"aabbbb\")==('Found a match!')",
            "assert text_starta_endb(\"aabAbbbc\")==('Not matched!')",
            "assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    if re.match(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\nTest Example: assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef cheap_items(items, n):\n    return heapq.nsmallest(n, items, key=lambda x: x['price'])",
        "gold_label": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items",
        "task_id": 795,
        "test_list": [
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]",
            "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef cheap_items(items, n):\n    return heapq.nsmallest(n, items, key=lambda x: x['price'])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write function to find the sum of all items in the given dictionary.\nTest Example: assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def return_sum(dictionary):\n    return sum(dictionary.values())",
        "gold_label": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum",
        "task_id": 796,
        "test_list": [
            "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600",
            "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88",
            "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def return_sum(dictionary):\n    return sum(dictionary.values())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of all odd natural numbers within the range l and r.\nTest Example: assert sum_in_Range(2,5) == 8\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_in_Range(l, r):\n    def sum_odd(n):\n        return ((n + 1) // 2) ** 2\n\n    return sum_odd(r) - sum_odd(l - 1)",
        "gold_label": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)",
        "task_id": 797,
        "test_list": [
            "assert sum_in_Range(2,5) == 8",
            "assert sum_in_Range(5,7) == 12",
            "assert sum_in_Range(7,13) == 40"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_in_Range(l, r):\n    def sum_odd(n):\n        return ((n + 1) // 2) ** 2\n\n    return sum_odd(r) - sum_odd(l - 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of an array.\nTest Example: assert _sum([1, 2, 3]) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def _sum(arr):\n    return sum(arr)",
        "gold_label": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ",
        "task_id": 798,
        "test_list": [
            "assert _sum([1, 2, 3]) == 6",
            "assert _sum([15, 12, 13, 10]) == 50",
            "assert _sum([0, 1, 2]) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def _sum(arr):\n    return sum(arr)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to left rotate the bits of a given number.\nTest Example: assert left_Rotate(16,2) == 64\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def left_Rotate(n, d):\n    INT_BITS = 32\n    d = d % INT_BITS\n    return ((n << d) | (n >> (INT_BITS - d))) & 0xFFFFFFFF",
        "gold_label": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ",
        "task_id": 799,
        "test_list": [
            "assert left_Rotate(16,2) == 64",
            "assert left_Rotate(10,2) == 40",
            "assert left_Rotate(99,3) == 792"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def left_Rotate(n, d):\n    INT_BITS = 32\n    d = d % INT_BITS\n    return ((n << d) | (n >> (INT_BITS - d))) & 0xFFFFFFFF",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove all whitespaces from a string.\nTest Example: assert remove_all_spaces('python  program')==('pythonprogram')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_all_spaces(text):\n    return ''.join(text.split())",
        "gold_label": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))",
        "task_id": 800,
        "test_list": [
            "assert remove_all_spaces('python  program')==('pythonprogram')",
            "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')",
            "assert remove_all_spaces('python                     program')==('pythonprogram')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_all_spaces(text):\n    return ''.join(text.split())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of equal numbers from three given integers.\nTest Example: assert test_three_equal(1,1,1) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count",
        "gold_label": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))",
        "task_id": 801,
        "test_list": [
            "assert test_three_equal(1,1,1) == 3",
            "assert test_three_equal(-1,-2,-3) == 0",
            "assert test_three_equal(1,2,2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of rotations required to generate a sorted array.\nTest Example: assert count_Rotation([3,2,1],3) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Rotation(arr, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % n\n        prev_mid = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n            return mid\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        elif arr[left] <= arr[mid]:\n            left = mid + 1\n    \n    return 0",
        "gold_label": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0",
        "task_id": 802,
        "test_list": [
            "assert count_Rotation([3,2,1],3) == 1",
            "assert count_Rotation([4,5,1,2,3],5) == 2",
            "assert count_Rotation([7,8,9,1,2,3],6) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Rotation(arr, n):\n    left, right = 0, n - 1\n\n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n\n        mid = (left + right) // 2\n        next_element = (mid + 1) % n\n        prev_element = (mid - 1 + n) % n\n\n        if arr[mid] <= arr[next_element] and arr[mid] <= arr[prev_element]:\n            return mid\n\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        elif arr[left] <= arr[mid]:\n            left = mid + 1\n\n    return 0",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given number is a perfect square or not.\nTest Example: assert is_Perfect_Square(10) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n",
        "gold_label": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False",
        "task_id": 803,
        "test_list": [
            "assert is_Perfect_Square(10) == False",
            "assert is_Perfect_Square(36) == True",
            "assert is_Perfect_Square(14) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Perfect_Square(n):\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the product of numbers is even or not.\nTest Example: assert is_Product_Even([1,2,3],3) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Product_Even(arr, n):\n    product = 1\n    for num in arr[:n]:\n        product *= num\n    return product % 2 == 0",
        "gold_label": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False",
        "task_id": 804,
        "test_list": [
            "assert is_Product_Even([1,2,3],3) == True",
            "assert is_Product_Even([1,2,1,4],4) == True",
            "assert is_Product_Even([1,1],2) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Product_Even(arr, n):\n    product = 1\n    for num in arr[:n]:\n        product *= num\n    return product % 2 == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the list in a list of lists whose sum of elements is the highest.\nTest Example: assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list",
        "gold_label": "def max_sum_list(lists):\r\n return max(lists, key=sum)",
        "task_id": 805,
        "test_list": [
            "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] ",
            "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] ",
            "assert max_sum_list([[2,3,1]])==[2,3,1] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find maximum run of uppercase characters in the given string.\nTest Example: assert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run",
        "gold_label": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)",
        "task_id": 806,
        "test_list": [
            "assert max_run_uppercase('GeMKSForGERksISBESt') == 5",
            "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6",
            "assert max_run_uppercase('GooGLEFluTTER') == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the first odd number in a given list of numbers.\nTest Example: assert first_odd([1,3,5]) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return -1",
        "gold_label": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd",
        "task_id": 807,
        "test_list": [
            "assert first_odd([1,3,5]) == 1",
            "assert first_odd([2,4,1,3]) == 1",
            "assert first_odd ([8,9,1]) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def first_odd(nums):\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given tuples contain the k or not.\nTest Example: assert check_K((10, 4, 5, 6, 8), 6) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_K(test_tup, K):\n    return K in test_tup",
        "gold_label": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ",
        "task_id": 808,
        "test_list": [
            "assert check_K((10, 4, 5, 6, 8), 6) == True",
            "assert check_K((1, 2, 3, 4, 5, 6), 7) == False",
            "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_K(test_tup, K):\n    return K in test_tup",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\nTest Example: assert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
        "gold_label": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "task_id": 809,
        "test_list": [
            "assert check_smaller((1, 2, 3), (2, 3, 4)) == False",
            "assert check_smaller((4, 5, 6), (3, 4, 5)) == True",
            "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_smaller(test_tup1, test_tup2):\n    return all(x > y for x, y in zip(test_tup1, test_tup2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to iterate over elements repeating each as many times as its count.\nTest Example: assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_variable(*args):\n    result = []\n    for i, count in enumerate(args):\n        if count > 0:\n            result.extend([chr(ord('p') + i)] * count)\n    return result",
        "gold_label": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())",
        "task_id": 810,
        "test_list": [
            "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] ",
            "assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] ",
            "assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_variable(*args):\n    result = []\n    for i, count in enumerate(args):\n        if count > 0:\n            result.extend([chr(ord('p') + i)] * count)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if two lists of tuples are identical or not.\nTest Example: assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_identical(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for item1, item2 in zip(list1, list2):\n        if item1 != item2:\n            return False\n    return True",
        "gold_label": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ",
        "task_id": 811,
        "test_list": [
            "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True",
            "assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False",
            "assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_identical(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    for item1, item2 in zip(list1, list2):\n        if item1 != item2:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to abbreviate 'road' as 'rd.' in a given string.\nTest Example: assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def road_rd(street):\n    return street.replace('Road', 'Rd.') if street.endswith('Road') else street",
        "gold_label": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))",
        "task_id": 812,
        "test_list": [
            "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')",
            "assert road_rd(\"palnadu Road\")==('palnadu Rd.')",
            "assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def road_rd(street):\n    return street.replace('Road', 'Rd.') if street.endswith('Road') else street",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find length of the string.\nTest Example: assert string_length('python')==6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def string_length(str1):\n    return len(str1)",
        "gold_label": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count",
        "task_id": 813,
        "test_list": [
            "assert string_length('python')==6",
            "assert string_length('program')==7",
            "assert string_length('language')==8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def string_length(str1):\n    return len(str1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the area of a rombus.\nTest Example: assert rombus_area(10,20)==100\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rombus_area(diagonal1, diagonal2):\n    \"\"\"\n    Calculate the area of a rhombus given its two diagonals.\n    \n    Args:\n    diagonal1 (float): Length of the first diagonal\n    diagonal2 (float): Length of the second diagonal\n    \n    Returns:\n    float: Area of the rhombus\n    \"\"\"\n    area = (diagonal1 * diagonal2) / 2\n    return area",
        "gold_label": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area",
        "task_id": 814,
        "test_list": [
            "assert rombus_area(10,20)==100",
            "assert rombus_area(10,5)==25",
            "assert rombus_area(4,2)==4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rombus_area(diagonal1, diagonal2):\n    \"\"\"\n    Calculate the area of a rhombus given its two diagonals.\n    \n    Args:\n    diagonal1 (float): Length of the first diagonal\n    diagonal2 (float): Length of the second diagonal\n    \n    Returns:\n    float: Area of the rhombus\n    \"\"\"\n    area = (diagonal1 * diagonal2) / 2\n    return area",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\nTest Example: assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_by_dnf(arr, n):\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n    return arr",
        "gold_label": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr",
        "task_id": 815,
        "test_list": [
            "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]",
            "assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
            "assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_by_dnf(arr, n):\n    low, mid, high = 0, 0, n - 1\n    while mid <= high:\n        if arr[mid] == 0:\n            arr[low], arr[mid] = arr[mid], arr[low]\n            low += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[mid], arr[high] = arr[high], arr[mid]\n            high -= 1\n    return arr",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to clear the values of the given tuples.\nTest Example: assert clear_tuple((1, 5, 3, 6, 8)) == ()\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def clear_tuple(test_tup):\n    return ()",
        "gold_label": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ",
        "task_id": 816,
        "test_list": [
            "assert clear_tuple((1, 5, 3, 6, 8)) == ()",
            "assert clear_tuple((2, 1, 4 ,5 ,6)) == ()",
            "assert clear_tuple((3, 2, 5, 6, 8)) == ()"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def clear_tuple(test_tup):\n    return ()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\nTest Example: assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))",
        "gold_label": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result",
        "task_id": 817,
        "test_list": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 or x % n == 0, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count lower case letters in a given string.\nTest Example: assert lower_ctr('abc') == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lower_ctr(s):\n    return sum(1 for c in s if c.islower())",
        "gold_label": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr",
        "task_id": 818,
        "test_list": [
            "assert lower_ctr('abc') == 3",
            "assert lower_ctr('string') == 6",
            "assert lower_ctr('Python') == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lower_ctr(s):\n    return sum(1 for c in s if c.islower())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\nTest Example: assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_duplic(numbers):\n    if not numbers:\n        return [], []\n    \n    elements = []\n    frequencies = []\n    current_element = numbers[0]\n    current_count = 1\n    \n    for num in numbers[1:]:\n        if num == current_element:\n            current_count += 1\n        else:\n            elements.append(current_element)\n            frequencies.append(current_count)\n            current_element = num\n            current_count = 1\n    \n    elements.append(current_element)\n    frequencies.append(current_count)\n    \n    return elements, frequencies",
        "gold_label": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n",
        "task_id": 819,
        "test_list": [
            "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])",
            "assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])",
            "assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_duplic(numbers):\n    if not numbers:\n        return [], []\n    \n    elements = []\n    frequencies = []\n    current_element = numbers[0]\n    current_count = 1\n    \n    for num in numbers[1:]:\n        if num == current_element:\n            current_count += 1\n        else:\n            elements.append(current_element)\n            frequencies.append(current_count)\n            current_element = num\n            current_count = 1\n    \n    elements.append(current_element)\n    frequencies.append(current_count)\n    \n    return elements, frequencies",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given month number contains 28 days or not.\nTest Example: assert check_monthnum_number(2)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_monthnum_number(monthnum):\n    return monthnum == 2",
        "gold_label": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False",
        "task_id": 820,
        "test_list": [
            "assert check_monthnum_number(2)==True",
            "assert check_monthnum_number(1)==False",
            "assert check_monthnum_number(3)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_monthnum_number(monthnum):\n    return monthnum == 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to merge two dictionaries into a single expression.\nTest Example: assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
        "gold_label": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict",
        "task_id": 821,
        "test_list": [
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}",
            "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}",
            "assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def merge_dictionaries(dict1, dict2):\n    return {**dict1, **dict2}",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to return true if the password is valid.\nTest Example: assert pass_validity(\"password\")==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef pass_validity(password):\n    if len(password) < 6 or len(password) > 12:\n        return False\n    if not re.search(r'[a-z]', password):\n        return False\n    if not re.search(r'[A-Z]', password):\n        return False\n    if not re.search(r'\\d', password):\n        return False\n    if not re.search(r'[$#@]', password):\n        return False\n    if re.search(r'\\s', password):\n        return False\n    return True",
        "gold_label": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False",
        "task_id": 822,
        "test_list": [
            "assert pass_validity(\"password\")==False",
            "assert pass_validity(\"Password@10\")==True",
            "assert pass_validity(\"password@10\")==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef pass_validity(password):\n    if len(password) < 6 or len(password) > 12:\n        return False\n    if not re.search(r'[a-z]', password):\n        return False\n    if not re.search(r'[A-Z]', password):\n        return False\n    if not re.search(r'\\d', password):\n        return False\n    if not re.search(r'[$#@]', password):\n        return False\n    if re.search(r'\\s', password):\n        return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given string starts with a substring using regex.\nTest Example: assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef check_substring(string, sample):\n    if sample in string:\n        pattern = r\"^\\s*\" + re.escape(sample)\n        if re.match(pattern, string):\n            return \"string starts with the given substring\"\n        else:\n            return \"string doesnt start with the given substring\"\n    else:\n        return \"entered string isnt a substring\"",
        "gold_label": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")",
        "task_id": 823,
        "test_list": [
            "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'",
            "assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'",
            "assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef check_substring(string, sample):\n    if sample in string:\n        pattern = r\"^\\s*\" + re.escape(sample)\n        if re.match(pattern, string):\n            return \"string starts with the given substring\"\n        else:\n            return \"string doesnt start with the given substring\"\n    else:\n        return \"entered string isnt a substring\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to remove even numbers from a given list.\nTest Example: assert remove_even([1,3,5,2]) == [1,3,5]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_even(l):\n    return [num for num in l if num % 2 != 0]",
        "gold_label": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l",
        "task_id": 824,
        "test_list": [
            "assert remove_even([1,3,5,2]) == [1,3,5]",
            "assert remove_even([5,6,7]) == [5,7]",
            "assert remove_even([1,2,3,4]) == [1,3]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_even(l):\n    return [num for num in l if num % 2 != 0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to access multiple elements of specified index from a given list.\nTest Example: assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index]",
        "gold_label": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result",
        "task_id": 825,
        "test_list": [
            "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]",
            "assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]",
            "assert access_elements([1,0,2,3],[0,1]) == [1,0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def access_elements(nums, list_index):\n    return [nums[i] for i in list_index]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the type of triangle from the given sides.\nTest Example: assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    if a + b <= c:\n        return \"Not a triangle\"\n    \n    a_sq, b_sq, c_sq = a**2, b**2, c**2\n    \n    if c_sq == a_sq + b_sq:\n        return \"Right-angled Triangle\"\n    elif c_sq > a_sq + b_sq:\n        return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"",
        "gold_label": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ",
        "task_id": 826,
        "test_list": [
            "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"",
            "assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"",
            "assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_Type_Of_Triangle(a, b, c):\n    sides = sorted([a, b, c])\n    a, b, c = sides[0], sides[1], sides[2]\n    \n    if a + b <= c:\n        return \"Not a triangle\"\n    \n    a_sq, b_sq, c_sq = a**2, b**2, c**2\n    \n    if c_sq == a_sq + b_sq:\n        return \"Right-angled Triangle\"\n    elif c_sq > a_sq + b_sq:\n        return \"Obtuse-angled Triangle\"\n    else:\n        return \"Acute-angled Triangle\"",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sum a specific column of a list in a given list of lists.\nTest Example: assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_column(list_of_lists, column_index):\n    return sum(row[column_index] for row in list_of_lists)",
        "gold_label": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result",
        "task_id": 827,
        "test_list": [
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15",
            "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_column(list_of_lists, column_index):\n    return sum(row[column_index] for row in list_of_lists)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count alphabets,digits and special charactes in a given string.\nTest Example: assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_alpha_dig_spl(string):\n    alphabets = sum(1 for char in string if char.isalpha())\n    digits = sum(1 for char in string if char.isdigit())\n    special = len(string) - alphabets - digits\n    return (alphabets, digits, special)",
        "gold_label": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ",
        "task_id": 828,
        "test_list": [
            "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)",
            "assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)",
            "assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_alpha_dig_spl(string):\n    alphabets = sum(1 for char in string if char.isalpha())\n    digits = sum(1 for char in string if char.isdigit())\n    special = len(string) - alphabets - digits\n    return (alphabets, digits, special)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find out the second most repeated (or frequent) string in the given sequence.\nTest Example: assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def second_frequent(input):\n    frequency = {}\n    for item in input:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_items[1][0] if len(sorted_items) > 1 else None",
        "gold_label": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ",
        "task_id": 829,
        "test_list": [
            "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'",
            "assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'",
            "assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def second_frequent(input):\n    frequency = {}\n    for item in input:\n        frequency[item] = frequency.get(item, 0) + 1\n    \n    sorted_items = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    \n    return sorted_items[1][0] if len(sorted_items) > 1 else None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to round up a number to specific digits.\nTest Example: assert round_up(123.01247,0)==124\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef round_up(number, digits=0):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
        "gold_label": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)",
        "task_id": 830,
        "test_list": [
            "assert round_up(123.01247,0)==124",
            "assert round_up(123.01247,1)==123.1",
            "assert round_up(123.01247,2)==123.02"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef round_up(number, digits=0):\n    multiplier = 10 ** digits\n    return math.ceil(number * multiplier) / multiplier",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count equal element pairs from the given array.\nTest Example: assert count_Pairs([1,1,1,1],4) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Pairs(arr, n):\n    count = {}\n    total_pairs = 0\n    \n    for num in arr:\n        if num in count:\n            total_pairs += count[num]\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    return total_pairs",
        "gold_label": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ",
        "task_id": 831,
        "test_list": [
            "assert count_Pairs([1,1,1,1],4) == 6",
            "assert count_Pairs([1,5,1],3) == 1",
            "assert count_Pairs([3,2,1,7,8,9],6) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Pairs(arr, n):\n    count = {}\n    total_pairs = 0\n    \n    for num in arr:\n        if num in count:\n            total_pairs += count[num]\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    return total_pairs",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract the maximum numeric value from a string by using regex.\nTest Example: assert extract_max('100klh564abc365bg') == 564\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef extract_max(input):\n    numbers = re.findall(r'\\d+', input)\n    return max(map(int, numbers))",
        "gold_label": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)",
        "task_id": 832,
        "test_list": [
            "assert extract_max('100klh564abc365bg') == 564",
            "assert extract_max('hello300how546mer231') == 546",
            "assert extract_max('its233beenalong343journey234') == 343"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef extract_max(input):\n    numbers = re.findall(r'\\d+', input)\n    return max(map(int, numbers))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get dictionary keys as a list.\nTest Example: assert get_key({1:'python',2:'java'})==[1,2]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_key(dict):\n    return list(dict.keys())",
        "gold_label": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list",
        "task_id": 833,
        "test_list": [
            "assert get_key({1:'python',2:'java'})==[1,2]",
            "assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]",
            "assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_key(dict):\n    return list(dict.keys())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\nTest Example: assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    d = 0\n    row, col = 0, 0\n    for num in range(1, n**2 + 1):\n        matrix[row][col] = num\n        next_row, next_col = row + directions[d][0], col + directions[d][1]\n        if not (0 <= next_row < n and 0 <= next_col < n) or matrix[next_row][next_col] != 0:\n            d = (d + 1) % 4\n        row, col = row + directions[d][0], col + directions[d][1]\n    return matrix",
        "gold_label": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix",
        "task_id": 834,
        "test_list": [
            "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] ",
            "assert generate_matrix(2)==[[1,2],[4,3]]",
            "assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def generate_matrix(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    d = 0\n    row, col = 0, 0\n    for num in range(1, n**2 + 1):\n        matrix[row][col] = num\n        next_row, next_col = row + directions[d][0], col + directions[d][1]\n        if not (0 <= next_row < n and 0 <= next_col < n) or matrix[next_row][next_col] != 0:\n            d = (d + 1) % 4\n        row, col = row + directions[d][0], col + directions[d][1]\n    return matrix",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the slope of a line.\nTest Example: assert slope(4,2,2,5) == -1.5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        raise ValueError(\"Undefined slope: vertical line\")\n    return (y2 - y1) / (x2 - x1)",
        "gold_label": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ",
        "task_id": 835,
        "test_list": [
            "assert slope(4,2,2,5) == -1.5",
            "assert slope(2,4,4,6) == 1",
            "assert slope(1,2,4,2) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def slope(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        raise ValueError(\"Undefined slope: vertical line\")\n    return (y2 - y1) / (x2 - x1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find length of the subarray having maximum sum.\nTest Example: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n        \n        if current_sum < 0:\n            current_sum = 0\n            temp_start = i + 1\n\n    return end - start + 1",
        "gold_label": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)",
        "task_id": 836,
        "test_list": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5",
            "assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2",
            "assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    end = 0\n    temp_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = temp_start\n            end = i\n        \n        if current_sum < 0:\n            current_sum = 0\n            temp_start = i + 1\n\n    return end - start + 1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the cube sum of first n odd natural numbers.\nTest Example: assert cube_Sum(2) == 28\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def cube_Sum(n):\n    return sum((2*i+1)**3 for i in range(n))",
        "gold_label": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum",
        "task_id": 837,
        "test_list": [
            "assert cube_Sum(2) == 28",
            "assert cube_Sum(3) == 153",
            "assert cube_Sum(4) == 496"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def cube_Sum(n):\n    return sum((2*i+1)**3 for i in range(n))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find minimum number swaps required to make two binary strings equal.\nTest Example: assert min_Swaps(\"0011\",\"1111\") == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    diff_count = sum(a != b for a, b in zip(s1, s2))\n    if diff_count % 2 != 0:\n        return -1\n    \n    return diff_count // 2",
        "gold_label": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ",
        "task_id": 838,
        "test_list": [
            "assert min_Swaps(\"0011\",\"1111\") == 1",
            "assert min_Swaps(\"00011\",\"01001\") == 2",
            "assert min_Swaps(\"111\",\"111\") == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_Swaps(s1, s2):\n    if len(s1) != len(s2):\n        return -1\n    \n    mismatches = sum(a != b for a, b in zip(s1, s2))\n    \n    if mismatches % 2 != 0:\n        return -1\n    \n    return mismatches // 2",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort the tuples alphabetically by the first item of each tuple.\nTest Example: assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[0])",
        "gold_label": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup",
        "task_id": 839,
        "test_list": [
            "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]",
            "assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]",
            "assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_tuple(tup):\n    return sorted(tup, key=lambda x: x[0])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\nTest Example: assert Check_Solution(2,0,-1) == \"Yes\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    if abs(root1) == abs(root2) and root1 * root2 < 0:\n        return \"Yes\"\n    else:\n        return \"No\"",
        "gold_label": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ",
        "task_id": 840,
        "test_list": [
            "assert Check_Solution(2,0,-1) == \"Yes\"",
            "assert Check_Solution(1,-5,6) == \"No\"",
            "assert Check_Solution(2,0,2) == \"Yes\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No\"\n    \n    root1 = (-b + (discriminant)**0.5) / (2*a)\n    root2 = (-b - (discriminant)**0.5) / (2*a)\n    \n    return \"Yes\" if root1 == -root2 else \"No\"",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the number of inversions in the given array.\nTest Example: assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_inv_count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left, right):\n        merged = []\n        inv_count = 0\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count",
        "gold_label": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ",
        "task_id": 841,
        "test_list": [
            "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5",
            "assert get_inv_count([8, 4, 2, 1], 4) == 6",
            "assert get_inv_count([3, 1, 2], 3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_inv_count(arr, n):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, inv_left = merge_sort(arr[:mid])\n        right, inv_right = merge_sort(arr[mid:])\n        merged, inv_merge = merge(left, right)\n        return merged, inv_left + inv_right + inv_merge\n\n    def merge(left, right):\n        merged = []\n        inv_count = 0\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the number which occurs for odd number of times in the given array.\nTest Example: assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_odd_occurence(arr, arr_size):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
        "gold_label": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1",
        "task_id": 842,
        "test_list": [
            "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5",
            "assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3",
            "assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_odd_occurence(arr, arr_size):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\nTest Example: assert nth_super_ugly_number(12,[2,7,13,19])==32\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    heap = [(p, p, 0) for p in primes]\n    heapq.heapify(heap)\n\n    while len(uglies) < n:\n        next_ugly, prime, index = heapq.heappop(heap)\n        if next_ugly != uglies[-1]:\n            uglies.append(next_ugly)\n        index += 1\n        heapq.heappush(heap, (prime * uglies[index], prime, index))\n\n    return uglies[-1]",
        "gold_label": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]",
        "task_id": 843,
        "test_list": [
            "assert nth_super_ugly_number(12,[2,7,13,19])==32",
            "assert nth_super_ugly_number(10,[2,7,13,19])==26",
            "assert nth_super_ugly_number(100,[2,7,13,19])==5408"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    heap = [(p, p, 0) for p in primes]\n    heapq.heapify(heap)\n\n    while len(uglies) < n:\n        next_ugly, prime, index = heapq.heappop(heap)\n        if next_ugly != uglies[-1]:\n            uglies.append(next_ugly)\n        index += 1\n        heapq.heappush(heap, (prime * uglies[index], prime, index))\n\n    return uglies[-1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the kth element in an array containing odd elements first and then even elements.\nTest Example: assert get_Number(8,5) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_Number(n, k):\n    odd_count = (n + 1) // 2\n    if k <= odd_count:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odd_count)",
        "gold_label": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ",
        "task_id": 844,
        "test_list": [
            "assert get_Number(8,5) == 2",
            "assert get_Number(7,2) == 3",
            "assert get_Number(5,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_Number(n, k):\n    odd_count = (n + 1) // 2\n    if k <= odd_count:\n        return 2 * k - 1\n    else:\n        return 2 * (k - odd_count)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the number of digits in factorial of a given number.\nTest Example: assert find_Digits(7) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    \n    digits = math.floor(math.lgamma(n + 1) / math.log(10)) + 1\n    return digits",
        "gold_label": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ",
        "task_id": 845,
        "test_list": [
            "assert find_Digits(7) == 4",
            "assert find_Digits(5) == 3",
            "assert find_Digits(4) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef find_Digits(n):\n    if n < 0:\n        return 0\n    if n <= 1:\n        return 1\n    \n    digits = math.floor(math.lgamma(n + 1) / math.log(10)) + 1\n    return digits",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the minimum number of platforms required for a railway/bus station.\nTest Example: assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_platform(arr, dep, n):\n    events = [(t, 1) for t in arr] + [(t, -1) for t in dep]\n    events.sort(key=lambda x: (x[0], -x[1]))\n    \n    current_platforms = 0\n    max_platforms = 0\n    \n    for _, event_type in events:\n        current_platforms += event_type\n        max_platforms = max(max_platforms, current_platforms)\n    \n    return max_platforms",
        "gold_label": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result",
        "task_id": 846,
        "test_list": [
            "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3",
            "assert find_platform([100,200,300,400],[700,800,900,1000],4)==4",
            "assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_platform(arr, dep, n):\n    events = [(t, 1) for t in arr] + [(t, -1) for t in dep]\n    events.sort(key=lambda x: (x[0], -x[1]))\n    \n    max_platforms = 0\n    current_platforms = 0\n    \n    for _, event_type in events:\n        current_platforms += event_type\n        max_platforms = max(max_platforms, current_platforms)\n    \n    return max_platforms",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to copy a list from a singleton tuple.\nTest Example: assert lcopy([1, 2, 3]) == [1, 2, 3]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lcopy(xs):\n    return list(xs)",
        "gold_label": "def lcopy(xs):\n  return xs[:]\n",
        "task_id": 847,
        "test_list": [
            "assert lcopy([1, 2, 3]) == [1, 2, 3]",
            "assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]",
            "assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lcopy(xs):\n    return list(xs)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the area of a trapezium.\nTest Example: assert area_trapezium(6,9,4)==30\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def area_trapezium(base1, base2, height):\n    return 0.5 * (base1 + base2) * height",
        "gold_label": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area",
        "task_id": 848,
        "test_list": [
            "assert area_trapezium(6,9,4)==30",
            "assert area_trapezium(10,20,30)==450",
            "assert area_trapezium(15,25,35)==700"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def area_trapezium(base1, base2, height):\n    return 0.5 * (base1 + base2) * height",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of all prime divisors of a given number.\nTest Example: assert Sum(60) == 10\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Sum(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_divisors_sum = 0\n    for i in range(2, N + 1):\n        if N % i == 0 and is_prime(i):\n            prime_divisors_sum += i\n\n    return prime_divisors_sum",
        "gold_label": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ",
        "task_id": 849,
        "test_list": [
            "assert Sum(60) == 10",
            "assert Sum(39) == 16",
            "assert Sum(40) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Sum(N):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    prime_divisors_sum = 0\n    for i in range(2, N + 1):\n        if N % i == 0 and is_prime(i):\n            prime_divisors_sum += i\n\n    return prime_divisors_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if a triangle of positive area is possible with the given angles.\nTest Example: assert is_triangleexists(50,60,70)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_triangleexists(a, b, c):\n    if a > 0 and b > 0 and c > 0 and (a + b + c) == 180:\n        return True\n    return False",
        "gold_label": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False",
        "task_id": 850,
        "test_list": [
            "assert is_triangleexists(50,60,70)==True",
            "assert is_triangleexists(90,45,45)==True",
            "assert is_triangleexists(150,30,70)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_triangleexists(a, b, c):\n    if a > 0 and b > 0 and c > 0 and (a + b + c) == 180:\n        return True\n    return False",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of inverse of divisors.\nTest Example: assert Sum_of_Inverse_Divisors(6,12) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Sum_of_Inverse_Divisors(N, Sum):\n    result = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            result += 1 / i\n    return round(result, 2)",
        "gold_label": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ",
        "task_id": 851,
        "test_list": [
            "assert Sum_of_Inverse_Divisors(6,12) == 2",
            "assert Sum_of_Inverse_Divisors(9,13) == 1.44",
            "assert Sum_of_Inverse_Divisors(1,4) == 4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Sum_of_Inverse_Divisors(N, Sum):\n    total = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            total += 1 / i\n    return round(total, 2)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to remove negative numbers from a list.\nTest Example: assert remove_negs([1,-2,3,-4]) == [1,3]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_negs(num_list):\n    return [num for num in num_list if num >= 0]",
        "gold_label": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list",
        "task_id": 852,
        "test_list": [
            "assert remove_negs([1,-2,3,-4]) == [1,3]",
            "assert remove_negs([1,2,3,-4]) == [1,2,3]",
            "assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_negs(num_list):\n    return [num for num in num_list if num >= 0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of odd factors of a number.\nTest Example: assert sum_of_odd_Factors(30) == 24\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_of_odd_Factors(n):\n    odd_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            odd_factors_sum += i\n    return odd_factors_sum",
        "gold_label": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ",
        "task_id": 853,
        "test_list": [
            "assert sum_of_odd_Factors(30) == 24",
            "assert sum_of_odd_Factors(18) == 13",
            "assert sum_of_odd_Factors(2) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_of_odd_Factors(n):\n    odd_factors_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 != 0:\n            odd_factors_sum += i\n    return odd_factors_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\nTest Example: assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef raw_heap(lst):\n    heap = lst.copy()\n    heapq.heapify(heap)\n    return heap",
        "gold_label": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap",
        "task_id": 854,
        "test_list": [
            "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]",
            "assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]",
            "assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef raw_heap(lst):\n    heap = lst.copy()\n    heapq.heapify(heap)\n    return heap",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check for even parity of a given number.\nTest Example: assert check_Even_Parity(10) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_Even_Parity(num):\n    return bin(num).count('1') % 2 == 0",
        "gold_label": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False",
        "task_id": 855,
        "test_list": [
            "assert check_Even_Parity(10) == True",
            "assert check_Even_Parity(11) == False",
            "assert check_Even_Parity(18) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_Even_Parity(num):\n    return bin(num).count('1') % 2 == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find minimum adjacent swaps required to sort binary array.\nTest Example: assert find_Min_Swaps([1,0,1,0],4) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Min_Swaps(arr, n):\n    ones_count = sum(arr)\n    zeros_count = n - ones_count\n    current_zeros = arr[:ones_count].count(0)\n    min_swaps = current_zeros\n    \n    for i in range(ones_count, n):\n        if arr[i - ones_count] == 0:\n            current_zeros -= 1\n        if arr[i] == 0:\n            current_zeros += 1\n        min_swaps = min(min_swaps, current_zeros)\n    \n    return min_swaps",
        "gold_label": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ",
        "task_id": 856,
        "test_list": [
            "assert find_Min_Swaps([1,0,1,0],4) == 3",
            "assert find_Min_Swaps([0,1,0],3) == 1",
            "assert find_Min_Swaps([0,0,1,1,0],5) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Min_Swaps(arr, n):\n    ones_count = sum(arr)\n    zeros_count = n - ones_count\n    current_ones = sum(arr[:zeros_count])\n    min_swaps = zeros_count - current_ones\n    \n    for i in range(zeros_count, n):\n        current_ones = current_ones - arr[i - zeros_count] + arr[i]\n        swaps = zeros_count - current_ones\n        min_swaps = min(min_swaps, swaps)\n    \n    return min_swaps",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to list out the list of given strings individually using map function.\nTest Example: assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def listify_list(list1):\n    return list(map(list, list1))",
        "gold_label": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ",
        "task_id": 857,
        "test_list": [
            "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]",
            "assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]",
            "assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def listify_list(list1):\n    return list(map(list, list1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count number of lists in a given list of lists and square the count.\nTest Example: assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_list(input_list):\n    count = sum(1 for item in input_list if isinstance(item, list))\n    return count ** 2",
        "gold_label": "def count_list(input_list): \r\n    return (len(input_list))**2",
        "task_id": 858,
        "test_list": [
            "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25",
            "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16",
            "assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_list(input_list):\n    count = sum(1 for item in input_list if isinstance(item, list))\n    return count ** 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to generate all sublists of a given list.\nTest Example: assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sub_lists(my_list):\n    result = [[]]\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list) + 1):\n            result.append(my_list[i:j])\n    return result",
        "gold_label": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs",
        "task_id": 859,
        "test_list": [
            "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]",
            "assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]",
            "assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sub_lists(my_list):\n    result = [[]]\n    for i in range(len(my_list)):\n        for j in range(i + 1, len(my_list) + 1):\n            result.append(my_list[i:j])\n    return result",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\nTest Example: assert check_alphanumeric(\"dawood@\") == 'Discard'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef check_alphanumeric(string):\n    return \"Accept\" if re.search(r'[a-zA-Z0-9]$', string) else \"Discard\"",
        "gold_label": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ",
        "task_id": 860,
        "test_list": [
            "assert check_alphanumeric(\"dawood@\") == 'Discard'",
            "assert check_alphanumeric(\"skdmsam326\") == 'Accept'",
            "assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef check_alphanumeric(string):\n    return \"Accept\" if re.search(r'[a-zA-Z0-9]$', string) else \"Discard\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find all anagrams of a string in a given list of strings using lambda function.\nTest Example: assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def anagram_lambda(texts, str):\n    return list(filter(lambda x: sorted(x) == sorted(str), texts))",
        "gold_label": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result",
        "task_id": 861,
        "test_list": [
            "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']",
            "assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]",
            "assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def anagram_lambda(texts, str):\n    return list(filter(lambda x: sorted(x) == sorted(str), texts))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the occurrences of n most common words in a given text.\nTest Example: assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words).most_common(n)",
        "gold_label": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)",
        "task_id": 862,
        "test_list": [
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]",
            "assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "from collections import Counter\nimport re\n\ndef n_common_words(text, n):\n    words = re.findall(r'\\w+', text.lower())\n    return Counter(words).most_common(n)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\nTest Example: assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
        "gold_label": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ",
        "task_id": 863,
        "test_list": [
            "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3",
            "assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4",
            "assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_longest_conseq_subseq(arr, n):\n    if not arr:\n        return 0\n    \n    num_set = set(arr)\n    max_length = 0\n    \n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_length = 1\n            \n            while current_num + 1 in num_set:\n                current_num += 1\n                current_length += 1\n            \n            max_length = max(max_length, current_length)\n    \n    return max_length",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find palindromes in a given list of strings using lambda function.\nTest Example: assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def palindrome_lambda(texts):\n    return list(filter(lambda x: x == x[::-1], texts))",
        "gold_label": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result",
        "task_id": 864,
        "test_list": [
            "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']",
            "assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']",
            "assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def palindrome_lambda(texts):\n    return list(filter(lambda x: x == x[::-1], texts))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to print n-times a list using map function.\nTest Example: assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def ntimes_list(nums, n):\n    return list(map(lambda x: n * x, nums))",
        "gold_label": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)",
        "task_id": 865,
        "test_list": [
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]",
            "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def ntimes_list(nums, n):\n    return list(map(lambda x: n * x, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given month name contains 31 days or not.\nTest Example: assert check_monthnumb(\"February\")==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_monthnumb(month):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months_with_31_days",
        "gold_label": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False",
        "task_id": 866,
        "test_list": [
            "assert check_monthnumb(\"February\")==False",
            "assert check_monthnumb(\"January\")==True",
            "assert check_monthnumb(\"March\")==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_monthnumb(month):\n    months_with_31_days = [\"January\", \"March\", \"May\", \"July\", \"August\", \"October\", \"December\"]\n    return month in months_with_31_days",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to add a minimum number such that the sum of array becomes even.\nTest Example: assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "gold_label": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2",
        "task_id": 867,
        "test_list": [
            "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1",
            "assert min_Num([1,2,3,4,5,6,7,8],8) == 2",
            "assert min_Num([1,2,3],3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_Num(arr, n):\n    total_sum = sum(arr)\n    return 1 if total_sum % 2 != 0 else 2",
        "answer_old": "def min_Num(arr, n):\n    sum_arr = sum(arr)\n    return 1 if sum_arr % 2 != 0 else 0",
        "answer": "def min_Num(arr, n):\n    total_sum = sum(arr)\n    return 1 if total_sum % 2 != 0 else 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the length of the last word in a given string.\nTest Example: assert length_Of_Last_Word(\"python language\") == 8\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def length_Of_Last_Word(s):\n    return len(s.strip().split()[-1])",
        "gold_label": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ",
        "task_id": 868,
        "test_list": [
            "assert length_Of_Last_Word(\"python language\") == 8",
            "assert length_Of_Last_Word(\"PHP\") == 3",
            "assert length_Of_Last_Word(\"\") == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def length_Of_Last_Word(s):\n    return len(s.strip().split()[-1])",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove sublists from a given list of lists, which are outside a given range.\nTest Example: assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_list_range(list1, leftrange, rightrange):\n    return [sublist for sublist in list1 if leftrange <= min(sublist) <= max(sublist) <= rightrange]",
        "gold_label": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result",
        "task_id": 869,
        "test_list": [
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]",
            "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_list_range(list1, leftrange, rightrange):\n    return [sublist for sublist in list1 if leftrange <= min(sublist) <= max(sublist) <= rightrange]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\nTest Example: assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))",
        "gold_label": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)",
        "task_id": 870,
        "test_list": [
            "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48",
            "assert sum_positivenum([10,15,-14,13,-18,12,-20])==50",
            "assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_positivenum(nums):\n    return sum(filter(lambda x: x > 0, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given strings are rotations of each other or not.\nTest Example: assert are_Rotations(\"abc\",\"cba\") == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def are_Rotations(string1, string2):\n    if len(string1) != len(string2):\n        return False\n    return string2 in string1 * 2",
        "gold_label": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False",
        "task_id": 871,
        "test_list": [
            "assert are_Rotations(\"abc\",\"cba\") == False",
            "assert are_Rotations(\"abcd\",\"cdba\") == False",
            "assert are_Rotations(\"abacd\",\"cdaba\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def are_Rotations(string1, string2):\n    if len(string1) != len(string2):\n        return False\n    return string2 in string1 * 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if a nested list is a subset of another nested list.\nTest Example: assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_subset(list1, list2):\n    return all(sublist in list1 for sublist in list2)",
        "gold_label": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ",
        "task_id": 872,
        "test_list": [
            "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True",
            "assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True",
            "assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_subset(list1, list2):\n    return all(sublist in list1 for sublist in list2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to solve the fibonacci sequence using recursion.\nTest Example: assert fibonacci(7) == 13\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "gold_label": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))",
        "task_id": 873,
        "test_list": [
            "assert fibonacci(7) == 13",
            "assert fibonacci(8) == 21",
            "assert fibonacci(9) == 34"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check if the string is a concatenation of another string.\nTest Example: assert check_Concat(\"abcabcabc\",\"abc\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_Concat(str1, str2):\n    if not str1 or not str2:\n        return False\n    if len(str1) % len(str2) != 0:\n        return False\n    return str1 == str2 * (len(str1) // len(str2))",
        "gold_label": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True",
        "task_id": 874,
        "test_list": [
            "assert check_Concat(\"abcabcabc\",\"abc\") == True",
            "assert check_Concat(\"abcab\",\"abc\") == False",
            "assert check_Concat(\"aba\",\"ab\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_Concat(str1, str2):\n    if not str1 or not str2:\n        return False\n    if len(str1) % len(str2) != 0:\n        return False\n    return str1 == str2 * (len(str1) // len(str2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the minimum difference in the tuple pairs of given tuples.\nTest Example: assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_difference(tuple_pairs):\n    return min(abs(b - a) for a, b in tuple_pairs)",
        "gold_label": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ",
        "task_id": 875,
        "test_list": [
            "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1",
            "assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2",
            "assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_difference(tuple_pairs):\n    return min(abs(b - a) for a, b in tuple_pairs)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find lcm of two positive integers.\nTest Example: assert lcm(4,6) == 12\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lcm(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return (x * y) // gcd(x, y)",
        "gold_label": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm",
        "task_id": 876,
        "test_list": [
            "assert lcm(4,6) == 12",
            "assert lcm(15,17) == 255",
            "assert lcm(2,6) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lcm(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    return (x * y) // gcd(x, y)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to sort the given string.\nTest Example: assert sort_String(\"cba\") == \"abc\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_String(s):\n    return ''.join(sorted(s))",
        "gold_label": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ",
        "task_id": 877,
        "test_list": [
            "assert sort_String(\"cba\") == \"abc\"",
            "assert sort_String(\"data\") == \"aadt\"",
            "assert sort_String(\"zxy\") == \"xyz\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_String(s):\n    return ''.join(sorted(s))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the given tuple contains only k elements.\nTest Example: assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_tuples(test_tuple, K):\n    return all(element in K for element in test_tuple)",
        "gold_label": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ",
        "task_id": 878,
        "test_list": [
            "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True",
            "assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True",
            "assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_tuples(test_tuple, K):\n    return all(element in K for element in test_tuple)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\nTest Example: assert text_match(\"aabbbbd\") == 'Not matched!'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
        "task_id": 879,
        "test_list": [
            "assert text_match(\"aabbbbd\") == 'Not matched!'",
            "assert text_match(\"aabAbbbc\") == 'Not matched!'",
            "assert text_match(\"accddbbjjjb\") == 'Found a match!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find number of solutions in quadratic equation.\nTest Example: assert Check_Solution(2,5,2) == \"2 solutions\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
        "gold_label": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ",
        "task_id": 880,
        "test_list": [
            "assert Check_Solution(2,5,2) == \"2 solutions\"",
            "assert Check_Solution(1,1,1) == \"No solutions\"",
            "assert Check_Solution(1,2,1) == \"1 solution\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Check_Solution(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"2 solutions\"\n    elif discriminant == 0:\n        return \"1 solution\"\n    else:\n        return \"No solutions\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the sum of first even and odd number of a given list.\nTest Example: assert sum_even_odd([1,3,5,7,4,1,6,8])==5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_even_odd(list1):\n    first_even = next((num for num in list1 if num % 2 == 0), 0)\n    first_odd = next((num for num in list1 if num % 2 != 0), 0)\n    return first_even + first_odd",
        "gold_label": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)",
        "task_id": 881,
        "test_list": [
            "assert sum_even_odd([1,3,5,7,4,1,6,8])==5",
            "assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3",
            "assert sum_even_odd([1,5,7,9,10])==11"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_even_odd(list1):\n    first_even = next((num for num in list1 if num % 2 == 0), 0)\n    first_odd = next((num for num in list1 if num % 2 != 0), 0)\n    return first_even + first_odd",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to caluclate perimeter of a parallelogram.\nTest Example: assert parallelogram_perimeter(10,20)==400\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def parallelogram_perimeter(a, b):\n    perimeter = 2 * (a + b)\n    return perimeter",
        "gold_label": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter",
        "task_id": 882,
        "test_list": [
            "assert parallelogram_perimeter(10,20)==400",
            "assert parallelogram_perimeter(15,20)==600",
            "assert parallelogram_perimeter(8,9)==144"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def parallelogram_perimeter(a, b):\n    perimeter = 2 * (a + b)\n    return perimeter",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\nTest Example: assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))",
        "gold_label": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result",
        "task_id": 883,
        "test_list": [
            "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]",
            "assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]",
            "assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def div_of_nums(nums, m, n):\n    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether all the bits are within a given range or not.\nTest Example: assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == mask",
        "gold_label": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False",
        "task_id": 884,
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True ",
            "assert all_Bits_Set_In_The_Given_Range(5,2,4) == False",
            "assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << (l - 1)\n    return (n & mask) == mask",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the two given strings are isomorphic to each other or not.\nTest Example: assert is_Isomorphic(\"paper\",\"title\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Isomorphic(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    \n    char_map1, char_map2 = {}, {}\n    \n    for c1, c2 in zip(str1, str2):\n        if c1 not in char_map1 and c2 not in char_map2:\n            char_map1[c1] = c2\n            char_map2[c2] = c1\n        elif char_map1.get(c1) != c2 or char_map2.get(c2) != c1:\n            return False\n    \n    return True",
        "gold_label": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False",
        "task_id": 885,
        "test_list": [
            "assert is_Isomorphic(\"paper\",\"title\") == True",
            "assert is_Isomorphic(\"ab\",\"ba\") == True",
            "assert is_Isomorphic(\"ab\",\"aa\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Isomorphic(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    \n    char_map1, char_map2 = {}, {}\n    \n    for c1, c2 in zip(str1, str2):\n        if c1 not in char_map1 and c2 not in char_map2:\n            char_map1[c1] = c2\n            char_map2[c2] = c1\n        elif char_map1.get(c1) != c2 or char_map2.get(c2) != c1:\n            return False\n    \n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add all the numbers in a list and divide it with the length of the list.\nTest Example: assert sum_num((8, 2, 3, 0, 7))==4.0\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)",
        "gold_label": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ",
        "task_id": 886,
        "test_list": [
            "assert sum_num((8, 2, 3, 0, 7))==4.0",
            "assert sum_num((-10,-20,-30))==-20.0",
            "assert sum_num((19,15,18))==17.333333333333332"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_num(numbers):\n    return sum(numbers) / len(numbers)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given number is odd or not using bitwise operator.\nTest Example: assert is_odd(5) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_odd(n):\n    return bool(n & 1)",
        "gold_label": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ",
        "task_id": 887,
        "test_list": [
            "assert is_odd(5) == True",
            "assert is_odd(6) == False",
            "assert is_odd(7) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_odd(n):\n    return bool(n & 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to substract the elements of the given nested tuples.\nTest Example: assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def substract_elements(test_tup1, test_tup2):\n    return tuple(\n        tuple(a - b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )",
        "gold_label": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
        "task_id": 888,
        "test_list": [
            "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))",
            "assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def substract_elements(test_tup1, test_tup2):\n    return tuple(\n        tuple(a - b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to reverse each list in a given list of lists.\nTest Example: assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def reverse_list_lists(lists):\n    return [sublist[::-1] for sublist in lists]",
        "gold_label": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ",
        "task_id": 889,
        "test_list": [
            "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]",
            "assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]",
            "assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def reverse_list_lists(lists):\n    return [sublist[::-1] for sublist in lists]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the index of an extra element present in one sorted array.\nTest Example: assert find_Extra([1,2,3,4],[1,2,3],3) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
        "gold_label": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ",
        "task_id": 890,
        "test_list": [
            "assert find_Extra([1,2,3,4],[1,2,3],3) == 3",
            "assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4",
            "assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Extra(arr1, arr2, n):\n    left, right = 0, n\n    while left < right:\n        mid = (left + right) // 2\n        if arr1[mid] == arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given two numbers have same number of digits or not.\nTest Example: assert same_Length(12,1) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def same_Length(A, B):\n    return len(str(abs(A))) == len(str(abs(B)))",
        "gold_label": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ",
        "task_id": 891,
        "test_list": [
            "assert same_Length(12,1) == False",
            "assert same_Length(2,2) == True",
            "assert same_Length(10,20) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def same_Length(A, B):\n    return len(str(abs(A))) == len(str(abs(B)))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove multiple spaces in a string.\nTest Example: assert remove_spaces('python  program')==('python program')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_spaces(text):\n    return ' '.join(text.split())",
        "gold_label": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))",
        "task_id": 892,
        "test_list": [
            "assert remove_spaces('python  program')==('python program')",
            "assert remove_spaces('python   programming    language')==('python programming language')",
            "assert remove_spaces('python                     program')==('python program')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_spaces(text):\n    return ' '.join(text.split())",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to get the last element of each sublist.\nTest Example: assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
        "gold_label": "def Extract(lst): \r\n    return [item[-1] for item in lst] ",
        "task_id": 893,
        "test_list": [
            "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]",
            "assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']",
            "assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Extract(lst):\n    return [sublist[-1] for sublist in lst if sublist]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert the given string of float type into tuple.\nTest Example: assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def float_to_tuple(test_str):\n    return tuple(float(x) for x in test_str.split(', '))",
        "gold_label": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ",
        "task_id": 894,
        "test_list": [
            "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)",
            "assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)",
            "assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def float_to_tuple(test_str):\n    return tuple(float(x) for x in test_str.split(', '))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\nTest Example: assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i], arr[i])\n    \n    return dp[-1]",
        "gold_label": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]",
        "task_id": 895,
        "test_list": [
            "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26",
            "assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28",
            "assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sum_subseq(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i-1], dp[i-2] + arr[i], arr[i])\n    \n    return dp[-1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\nTest Example: assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])",
        "gold_label": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)",
        "task_id": 896,
        "test_list": [
            "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] ",
            "assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] ",
            "assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_list_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the word is present in a given sentence or not.\nTest Example: assert is_Word_Present(\"machine learning\",\"machine\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Word_Present(sentence, word):\n    return word.lower() in sentence.lower().split()",
        "gold_label": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False",
        "task_id": 897,
        "test_list": [
            "assert is_Word_Present(\"machine learning\",\"machine\") == True",
            "assert is_Word_Present(\"easy\",\"fun\") == False",
            "assert is_Word_Present(\"python language\",\"code\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Word_Present(sentence, word):\n    return word.lower() in sentence.lower().split()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract specified number of elements from a given list, which follow each other continuously.\nTest Example: assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def extract_elements(numbers, n):\n    result = []\n    count = 1\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            count += 1\n        else:\n            if count == n:\n                result.append(numbers[i])\n            count = 1\n    if count == n:\n        result.append(numbers[-1])\n    return result",
        "gold_label": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result",
        "task_id": 898,
        "test_list": [
            "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]",
            "assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]",
            "assert extract_elements([0,0,0,0,0],5)==[0]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def extract_elements(numbers, n):\n    result = []\n    count = 1\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            count += 1\n        else:\n            if count == n:\n                result.append(numbers[i])\n            count = 1\n    if count == n:\n        result.append(numbers[-1])\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether an array can be sorted or not by picking only the corner elements.\nTest Example: assert check([3,2,1,2,3,4],6) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check(arr, n):\n    left, right = 0, n - 1\n    prev = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] < prev:\n                return False\n            prev = arr[left]\n            left += 1\n        else:\n            if arr[right] < prev:\n                return False\n            prev = arr[right]\n            right -= 1\n    \n    return True",
        "gold_label": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True",
        "task_id": 899,
        "test_list": [
            "assert check([3,2,1,2,3,4],6) == True",
            "assert check([2,1,4,5,1],5) == True",
            "assert check([1,2,2,1,2,3],6) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check(arr, n):\n    left = 0\n    right = n - 1\n    prev = float('-inf')\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            if arr[left] < prev:\n                return False\n            prev = arr[left]\n            left += 1\n        else:\n            if arr[right] < prev:\n                return False\n            prev = arr[right]\n            right -= 1\n    \n    return True",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function where a string will start with a specific number.\nTest Example: assert match_num('5-2345861')==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def match_num(string):\n    return string.startswith('5')",
        "gold_label": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False",
        "task_id": 900,
        "test_list": [
            "assert match_num('5-2345861')==True",
            "assert match_num('6-2345861')==False",
            "assert match_num('78910')==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def match_num(string):\n    return string.startswith('5')",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the smallest multiple of the first n numbers.\nTest Example: assert smallest_multiple(13)==360360\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result",
        "gold_label": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i",
        "task_id": 901,
        "test_list": [
            "assert smallest_multiple(13)==360360",
            "assert smallest_multiple(2)==2",
            "assert smallest_multiple(1)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    result = 1\n    for i in range(1, n + 1):\n        result = lcm(result, i)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to combine two dictionaries by adding values for common keys.\nTest Example: assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def add_dict(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        result[key] = result.get(key, 0) + value\n    return result",
        "gold_label": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict",
        "task_id": 902,
        "test_list": [
            "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) ",
            "assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) ",
            "assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def add_dict(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        result[key] = result.get(key, 0) + value\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the total unset bits from 1 to n.\nTest Example: assert count_Unset_Bits(2) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Unset_Bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('0')\n    return count",
        "gold_label": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ",
        "task_id": 903,
        "test_list": [
            "assert count_Unset_Bits(2) == 1",
            "assert count_Unset_Bits(5) == 4",
            "assert count_Unset_Bits(14) == 17"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Unset_Bits(n):\n    total_bits = n.bit_length() * n\n    set_bits = bin(n).count('1')\n    for i in range(1, n):\n        set_bits += bin(i).count('1')\n    return total_bits - set_bits",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to return true if the given number is even else return false.\nTest Example: assert even_num(13.5)==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def even_num(x):\n    return int(x) % 2 == 0",
        "gold_label": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False",
        "task_id": 904,
        "test_list": [
            "assert even_num(13.5)==False",
            "assert even_num(0)==True",
            "assert even_num(-9)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def even_num(x):\n    return int(x) % 2 == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of squares of binomial co-efficients.\nTest Example: assert sum_of_square(4) == 70\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_of_square(n):\n    result = 0\n    for k in range(n + 1):\n        coef = 1\n        for i in range(k + 1, n + 1):\n            coef = coef * i // (i - k)\n        result += coef ** 2\n    return result",
        "gold_label": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",
        "task_id": 905,
        "test_list": [
            "assert sum_of_square(4) == 70",
            "assert sum_of_square(5) == 252",
            "assert sum_of_square(2) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_of_square(n):\n    result = 0\n    for k in range(n + 1):\n        coef = 1\n        for i in range(k + 1, n + 1):\n            coef = coef * i // (i - k)\n        result += coef ** 2\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract year, month and date from a url by using regex.\nTest Example: assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return [(year, month.zfill(2), day.zfill(2)) for year, month, day in matches]",
        "gold_label": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)",
        "task_id": 906,
        "test_list": [
            "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]",
            "assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]",
            "assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef extract_date(url):\n    pattern = r'/(\\d{4})/(\\d{2})/(\\d{2})/'\n    matches = re.findall(pattern, url)\n    return [(year, month.zfill(2), day.zfill(2)) for year, month, day in matches]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to print the first n lucky numbers.\nTest Example: assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lucky_num(n):\n    lucky = [1]\n    next_num = 3\n    \n    while len(lucky) < n:\n        if all(next_num % lucky[i] != 0 for i in range(1, len(lucky))):\n            lucky.append(next_num)\n        next_num += 2\n    \n    return lucky",
        "gold_label": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]",
        "task_id": 907,
        "test_list": [
            "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] ",
            "assert lucky_num(5)==[1, 3, 7, 9, 13]",
            "assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lucky_num(n):\n    lucky = [1]\n    next_num = 3\n    \n    while len(lucky) < n:\n        if all(next_num % lucky[i] != 0 for i in range(1, len(lucky))):\n            lucky.append(next_num)\n        next_num += 2\n    \n    return lucky",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the fixed point in the given array.\nTest Example: assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_fixed_point(arr, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] < mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "gold_label": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1",
        "task_id": 908,
        "test_list": [
            "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3",
            "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1",
            "assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_fixed_point(arr, n):\n    left, right = 0, n - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] < mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the previous palindrome of a specified number.\nTest Example: assert previous_palindrome(99)==88\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def previous_palindrome(num):\n    num -= 1\n    while str(num) != str(num)[::-1]:\n        num -= 1\n    return num",
        "gold_label": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x",
        "task_id": 909,
        "test_list": [
            "assert previous_palindrome(99)==88",
            "assert previous_palindrome(1221)==1111",
            "assert previous_palindrome(120)==111"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def previous_palindrome(num):\n    num -= 1\n    while str(num) != str(num)[::-1]:\n        num -= 1\n    return num",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to validate a gregorian date.\nTest Example: assert check_date(11,11,2002)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_date(m, d, y):\n    if not all(isinstance(x, int) for x in (m, d, y)):\n        return False\n    if m < 1 or m > 12:\n        return False\n    if y < 1:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n        days_in_month[1] = 29\n    if d < 1 or d > days_in_month[m - 1]:\n        return False\n    return True",
        "gold_label": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False",
        "task_id": 910,
        "test_list": [
            "assert check_date(11,11,2002)==True",
            "assert check_date(13,11,2002)==False",
            "assert check_date('11','11','2002')==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_date(m, d, y):\n    if not all(isinstance(x, int) for x in (m, d, y)):\n        return False\n    if m < 1 or m > 12:\n        return False\n    if y < 1:\n        return False\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if y % 4 == 0 and (y % 100 != 0 or y % 400 == 0):\n        days_in_month[1] = 29\n    if d < 1 or d > days_in_month[m - 1]:\n        return False\n    return True",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\nTest Example: assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def maximum_product(nums):\n    import heapq\n    \n    largest = heapq.nlargest(3, nums)\n    smallest = heapq.nsmallest(2, nums)\n    \n    return max(largest[0] * largest[1] * largest[2], \n               largest[0] * smallest[0] * smallest[1])",
        "gold_label": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",
        "task_id": 911,
        "test_list": [
            "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700",
            "assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375",
            "assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def maximum_product(nums):\n    import heapq\n    \n    largest = heapq.nlargest(3, nums)\n    smallest = heapq.nsmallest(2, nums)\n    \n    return max(largest[0] * largest[1] * largest[2], \n               largest[0] * smallest[0] * smallest[1])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find ln, m lobb number.\nTest Example: assert int(lobb_num(5, 3)) == 35\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lobb_num(n, m):\n    numerator = 2 * m + 1\n    for i in range(2 * n, 2 * n - m - n, -1):\n        numerator *= i\n    denominator = m + n + 1\n    for i in range(1, m + n + 1):\n        denominator *= i\n    return numerator // denominator",
        "gold_label": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))",
        "task_id": 912,
        "test_list": [
            "assert int(lobb_num(5, 3)) == 35",
            "assert int(lobb_num(3, 2)) == 5",
            "assert int(lobb_num(4, 2)) == 20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lobb_num(n, m):\n    numerator = 2 * m + 1\n    for i in range(2 * n, 2 * n - m - n, -1):\n        numerator *= i\n    denominator = m + n + 1\n    for i in range(1, m + n + 1):\n        denominator *= i\n    return numerator // denominator",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check for a number at the end of a string.\nTest Example: assert end_num('abcdef')==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def end_num(string):\n    return string[-1].isdigit()",
        "gold_label": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False",
        "task_id": 913,
        "test_list": [
            "assert end_num('abcdef')==False",
            "assert end_num('abcdef7')==True",
            "assert end_num('abc')==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def end_num(string):\n    return string[-1].isdigit()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given string is made up of two alternating characters or not.\nTest Example: assert is_Two_Alter(\"abab\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    char1, char2 = s[0], s[1]\n    if char1 == char2:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != char1:\n            return False\n        if i % 2 == 1 and s[i] != char2:\n            return False\n    return True",
        "gold_label": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True",
        "task_id": 914,
        "test_list": [
            "assert is_Two_Alter(\"abab\") == True",
            "assert is_Two_Alter(\"aaaa\") == False",
            "assert is_Two_Alter(\"xyz\") == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Two_Alter(s):\n    if len(s) < 2:\n        return False\n    char1, char2 = s[0], s[1]\n    if char1 == char2:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != char1:\n            return False\n        if i % 2 == 1 and s[i] != char2:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to rearrange positive and negative numbers in a given array using lambda function.\nTest Example: assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def rearrange_numbs(array_nums):\n    return sorted(array_nums, key=lambda x: (x < 0, x))",
        "gold_label": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ",
        "task_id": 915,
        "test_list": [
            "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]",
            "assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]",
            "assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def rearrange_numbs(array_nums):\n    return sorted(array_nums, key=lambda x: (x < 0, x))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find if there is a triplet in the array whose sum is equal to a given value.\nTest Example: assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_triplet_array(A, arr_size, sum):\n    A.sort()\n    for i in range(arr_size - 2):\n        left = i + 1\n        right = arr_size - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                return (A[i], A[left], A[right])\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "gold_label": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False",
        "task_id": 916,
        "test_list": [
            "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)",
            "assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)",
            "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_triplet_array(A, arr_size, sum):\n    A.sort()\n    for i in range(arr_size - 2):\n        left = i + 1\n        right = arr_size - 1\n        while left < right:\n            current_sum = A[i] + A[left] + A[right]\n            if current_sum == sum:\n                return (A[i], A[left], A[right])\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the sequences of one upper case letter followed by lower case letters.\nTest Example: assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_uppercase_lowercase(text):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')",
        "task_id": 917,
        "test_list": [
            "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')",
            "assert text_uppercase_lowercase(\"aA\")==('Not matched!')",
            "assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_uppercase_lowercase(text):\n    pattern = r'[A-Z][a-z]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count coin change.\nTest Example: assert coin_change([1, 2, 3],3,4)==4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def coin_change(coins, m, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    \n    return dp[amount]",
        "gold_label": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ",
        "task_id": 918,
        "test_list": [
            "assert coin_change([1, 2, 3],3,4)==4",
            "assert coin_change([4,5,6,7,8,9],6,9)==2",
            "assert coin_change([4,5,6,7,8,9],6,4)==1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def coin_change(coins, m, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    \n    return dp[amount]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to multiply all items in the list.\nTest Example: assert multiply_list([1,-2,3]) == -6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def multiply_list(items):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, items, 1)",
        "gold_label": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot",
        "task_id": 919,
        "test_list": [
            "assert multiply_list([1,-2,3]) == -6",
            "assert multiply_list([1,2,3,4]) == 24",
            "assert multiply_list([3,1,2,3]) == 18"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def multiply_list(items):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, items, 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove all tuples with all none values in the given tuple list.\nTest Example: assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_tuple(test_list):\n    result = [t for t in test_list if any(x is not None for x in t)]\n    return str(result)",
        "gold_label": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ",
        "task_id": 920,
        "test_list": [
            "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'",
            "assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'",
            "assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_tuple(test_list):\n    result = [t for t in test_list if any(x is not None for x in t)]\n    return str(result)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to perform chunking of tuples each of size n.\nTest Example: assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def chunk_tuples(tup, n):\n    return list(zip(*[iter(tup)]*n))",
        "gold_label": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ",
        "task_id": 921,
        "test_list": [
            "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]",
            "assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]",
            "assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def chunk_tuples(tup, n):\n    return list(zip(*[iter(tup)]*n))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find a pair with the highest product from a given array of integers.\nTest Example: assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_pair = max((arr[i], arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)), key=lambda x: x[0] * x[1])\n    return max_pair",
        "gold_label": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ",
        "task_id": 922,
        "test_list": [
            "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)",
            "assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)",
            "assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_pair = max((arr[i], arr[j]) for i in range(len(arr)) for j in range(i+1, len(arr)), key=lambda pair: pair[0] * pair[1])\n    return max_pair",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\nTest Example: assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def super_seq(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
        "gold_label": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))",
        "task_id": 923,
        "test_list": [
            "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9",
            "assert super_seq(\"feek\", \"eke\", 4, 3) == 5",
            "assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def super_seq(X, Y, m, n):\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n    \n    return dp[m][n]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find maximum of two numbers.\nTest Example: assert max_of_two(10,20)==20\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_of_two(x, y):\n    return max(x, y)",
        "gold_label": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y",
        "task_id": 924,
        "test_list": [
            "assert max_of_two(10,20)==20",
            "assert max_of_two(19,15)==19",
            "assert max_of_two(-10,-20)==-10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_of_two(x, y):\n    return max(x, y)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to calculate the product of all the numbers of a given tuple.\nTest Example: assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def mutiple_tuple(nums):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, nums)",
        "gold_label": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product",
        "task_id": 925,
        "test_list": [
            "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864",
            "assert mutiple_tuple((1,2,3)) == 6",
            "assert mutiple_tuple((-2,-4,-6)) == -48"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def mutiple_tuple(nums):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, nums)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find n-th rencontres number.\nTest Example: assert rencontres_number(7, 2) == 924\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef derangement(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef rencontres_number(n, m):\n    return binomial_coefficient(n, m) * derangement(n - m)",
        "gold_label": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",
        "task_id": 926,
        "test_list": [
            "assert rencontres_number(7, 2) == 924",
            "assert rencontres_number(3, 0) == 2",
            "assert rencontres_number(3, 1) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef derangement(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))\n\ndef rencontres_number(n, m):\n    return binomial_coefficient(n, m) * derangement(n - m)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the height of the given binary tree.\nTest Example: assert (max_height(root)) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if not root:\n        return 0\n    return 1 + max(max_height(root.left), max_height(root.right))",
        "gold_label": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1",
        "task_id": 927,
        "test_list": [
            "assert (max_height(root)) == 3",
            "assert (max_height(root1)) == 5 ",
            "assert (max_height(root2)) == 4"
        ],
        "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot1 = Node(1);  \r\nroot1.left = Node(2);  \r\nroot1.right = Node(3);  \r\nroot1.left.left = Node(4);  \r\nroot1.right.left = Node(5);  \r\nroot1.right.right = Node(6);  \r\nroot1.right.right.right= Node(7);  \r\nroot1.right.right.right.right = Node(8)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(6)\r\nroot2.left.left.right = Node(7)",
        "challenge_test_list": [],
        "prediction": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef max_height(root):\n    if not root:\n        return 0\n    return 1 + max(max_height(root.left), max_height(root.right))",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nTest Example: assert change_date_format('2026-01-02')=='02-01-2026'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def change_date_format(dt):\n    year, month, day = dt.split('-')\n    return f\"{day.zfill(2)}-{month.zfill(2)}-{year}\"",
        "gold_label": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)",
        "task_id": 928,
        "test_list": [
            "assert change_date_format('2026-01-02')=='02-01-2026'",
            "assert change_date_format('2021-01-04')=='04-01-2021'",
            "assert change_date_format('2030-06-06')=='06-06-2030'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def change_date_format(dt):\n    year, month, day = dt.split('-')\n    return f\"{day.zfill(2)}-{month.zfill(2)}-{year}\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count repeated items of a tuple.\nTest Example: assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_tuplex(tuplex, value):\n    return sum(1 for item in tuplex if item == value)",
        "gold_label": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count",
        "task_id": 929,
        "test_list": [
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3",
            "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2",
            "assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_tuplex(tuplex, value):\n    return sum(1 for item in tuplex if item == value)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that matches a string that has an a followed by zero or more b's by using regex.\nTest Example: assert text_match(\"msb\") == 'Not matched!'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef text_match(text):\n    pattern = r'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "gold_label": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')",
        "task_id": 930,
        "test_list": [
            "assert text_match(\"msb\") == 'Not matched!'",
            "assert text_match(\"a0c\") == 'Found a match!'",
            "assert text_match(\"abbc\") == 'Found a match!'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef text_match(text):\n    pattern = r'ab*'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\nTest Example: assert sum_series(7)==784\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_series(n):\n    return sum(i**3 for i in range(1, n+1))",
        "gold_label": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total",
        "task_id": 931,
        "test_list": [
            "assert sum_series(7)==784",
            "assert sum_series(5)==225",
            "assert sum_series(15)==14400"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_series(n):\n    return sum(i**3 for i in range(1, n+1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove duplicate words from a given list of strings.\nTest Example: assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l))",
        "gold_label": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp",
        "task_id": 932,
        "test_list": [
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']",
            "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_duplic_list(l):\n    return list(dict.fromkeys(l))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert camel case string to snake case string by using regex.\nTest Example: assert camel_to_snake('GoogleAssistant') == 'google_assistant'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef camel_to_snake(text):\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    return pattern.sub('_', text).lower()",
        "gold_label": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
        "task_id": 933,
        "test_list": [
            "assert camel_to_snake('GoogleAssistant') == 'google_assistant'",
            "assert camel_to_snake('ChromeCast') == 'chrome_cast'",
            "assert camel_to_snake('QuadCore') == 'quad_core'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef camel_to_snake(text):\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    return pattern.sub('_', text).lower()",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the nth delannoy number.\nTest Example: assert dealnnoy_num(3, 4) == 129\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def dealnnoy_num(m, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        dp[i][0] = 1\n    \n    for j in range(n + 1):\n        dp[0][j] = 1\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i][j-1]\n    \n    return dp[m][n]",
        "gold_label": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
        "task_id": 934,
        "test_list": [
            "assert dealnnoy_num(3, 4) == 129",
            "assert dealnnoy_num(3, 3) == 63",
            "assert dealnnoy_num(4, 5) == 681"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def dealnnoy_num(m, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        dp[i][0] = 1\n    \n    for j in range(n + 1):\n        dp[0][j] = 1\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i][j-1]\n    \n    return dp[m][n]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\nTest Example: assert series_sum(6)==91\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def series_sum(n):\n    return sum(i**2 for i in range(1, n+1))",
        "gold_label": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total",
        "task_id": 935,
        "test_list": [
            "assert series_sum(6)==91",
            "assert series_sum(7)==140",
            "assert series_sum(12)==650"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def series_sum(n):\n    return sum(i**2 for i in range(1, n+1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to re-arrange the given tuples based on the given ordered list.\nTest Example: assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def re_arrange_tuples(test_list, ord_list):\n    return [(key, dict(test_list)[key]) for key in ord_list]",
        "gold_label": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ",
        "task_id": 936,
        "test_list": [
            "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]",
            "assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]",
            "assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def re_arrange_tuples(test_list, ord_list):\n    return [(key, dict(test_list)[key]) for key in ord_list]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the most common character in a given string.\nTest Example: assert max_char(\"hello world\")==('l')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_char(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    return max(char_count, key=char_count.get)",
        "gold_label": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char",
        "task_id": 937,
        "test_list": [
            "assert max_char(\"hello world\")==('l')",
            "assert max_char(\"hello \")==('l')",
            "assert max_char(\"python pr\")==('p')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_char(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    return max(char_count, key=char_count.get)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find three closest elements from three sorted arrays.\nTest Example: assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = float('inf')\n    res_i, res_j, res_k = 0, 0, 0\n    i, j, k = 0, 0, 0\n\n    while i < p and j < q and k < r:\n        minimum = min(A[i], B[j], C[k])\n        maximum = max(A[i], B[j], C[k])\n        current_diff = maximum - minimum\n\n        if current_diff < diff:\n            res_i, res_j, res_k = i, j, k\n            diff = current_diff\n\n        if diff == 0:\n            break\n\n        if A[i] == minimum:\n            i += 1\n        elif B[j] == minimum:\n            j += 1\n        else:\n            k += 1\n\n    return A[res_i], B[res_j], C[res_k]",
        "gold_label": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]",
        "task_id": 938,
        "test_list": [
            "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)",
            "assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)",
            "assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import sys\n\ndef find_closet(A, B, C, p, q, r):\n    diff = float('inf')\n    res_i, res_j, res_k = 0, 0, 0\n    i, j, k = 0, 0, 0\n\n    while i < p and j < q and k < r:\n        minimum = min(A[i], B[j], C[k])\n        maximum = max(A[i], B[j], C[k])\n        current_diff = maximum - minimum\n\n        if current_diff < diff:\n            res_i, res_j, res_k = i, j, k\n            diff = current_diff\n\n        if diff == 0:\n            break\n\n        if A[i] == minimum:\n            i += 1\n        elif B[j] == minimum:\n            j += 1\n        else:\n            k += 1\n\n    return A[res_i], B[res_j], C[res_k]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a list of dictionaries using lambda function.\nTest Example: assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True)",
        "gold_label": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models",
        "task_id": 939,
        "test_list": [
            "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]",
            "assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])",
            "assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sorted_models(models):\n    return sorted(models, key=lambda x: x['model'], reverse=True)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort the given array by using heap sort.\nTest Example: assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr",
        "gold_label": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n",
        "task_id": 940,
        "test_list": [
            "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]",
            "assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]",
            "assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the elements in a list until an element is a tuple.\nTest Example: assert count_elim([10,20,30,(10,20),40])==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_elim(lst):\n    for i, item in enumerate(lst):\n        if isinstance(item, tuple):\n            return i\n    return len(lst)",
        "gold_label": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim",
        "task_id": 941,
        "test_list": [
            "assert count_elim([10,20,30,(10,20),40])==3",
            "assert count_elim([10,(20,30),(10,20),40])==1",
            "assert count_elim([(10,(20,30,(10,20),40))])==0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_elim(lst):\n    for i, item in enumerate(lst):\n        if isinstance(item, tuple):\n            return i\n    return len(lst)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if any list element is present in the given list.\nTest Example: assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_element(test_tup, check_list):\n    return any(element in test_tup for element in check_list)",
        "gold_label": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ",
        "task_id": 942,
        "test_list": [
            "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True",
            "assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True",
            "assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_element(test_tup, check_list):\n    return any(element in test_tup for element in check_list)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to combine two given sorted lists using heapq module.\nTest Example: assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
        "gold_label": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists",
        "task_id": 943,
        "test_list": [
            "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
            "assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]",
            "assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef combine_lists(list1, list2):\n    return list(heapq.merge(list1, list2))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to separate and print the numbers and their position of a given string.\nTest Example: assert num_position(\"there are 70 flats in this apartment\")==10\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def num_position(text):\n    for i, char in enumerate(text):\n        if char.isdigit():\n            return i\n    return -1",
        "gold_label": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()",
        "task_id": 944,
        "test_list": [
            "assert num_position(\"there are 70 flats in this apartment\")==10",
            "assert num_position(\"every adult have 32 teeth\")==17",
            "assert num_position(\"isha has 79 chocolates in her bag\")==9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def num_position(text):\n    for i, char in enumerate(text):\n        if char.isdigit():\n            return i\n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert the given tuples into set.\nTest Example: assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def tuple_to_set(t):\n    return set(t)",
        "gold_label": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ",
        "task_id": 945,
        "test_list": [
            "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}",
            "assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}",
            "assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def tuple_to_set(t):\n    return set(t)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the most common elements and their counts of a specified text.\nTest Example: assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "from collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text).most_common(n)",
        "gold_label": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem",
        "task_id": 946,
        "test_list": [
            "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] ",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]",
            "assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "from collections import Counter\n\ndef most_common_elem(text, n):\n    return Counter(text).most_common(n)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the length of the shortest word.\nTest Example: assert len_log([\"win\",\"lose\",\"great\"]) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def len_log(words):\n    return min(len(word) for word in words)",
        "gold_label": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min",
        "task_id": 947,
        "test_list": [
            "assert len_log([\"win\",\"lose\",\"great\"]) == 3",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 1",
            "assert len_log([\"12\",\"12\",\"1234\"]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def len_log(words):\n    return min(len(word) for word in words)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get an item of a tuple.\nTest Example: assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_item(tup1, index):\n    return tup1[index]",
        "gold_label": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item",
        "task_id": 948,
        "test_list": [
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')",
            "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_item(tup1, index):\n    return tup1[index]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort the given tuple list basis the total digits in tuple.\nTest Example: assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_digits(tup):\n    return sum(len(str(num)) for num in tup)\n\ndef sort_list(test_list):\n    return str(sorted(test_list, key=count_digits))",
        "gold_label": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))",
        "task_id": 949,
        "test_list": [
            "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'",
            "assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'",
            "assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_digits(tup):\n    return sum(len(str(num)) for num in tup)\n\ndef sort_list(test_list):\n    return str(sorted(test_list, key=count_digits))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to display sign of the chinese zodiac for given year.\nTest Example: assert chinese_zodiac(1997)==('Ox')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def chinese_zodiac(year):\n    zodiac_signs = [\n        'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake',\n        'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig'\n    ]\n    return zodiac_signs[(year - 2000) % 12]",
        "gold_label": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign",
        "task_id": 950,
        "test_list": [
            "assert chinese_zodiac(1997)==('Ox')",
            "assert chinese_zodiac(1998)==('Tiger')",
            "assert chinese_zodiac(1994)==('Dog')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def chinese_zodiac(year):\n    zodiac_signs = [\n        'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake',\n        'Horse', 'Goat', 'Monkey', 'Rooster', 'Dog', 'Pig'\n    ]\n    return zodiac_signs[(year - 2000) % 12]",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum of similar indices in two lists of tuples.\nTest Example: assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_similar_indices(test_list1, test_list2):\n    return [(max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_list1, test_list2)]",
        "gold_label": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ",
        "task_id": 951,
        "test_list": [
            "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]",
            "assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]",
            "assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_similar_indices(test_list1, test_list2):\n    return [(max(a, b), max(c, d)) for (a, c), (b, d) in zip(test_list1, test_list2)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to compute the value of ncr mod p.\nTest Example: assert nCr_mod_p(10, 2, 13) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    C = [0] * (r + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j-1]) % p\n    return C[r]",
        "gold_label": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ",
        "task_id": 952,
        "test_list": [
            "assert nCr_mod_p(10, 2, 13) == 6",
            "assert nCr_mod_p(11, 3, 14) == 11",
            "assert nCr_mod_p(18, 14, 19) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    C = [0] * (r + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, r), 0, -1):\n            C[j] = (C[j] + C[j-1]) % p\n    return C[r]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the minimun number of subsets with distinct elements.\nTest Example: assert subset([1, 2, 3, 4],4) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def subset(ar, n):\n    unique_elements = set(ar)\n    return max(ar.count(element) for element in unique_elements)",
        "gold_label": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ",
        "task_id": 953,
        "test_list": [
            "assert subset([1, 2, 3, 4],4) == 1",
            "assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2",
            "assert subset([1, 2, 3 ],3) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def subset(ar, n):\n    unique_elements = set(ar)\n    return max(ar.count(element) for element in unique_elements)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function that gives profit amount if the given amount has profit else return none.\nTest Example: assert profit_amount(1500,1200)==300\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def profit_amount(sale_amount, actual_cost):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return None",
        "gold_label": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None",
        "task_id": 954,
        "test_list": [
            "assert profit_amount(1500,1200)==300",
            "assert profit_amount(100,200)==None",
            "assert profit_amount(2000,5000)==None"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def profit_amount(sale_amount, actual_cost):\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    return None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find out, if the given number is abundant.\nTest Example: assert is_abundant(12)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_abundant(n):\n    if n <= 0:\n        return False\n    divisor_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisor_sum > n",
        "gold_label": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n",
        "task_id": 955,
        "test_list": [
            "assert is_abundant(12)==True",
            "assert is_abundant(13)==False",
            "assert is_abundant(9)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_abundant(n):\n    if n <= 0:\n        return False\n    divisor_sum = sum(i for i in range(1, n) if n % i == 0)\n    return divisor_sum > n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to split the given string at uppercase letters by using regex.\nTest Example: assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef split_list(text):\n    return re.findall('[A-Z][a-z]*', text)",
        "gold_label": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))",
        "task_id": 956,
        "test_list": [
            "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']",
            "assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']",
            "assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef split_list(text):\n    return re.findall('[A-Z][a-z]*', text)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to get the position of rightmost set bit.\nTest Example: assert get_First_Set_Bit_Pos(12) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n % 2 == 0:\n        n >>= 1\n        position += 1\n    return position",
        "gold_label": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1",
        "task_id": 957,
        "test_list": [
            "assert get_First_Set_Bit_Pos(12) == 3",
            "assert get_First_Set_Bit_Pos(18) == 2",
            "assert get_First_Set_Bit_Pos(16) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_First_Set_Bit_Pos(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n % 2 == 0:\n        n >>= 1\n        position += 1\n    return position",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert an integer into a roman numeral.\nTest Example: assert int_to_roman(1)==(\"I\")\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def int_to_roman(num):\n    roman_symbols = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)\n    ]\n    \n    result = ''\n    for symbol, value in roman_symbols:\n        while num >= value:\n            result += symbol\n            num -= value\n    \n    return result",
        "gold_label": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num",
        "task_id": 958,
        "test_list": [
            "assert int_to_roman(1)==(\"I\")",
            "assert int_to_roman(50)==(\"L\")",
            "assert int_to_roman(4)==(\"IV\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def int_to_roman(num):\n    roman_symbols = [\n        ('M', 1000), ('CM', 900), ('D', 500), ('CD', 400),\n        ('C', 100), ('XC', 90), ('L', 50), ('XL', 40),\n        ('X', 10), ('IX', 9), ('V', 5), ('IV', 4), ('I', 1)\n    ]\n    \n    result = ''\n    for symbol, value in roman_symbols:\n        while num >= value:\n            result += symbol\n            num -= value\n    \n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the average of a list.\nTest Example: assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
        "gold_label": "def Average(lst): \r\n    return sum(lst) / len(lst) ",
        "task_id": 959,
        "test_list": [
            "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75",
            "assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75",
            "assert Average([1,2,3]) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Average(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to solve tiling problem.\nTest Example: assert get_noOfways(4)==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_noOfways(n):\n    if n <= 1:\n        return n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]",
        "gold_label": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);",
        "task_id": 960,
        "test_list": [
            "assert get_noOfways(4)==3",
            "assert get_noOfways(3)==2",
            "assert get_noOfways(5)==5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_noOfways(n):\n    if n <= 1:\n        return n\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 2\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    \n    return dp[n]",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert a roman numeral to an integer.\nTest Example: assert roman_to_int('MMMCMLXXXVI')==3986\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = roman_values[char]\n        if current_value >= prev_value:\n            total += current_value\n        else:\n            total -= current_value\n        prev_value = current_value\n    \n    return total",
        "gold_label": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val",
        "task_id": 961,
        "test_list": [
            "assert roman_to_int('MMMCMLXXXVI')==3986",
            "assert roman_to_int('MMMM')==4000",
            "assert roman_to_int('C')==100"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def roman_to_int(s):\n    roman_values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    \n    for char in reversed(s):\n        current_value = roman_values[char]\n        if current_value >= prev_value:\n            total += current_value\n        else:\n            total -= current_value\n        prev_value = current_value\n    \n    return total",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of all even natural numbers within the range l and r.\nTest Example: assert sum_Even(2,5) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_Even(l, r):\n    def sum_even_numbers(n):\n        return n * (n + 1)\n\n    lower = (l + 1) // 2\n    upper = r // 2\n    return sum_even_numbers(upper) - sum_even_numbers(lower - 1)",
        "gold_label": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",
        "task_id": 962,
        "test_list": [
            "assert sum_Even(2,5) == 6",
            "assert sum_Even(3,8) == 18",
            "assert sum_Even(4,6) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_Even(l, r):\n    def sum_even_numbers(n):\n        return n * (n + 1)\n\n    lower = (l + 1) // 2\n    upper = r // 2\n    return sum_even_numbers(upper) - sum_even_numbers(lower - 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate the discriminant value.\nTest Example: assert discriminant_value(4,8,2)==(\"Two solutions\",32)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
        "gold_label": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)",
        "task_id": 963,
        "test_list": [
            "assert discriminant_value(4,8,2)==(\"Two solutions\",32)",
            "assert discriminant_value(5,7,9)==(\"no real solution\",-131)",
            "assert discriminant_value(0,0,9)==(\"one solution\",0)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (\"Two solutions\", discriminant)\n    elif discriminant == 0:\n        return (\"One solution\", discriminant)\n    else:\n        return (\"No real solutions\", discriminant)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the length of the word is even or not.\nTest Example: assert word_len(\"program\") == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def word_len(word):\n    return len(word) % 2 == 0",
        "gold_label": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False",
        "task_id": 964,
        "test_list": [
            "assert word_len(\"program\") == False",
            "assert word_len(\"solution\") == True",
            "assert word_len(\"data\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def word_len(word):\n    return len(word) % 2 == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert camel case string to snake case string.\nTest Example: assert camel_to_snake('PythonProgram')==('python_program')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def camel_to_snake(text):\n    result = text[0].lower()\n    for char in text[1:]:\n        if char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result",
        "gold_label": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
        "task_id": 965,
        "test_list": [
            "assert camel_to_snake('PythonProgram')==('python_program')",
            "assert camel_to_snake('pythonLanguage')==('python_language')",
            "assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def camel_to_snake(text):\n    result = text[0].lower()\n    for char in text[1:]:\n        if char.isupper():\n            result += '_' + char.lower()\n        else:\n            result += char\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove an empty tuple from a list of tuples.\nTest Example: assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_empty(tuple_list):\n    return [t for t in tuple_list if t != ()]",
        "gold_label": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1",
        "task_id": 966,
        "test_list": [
            "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  ",
            "assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  ",
            "assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_empty(tuple_list):\n    return [t for t in tuple_list if t != ()]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to accept the strings which contains all vowels.\nTest Example: assert check(\"SEEquoiaL\") == 'accepted'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check(string):\n    vowels = set('AEIOUaeiou')\n    unique_vowels = set(char.lower() for char in string if char.lower() in vowels)\n    return 'accepted' if len(unique_vowels) == 5 else 'not accepted'",
        "gold_label": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ",
        "task_id": 967,
        "test_list": [
            "assert check(\"SEEquoiaL\") == 'accepted'",
            "assert check('program') == \"not accepted\"",
            "assert check('fine') == \"not accepted\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check(string):\n    vowels = set('AEIOUaeiou')\n    unique_vowels = set(char.lower() for char in string if char.lower() in vowels)\n    return 'accepted' if len(unique_vowels) == 5 else 'not accepted'",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find maximum possible value for the given periodic function.\nTest Example: assert floor_Max(11,10,9) == 9\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def floor_Max(A, B, N):\n    if B == 0:\n        return 0\n    \n    if A < 0 and B < 0:\n        A, B = -A, -B\n    \n    x = min(B - 1, N)\n    return (A * x) // B",
        "gold_label": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B",
        "task_id": 968,
        "test_list": [
            "assert floor_Max(11,10,9) == 9",
            "assert floor_Max(5,7,4) == 2",
            "assert floor_Max(2,2,1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def floor_Max(A, B, N):\n    if B == 0:\n        return 0\n    \n    if A < 0 and B < 0:\n        A, B = -A, -B\n    \n    x = min(B - 1, N)\n    return (A * x) // B",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to join the tuples if they have similar initial elements.\nTest Example: assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def join_tuples(tuples):\n    result = []\n    for tup in tuples:\n        if result and result[-1][0] == tup[0]:\n            result[-1] += tup[1:]\n        else:\n            result.append(list(tup))\n    return [tuple(group) for group in result]",
        "gold_label": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ",
        "task_id": 969,
        "test_list": [
            "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]",
            "assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]",
            "assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def join_tuples(tuples):\n    result = []\n    for tup in tuples:\n        if result and result[-1][0] == tup[0]:\n            result[-1] += tup[1:]\n        else:\n            result.append(list(tup))\n    return [tuple(group) for group in result]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find minimum of two numbers.\nTest Example: assert min_of_two(10,20)==10\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_of_two(x, y):\n    return min(x, y)",
        "gold_label": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y",
        "task_id": 970,
        "test_list": [
            "assert min_of_two(10,20)==10",
            "assert min_of_two(19,15)==15",
            "assert min_of_two(-10,-20)==-20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_of_two(x, y):\n    return min(x, y)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\nTest Example: assert maximum_segments(7, 5, 2, 5) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def maximum_segments(n, a, b, c):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i >= a:\n            dp[i] = max(dp[i], dp[i - a] + 1)\n        if i >= b:\n            dp[i] = max(dp[i], dp[i - b] + 1)\n        if i >= c:\n            dp[i] = max(dp[i], dp[i - c] + 1)\n    return dp[n]",
        "gold_label": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]",
        "task_id": 971,
        "test_list": [
            "assert maximum_segments(7, 5, 2, 5) == 2",
            "assert maximum_segments(17, 2, 1, 3) == 17",
            "assert maximum_segments(18, 16, 3, 6) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def maximum_segments(n, a, b, c):\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i >= a:\n            dp[i] = max(dp[i], dp[i - a] + 1)\n        if i >= b:\n            dp[i] = max(dp[i], dp[i - b] + 1)\n        if i >= c:\n            dp[i] = max(dp[i], dp[i - c] + 1)\n    return dp[n]",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to concatenate the given two tuples to a nested tuple.\nTest Example: assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
        "gold_label": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ",
        "task_id": 972,
        "test_list": [
            "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)",
            "assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)",
            "assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def concatenate_nested(tuple1, tuple2):\n    return tuple1 + tuple2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to left rotate the string.\nTest Example: assert left_rotate(\"python\",2) == \"thonpy\"   \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def left_rotate(s, d):\n    if not s or d <= 0:\n        return s\n    d = d % len(s)\n    return s[d:] + s[:d]",
        "gold_label": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ",
        "task_id": 973,
        "test_list": [
            "assert left_rotate(\"python\",2) == \"thonpy\"   ",
            "assert left_rotate(\"bigdata\",3 ) == \"databig\" ",
            "assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def left_rotate(s, d):\n    if not s or d <= 0:\n        return s\n    d = d % len(s)\n    return s[d:] + s[:d]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the minimum total path sum in the given triangle.\nTest Example: assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_sum_path(triangle):\n    n = len(triangle)\n    dp = triangle[-1]\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\n    \n    return dp[0]",
        "gold_label": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]",
        "task_id": 974,
        "test_list": [
            "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6",
            "assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 ",
            "assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_sum_path(triangle):\n    n = len(triangle)\n    dp = triangle[-1]\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])\n    \n    return dp[0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find minimum sum of factors of a given number.\nTest Example: assert find_Min_Sum(12) == 7\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Min_Sum(num):\n    if num <= 1:\n        return num\n    \n    factors = []\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n        else:\n            i += 1\n    \n    if num > 1:\n        factors.append(num)\n    \n    return sum(factors)",
        "gold_label": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum",
        "task_id": 511,
        "test_list": [
            "assert find_Min_Sum(12) == 7",
            "assert find_Min_Sum(105) == 15",
            "assert find_Min_Sum(2) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Min_Sum(num):\n    if num <= 1:\n        return num\n    \n    factors = []\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            factors.append(i)\n            num //= i\n        else:\n            i += 1\n    \n    if num > 1:\n        factors.append(num)\n    \n    return sum(factors)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to count the element frequency in the mixed nested tuple.\nTest Example: assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_element_freq(test_tuple):\n    def flatten(tup):\n        for item in tup:\n            if isinstance(item, tuple):\n                yield from flatten(item)\n            else:\n                yield item\n\n    return {item: list(flatten(test_tuple)).count(item) for item in set(flatten(test_tuple))}",
        "gold_label": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) ",
        "task_id": 512,
        "test_list": [
            "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}",
            "assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}",
            "assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_element_freq(test_tuple):\n    def flatten(tup):\n        for item in tup:\n            if isinstance(item, tuple):\n                yield from flatten(item)\n            else:\n                yield item\n\n    return {item: list(flatten(test_tuple)).count(item) for item in set(flatten(test_tuple))}",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert tuple into list by adding the given string after every element.\nTest Example: assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def add_str(test_tup, K):\n    result = []\n    for item in test_tup:\n        result.append(item)\n        result.append(K)\n    return result",
        "gold_label": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ",
        "task_id": 513,
        "test_list": [
            "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']",
            "assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']",
            "assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def add_str(test_tup, K):\n    result = []\n    for item in test_tup:\n        result.append(item)\n        result.append(K)\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the summation of tuple elements in the given tuple list.\nTest Example: assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_elements(test_tup):\n    return sum(test_tup)",
        "gold_label": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ",
        "task_id": 514,
        "test_list": [
            "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42",
            "assert sum_elements((1, 2, 3, 4, 5, 6)) == 21",
            "assert sum_elements((11, 12 ,13 ,45, 14)) == 95"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_elements(test_tup):\n    return sum(test_tup)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if there is a subset with sum divisible by m.\nTest Example: assert modular_sum([3, 1, 7, 5], 4, 6) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    for num in arr:\n        if dp[0]:\n            return True\n        temp = dp.copy()\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        dp = temp\n        dp[num % m] = True\n    \n    return dp[0]",
        "gold_label": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]",
        "task_id": 515,
        "test_list": [
            "assert modular_sum([3, 1, 7, 5], 4, 6) == True",
            "assert modular_sum([1, 7], 2, 5) == False",
            "assert modular_sum([1, 6], 2, 5) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    \n    dp = [False] * m\n    for num in arr:\n        if dp[0]:\n            return True\n        temp = dp.copy()\n        for i in range(m):\n            if dp[i]:\n                temp[(i + num) % m] = True\n        dp = temp\n        dp[num % m] = True\n    \n    return dp[0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort a list of elements using radix sort.\nTest Example: assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(n):\n        arr[i] = output[i]",
        "gold_label": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums",
        "task_id": 516,
        "test_list": [
            "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]",
            "assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]",
            "assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def radix_sort(arr):\n    max_num = max(arr)\n    exp = 1\n    while max_num // exp > 0:\n        counting_sort(arr, exp)\n        exp *= 10\n    return arr\n\ndef counting_sort(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n\n    for i in range(n):\n        arr[i] = output[i]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the largest postive number from the given list.\nTest Example: assert largest_pos([1,2,3,4,-1]) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def largest_pos(list1):\n    return max(x for x in list1 if x > 0)",
        "gold_label": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max",
        "task_id": 517,
        "test_list": [
            "assert largest_pos([1,2,3,4,-1]) == 4",
            "assert largest_pos([0,1,2,-5,-1,6]) == 6",
            "assert largest_pos([0,0,1,0]) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def largest_pos(list1):\n    return max(x for x in list1 if x > 0)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the square root of a perfect number.\nTest Example: assert sqrt_root(4)==2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Cannot calculate square root of a negative number\")\n    if not isinstance(num, int) or not (int(num**0.5)**2 == num):\n        raise ValueError(\"Input must be a perfect square\")\n    return int(num**0.5)",
        "gold_label": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ",
        "task_id": 518,
        "test_list": [
            "assert sqrt_root(4)==2",
            "assert sqrt_root(16)==4",
            "assert sqrt_root(400)==20"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sqrt_root(num):\n    if num < 0:\n        raise ValueError(\"Cannot calculate square root of a negative number\")\n    if not isinstance(num, int) or not (int(num**0.5)**2 == num):\n        raise ValueError(\"Input must be a perfect square\")\n    return int(num**0.5)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to calculate volume of a tetrahedron.\nTest Example: assert volume_tetrahedron(10)==117.85\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef volume_tetrahedron(edge_length):\n    volume = (edge_length ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
        "gold_label": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)",
        "task_id": 519,
        "test_list": [
            "assert volume_tetrahedron(10)==117.85",
            "assert volume_tetrahedron(15)==397.75",
            "assert volume_tetrahedron(20)==942.81"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef volume_tetrahedron(edge_length):\n    volume = (edge_length ** 3) / (6 * math.sqrt(2))\n    return round(volume, 2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the lcm of the given array elements.\nTest Example: assert get_lcm([2, 7, 3, 9, 4]) == 252\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_lcm(arr):\n    from math import lcm\n    return lcm(*arr)",
        "gold_label": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ",
        "task_id": 520,
        "test_list": [
            "assert get_lcm([2, 7, 3, 9, 4]) == 252",
            "assert get_lcm([1, 2, 8, 3]) == 24",
            "assert get_lcm([3, 8, 4, 10, 5]) == 120"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_lcm(arr):\n    from math import lcm\n    return lcm(*arr)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to print check if the triangle is scalene or not.\nTest Example: assert check_isosceles(6,8,12)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_isosceles(x, y, z):\n    return x != y and y != z and z != x",
        "gold_label": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False",
        "task_id": 521,
        "test_list": [
            "assert check_isosceles(6,8,12)==True",
            "assert check_isosceles(6,6,12)==False",
            "assert check_isosceles(6,15,20)==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_isosceles(x, y, z):\n    return x != y and y != z and z != x",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the longest bitonic subsequence for the given array.\nTest Example: assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n\n    return max(lis[i] + lds[i] - 1 for i in range(n))",
        "gold_label": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum",
        "task_id": 522,
        "test_list": [
            "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7",
            "assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6",
            "assert lbs([80, 60, 30, 40, 20, 10]) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def lbs(arr):\n    n = len(arr)\n    lis = [1] * n\n    lds = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n\n    return max(lis[i] + lds[i] - 1 for i in range(n))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\nTest Example: assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_string(s):\n    checks = [\n        lambda x: any(c.isupper() for c in x) or 'String must have 1 upper case character.',\n        lambda x: any(c.islower() for c in x) or 'String must have 1 lower case character.',\n        lambda x: any(c.isdigit() for c in x) or 'String must have 1 number.',\n        lambda x: len(x) >= 8 or 'String length should be atleast 8.'\n    ]\n    return [result for result in map(lambda f: f(s), checks) if isinstance(result, str)] or ['Valid string.']",
        "gold_label": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ",
        "task_id": 523,
        "test_list": [
            "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']",
            "assert check_string('123python')==['String must have 1 upper case character.']",
            "assert check_string('123Python')==['Valid string.']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_string(s):\n    checks = [\n        lambda x: any(c.isupper() for c in x) or 'String must have 1 upper case character.',\n        lambda x: any(c.islower() for c in x) or 'String must have 1 lower case character.',\n        lambda x: any(c.isdigit() for c in x) or 'String must have 1 number.',\n        lambda x: len(x) >= 8 or 'String length should be atleast 8.'\n    ]\n    return [result for result in map(lambda f: f(s), checks) if isinstance(result, str)] or ['Valid string.']",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the sum of maximum increasing subsequence of the given array.\nTest Example: assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sum_increasing_subsequence(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    dp = arr.copy()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    return max(dp)",
        "gold_label": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max",
        "task_id": 524,
        "test_list": [
            "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106",
            "assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22",
            "assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sum_increasing_subsequence(arr, n):\n    if not arr or n == 0:\n        return 0\n    \n    dp = arr.copy()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    return max(dp)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether two given lines are parallel or not.\nTest Example: assert parallel_lines([2,3,4], [2,3,8]) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def parallel_lines(line1, line2):\n    # Check if the slopes are equal\n    if line1[1] == 0 and line2[1] == 0:\n        return True\n    elif line1[1] == 0 or line2[1] == 0:\n        return False\n    else:\n        return abs(line1[0] / line1[1] - line2[0] / line2[1]) < 1e-9",
        "gold_label": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]",
        "task_id": 525,
        "test_list": [
            "assert parallel_lines([2,3,4], [2,3,8]) == True",
            "assert parallel_lines([2,3,4], [4,-3,8]) == False",
            "assert parallel_lines([3,3],[5,5]) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def parallel_lines(line1, line2):\n    # Check if the slopes are equal\n    if line1[1] == 0 and line2[1] == 0:\n        return True\n    elif line1[1] == 0 or line2[1] == 0:\n        return False\n    else:\n        return abs(line1[0] / line1[1] - line2[0] / line2[1]) < 1e-9",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to capitalize first and last letters of each word of a given string.\nTest Example: assert capitalize_first_last_letters(\"python\") == \"PythoN\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def capitalize_first_last_letters(string):\n    words = string.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]\n    return ' '.join(capitalized_words)",
        "gold_label": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ",
        "task_id": 526,
        "test_list": [
            "assert capitalize_first_last_letters(\"python\") == \"PythoN\"",
            "assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"",
            "assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def capitalize_first_last_letters(string):\n    words = string.split()\n    capitalized_words = [word[0].upper() + word[1:-1] + word[-1].upper() if len(word) > 1 else word.upper() for word in words]\n    return ' '.join(capitalized_words)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find all pairs in an integer array whose sum is equal to a given number.\nTest Example: assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def get_pairs_count(arr, n, sum):\n    count = 0\n    num_freq = {}\n    \n    for num in arr:\n        complement = sum - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count",
        "gold_label": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
        "task_id": 527,
        "test_list": [
            "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3",
            "assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2",
            "assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def get_pairs_count(arr, n, sum):\n    count = 0\n    num_freq = {}\n    \n    for num in arr:\n        complement = sum - num\n        if complement in num_freq:\n            count += num_freq[complement]\n        num_freq[num] = num_freq.get(num, 0) + 1\n    \n    return count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the list of lists with minimum length.\nTest Example: assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_length(list1):\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in list1:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return (min_len, min_sublist)",
        "gold_label": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ",
        "task_id": 528,
        "test_list": [
            "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])",
            "assert min_length([[5], [15,20,25]])==(1, [5])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_length(list1):\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in list1:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return (min_len, min_sublist)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the nth jacobsthal-lucas number.\nTest Example: assert jacobsthal_lucas(5) == 31\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b",
        "gold_label": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]",
        "task_id": 529,
        "test_list": [
            "assert jacobsthal_lucas(5) == 31",
            "assert jacobsthal_lucas(2) == 5",
            "assert jacobsthal_lucas(4) == 17"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, b + 2 * a\n    return b",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the ration of negative numbers in an array of integers.\nTest Example: assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def negative_count(nums):\n    negative_nums = sum(1 for num in nums if num < 0)\n    return round(negative_nums / len(nums), 2)",
        "gold_label": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
        "task_id": 530,
        "test_list": [
            "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31",
            "assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31",
            "assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def negative_count(nums):\n    negative_nums = sum(1 for num in nums if num < 0)\n    return round(negative_nums / len(nums), 2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find minimum number of coins that make a given value.\nTest Example: assert min_coins([9, 6, 5, 1] ,4,11)==2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import sys\n\ndef min_coins(coins, m, V):\n    dp = [sys.maxsize] * (V + 1)\n    dp[0] = 0\n\n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                sub_res = dp[i - coins[j]]\n                if sub_res != sys.maxsize and sub_res + 1 < dp[i]:\n                    dp[i] = sub_res + 1\n\n    return dp[V] if dp[V] != sys.maxsize else -1",
        "gold_label": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ",
        "task_id": 531,
        "test_list": [
            "assert min_coins([9, 6, 5, 1] ,4,11)==2",
            "assert min_coins([4,5,6,7,8,9],6,9)==1",
            "assert min_coins([1, 2, 3],3,4)==2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import sys\n\ndef min_coins(coins, m, V):\n    dp = [sys.maxsize] * (V + 1)\n    dp[0] = 0\n\n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                sub_res = dp[i - coins[j]]\n                if sub_res != sys.maxsize and sub_res + 1 < dp[i]:\n                    dp[i] = sub_res + 1\n\n    return dp[V] if dp[V] != sys.maxsize else -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if the two given strings are permutations of each other.\nTest Example: assert check_permutation(\"abc\", \"cba\") == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
        "gold_label": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True",
        "task_id": 532,
        "test_list": [
            "assert check_permutation(\"abc\", \"cba\") == True",
            "assert check_permutation(\"test\", \"ttew\") == False",
            "assert check_permutation(\"xxyz\", \"yxzx\") == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def check_permutation(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    return sorted(str1) == sorted(str2)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove particular data type elements from the given tuple.\nTest Example: assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_datatype(test_tuple, data_type):\n    return [item for item in test_tuple if not isinstance(item, data_type)]",
        "gold_label": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ",
        "task_id": 533,
        "test_list": [
            "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]",
            "assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]",
            "assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_datatype(test_tuple, data_type):\n    return [item for item in test_tuple if not isinstance(item, data_type)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\nTest Example: assert search_literal('python','python programming language')==(0,6)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index != -1:\n        return (index, index + len(pattern))\n    return None",
        "gold_label": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)",
        "task_id": 534,
        "test_list": [
            "assert search_literal('python','python programming language')==(0,6)",
            "assert search_literal('programming','python programming language')==(7,18)",
            "assert search_literal('language','python programming language')==(19,27)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def search_literal(pattern, text):\n    index = text.find(pattern)\n    if index != -1:\n        return (index, index + len(pattern))\n    return None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the top or bottom surface area of a cylinder.\nTest Example: assert topbottom_surfacearea(10)==314.15000000000003\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def topbottom_surfacearea(r):\n    import math\n    return math.pi * r ** 2",
        "gold_label": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea",
        "task_id": 535,
        "test_list": [
            "assert topbottom_surfacearea(10)==314.15000000000003",
            "assert topbottom_surfacearea(5)==78.53750000000001",
            "assert topbottom_surfacearea(4)==50.264"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def topbottom_surfacearea(r):\n    import math\n    return math.pi * r**2",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to select the nth items of a list.\nTest Example: assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def nth_items(list, n):\n    return list[::n]",
        "gold_label": "def nth_items(list,n):\r\n return list[::n]",
        "task_id": 536,
        "test_list": [
            "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] ",
            "assert nth_items([10,15,19,17,16,18],3)==[10,17] ",
            "assert nth_items([14,16,19,15,17],4)==[14,17]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def nth_items(list, n):\n    return list[::n]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the first repeated word in a given string.\nTest Example: assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def first_repeated_word(str1):\n    word_list = str1.split()\n    word_set = set()\n    \n    for word in word_list:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    \n    return None",
        "gold_label": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'",
        "task_id": 537,
        "test_list": [
            "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"",
            "assert first_repeated_word(\"ab ca bc\") == 'None'",
            "assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def first_repeated_word(str1):\n    word_list = str1.split()\n    word_set = set()\n    \n    for word in word_list:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    \n    return None",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to convert a given string list to a tuple.\nTest Example: assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def string_list_to_tuple(str1):\n    return tuple(char for char in str1 if char != ' ')",
        "gold_label": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
        "task_id": 538,
        "test_list": [
            "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')",
            "assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def string_list_to_tuple(str1):\n    return tuple(char for char in str1 if char != ' ')",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\nTest Example: assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def basesnum_coresspondingnum(bases_num, index):\n    return list(map(pow, bases_num, index))",
        "gold_label": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result",
        "task_id": 539,
        "test_list": [
            "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]",
            "assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]",
            "assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def basesnum_coresspondingnum(bases_num, index):\n    return list(map(pow, bases_num, index))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the difference between highest and least frequencies in a given array.\nTest Example: assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Diff(arr, n):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    if not freq:\n        return 0\n    \n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    \n    return max_freq - min_freq",
        "gold_label": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ",
        "task_id": 540,
        "test_list": [
            "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2",
            "assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3",
            "assert find_Diff([1,2,1,2],4) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Diff(arr, n):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    \n    if not freq:\n        return 0\n    \n    max_freq = max(freq.values())\n    min_freq = min(freq.values())\n    \n    return max_freq - min_freq",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find if the given number is abundant or not.\nTest Example: assert check_abundant(12) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\n\ndef check_abundant(n):\n    def get_divisors_sum(num):\n        return sum(i + num // i for i in range(1, int(math.sqrt(num)) + 1) if num % i == 0) - num\n\n    return get_divisors_sum(n) > n",
        "gold_label": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False",
        "task_id": 541,
        "test_list": [
            "assert check_abundant(12) == True",
            "assert check_abundant(15) == False",
            "assert check_abundant(18) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import math\n\ndef check_abundant(n):\n    def get_divisors_sum(num):\n        return sum(i + num // i for i in range(1, int(math.sqrt(num)) + 1) if num % i == 0) - num\n\n    return get_divisors_sum(n) > n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\nTest Example: assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
        "gold_label": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))",
        "task_id": 542,
        "test_list": [
            "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'",
            "assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'",
            "assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef fill_spaces(text):\n    return re.sub(r'[ ,.]', ':', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to add two numbers and print number of digits of sum.\nTest Example: assert count_digits(9875,10)==(4)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_digits(num1, num2):\n    total = num1 + num2\n    return len(str(abs(total)))",
        "gold_label": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count",
        "task_id": 543,
        "test_list": [
            "assert count_digits(9875,10)==(4)",
            "assert count_digits(98759853034,100)==(11)",
            "assert count_digits(1234567,500)==(7)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_digits(num1, num2):\n    total = num1 + num2\n    return len(str(abs(total)))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to flatten the tuple list to a string.\nTest Example: assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def flatten_tuple(test_list):\n    return ' '.join(item for tuple_item in test_list for item in tuple_item)",
        "gold_label": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ",
        "task_id": 544,
        "test_list": [
            "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'",
            "assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'",
            "assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def flatten_tuple(test_list):\n    return ' '.join(item for tuple_item in test_list for item in tuple_item)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to toggle only first and last bits of a given number.\nTest Example: assert toggle_F_and_L_bits(10) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    # Find the position of the last set bit\n    last_bit = n.bit_length() - 1\n    \n    # Toggle the first and last bits\n    n ^= (1 << last_bit) | 1\n    \n    return n",
        "gold_label": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ",
        "task_id": 545,
        "test_list": [
            "assert toggle_F_and_L_bits(10) == 3",
            "assert toggle_F_and_L_bits(15) == 6",
            "assert toggle_F_and_L_bits(20) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def toggle_F_and_L_bits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    # Find the position of the last set bit\n    last_bit = n.bit_length() - 1\n    \n    # Toggle the first and last bits\n    n ^= (1 << last_bit) | 1\n    \n    return n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the last occurrence of a character in a string.\nTest Example: assert last_occurence_char(\"hello world\",'l')==10\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def last_occurence_char(string, char):\n    return string.rfind(char) + 1 if char in string else None",
        "gold_label": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1",
        "task_id": 546,
        "test_list": [
            "assert last_occurence_char(\"hello world\",'l')==10",
            "assert last_occurence_char(\"language\",'g')==7",
            "assert last_occurence_char(\"little\",'y')==None"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def last_occurence_char(string, char):\n    return string.rfind(char) + 1 if char in string else None",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\nTest Example: assert Total_Hamming_Distance(4) == 7\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Total_Hamming_Distance(n):\n    total_distance = 0\n    for i in range(1, n + 1):\n        total_distance += bin(i ^ (i - 1)).count('1')\n    return total_distance",
        "gold_label": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum",
        "task_id": 547,
        "test_list": [
            "assert Total_Hamming_Distance(4) == 7",
            "assert Total_Hamming_Distance(2) == 3",
            "assert Total_Hamming_Distance(5) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Total_Hamming_Distance(n):\n    total_distance = 0\n    for i in range(1, n + 1):\n        total_distance += bin(i ^ (i - 1)).count('1')\n    return total_distance",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the length of the longest increasing subsequence of the given sequence.\nTest Example: assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
        "gold_label": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum",
        "task_id": 548,
        "test_list": [
            "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5",
            "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3",
            "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the sum of fifth power of first n odd natural numbers.\nTest Example: assert odd_Num_Sum(1) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def odd_Num_Sum(n):\n    return sum((2*i - 1)**5 for i in range(1, n+1))",
        "gold_label": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ",
        "task_id": 549,
        "test_list": [
            "assert odd_Num_Sum(1) == 1",
            "assert odd_Num_Sum(2) == 244",
            "assert odd_Num_Sum(3) == 3369"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def odd_Num_Sum(n):\n    return sum((2*i - 1)**5 for i in range(1, n+1))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the maximum element in a sorted and rotated array.\nTest Example: assert find_Max([2,3,5,6,9],0,4) == 9\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] <= arr[mid]:\n        return find_Max(arr, mid + 1, high)\n    else:\n        return find_Max(arr, low, mid)",
        "gold_label": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ",
        "task_id": 550,
        "test_list": [
            "assert find_Max([2,3,5,6,9],0,4) == 9",
            "assert find_Max([3,4,5,2,1],0,4) == 5",
            "assert find_Max([1,2,3],0,2) == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Max(arr, low, high):\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid]\n    \n    if arr[low] <= arr[mid]:\n        return find_Max(arr, mid + 1, high)\n    else:\n        return find_Max(arr, low, mid)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract a specified column from a given nested list.\nTest Example: assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
        "gold_label": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ",
        "task_id": 551,
        "test_list": [
            "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]",
            "assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]",
            "assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def extract_column(nested_list, column_index):\n    return [row[column_index] for row in nested_list]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether a given sequence is linear or not.\nTest Example: assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Seq_Linear(seq_nums):\n    if len(seq_nums) < 2:\n        return \"Not enough elements to determine\"\n    \n    diff = seq_nums[1] - seq_nums[0]\n    \n    for i in range(2, len(seq_nums)):\n        if seq_nums[i] - seq_nums[i-1] != diff:\n            return \"Non Linear Sequence\"\n    \n    return \"Linear Sequence\"",
        "gold_label": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"",
        "task_id": 552,
        "test_list": [
            "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"",
            "assert Seq_Linear([1,2,3]) == \"Linear Sequence\"",
            "assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Seq_Linear(seq_nums):\n    if len(seq_nums) < 2:\n        return \"Not enough elements to determine\"\n    \n    diff = seq_nums[1] - seq_nums[0]\n    \n    for i in range(2, len(seq_nums)):\n        if seq_nums[i] - seq_nums[i-1] != diff:\n            return \"Non Linear Sequence\"\n    \n    return \"Linear Sequence\"",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert the given tuple to a floating-point number.\nTest Example: assert tuple_to_float((4, 56)) == 4.56\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def tuple_to_float(tup):\n    return float(f\"{tup[0]}.{tup[1]}\")",
        "gold_label": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ",
        "task_id": 553,
        "test_list": [
            "assert tuple_to_float((4, 56)) == 4.56",
            "assert tuple_to_float((7, 256)) == 7.256",
            "assert tuple_to_float((8, 123)) == 8.123"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def tuple_to_float(tup):\n    return float(f\"{tup[0]}.{tup[1]}\")",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find odd numbers from a mixed list.\nTest Example: assert Split([1,2,3,4,5,6]) == [1,3,5]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Split(list):\n    return [num for num in list if num % 2 != 0]",
        "gold_label": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li",
        "task_id": 554,
        "test_list": [
            "assert Split([1,2,3,4,5,6]) == [1,3,5]",
            "assert Split([10,11,12,13]) == [11,13]",
            "assert Split([7,8,9,1]) == [7,9,1]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Split(list):\n    return [num for num in list if num % 2 != 0]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\nTest Example: assert difference(3) == 30\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "gold_label": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ",
        "task_id": 555,
        "test_list": [
            "assert difference(3) == 30",
            "assert difference(5) == 210",
            "assert difference(2) == 6"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count the pairs with xor as an odd number.\nTest Example: assert find_Odd_Pair([5,4,7,2,1],5) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Odd_Pair(A, N):\n    odd_count = sum(1 for num in A if num % 2 != 0)\n    even_count = N - odd_count\n    return odd_count * even_count",
        "gold_label": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ",
        "task_id": 556,
        "test_list": [
            "assert find_Odd_Pair([5,4,7,2,1],5) == 6",
            "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12",
            "assert find_Odd_Pair([1,2,3],3) == 2"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Odd_Pair(A, N):\n    odd_count = sum(1 for num in A if num % 2 != 0)\n    even_count = N - odd_count\n    return odd_count * even_count",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to toggle characters case in a string.\nTest Example: assert toggle_string(\"Python\")==(\"pYTHON\")\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def toggle_string(string):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)",
        "gold_label": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1",
        "task_id": 557,
        "test_list": [
            "assert toggle_string(\"Python\")==(\"pYTHON\")",
            "assert toggle_string(\"Pangram\")==(\"pANGRAM\")",
            "assert toggle_string(\"LIttLE\")==(\"liTTle\")"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def toggle_string(string):\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the digit distance between two integers.\nTest Example: assert digit_distance_nums(1,2) == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def digit_distance_nums(n1, n2):\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1).zfill(max(len(str(n1)), len(str(n2)))), str(n2).zfill(max(len(str(n1)), len(str(n2))))))",
        "gold_label": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))",
        "task_id": 558,
        "test_list": [
            "assert digit_distance_nums(1,2) == 1",
            "assert digit_distance_nums(23,56) == 6",
            "assert digit_distance_nums(123,256) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def digit_distance_nums(n1, n2):\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1).zfill(max(len(str(n1)), len(str(n2)))), str(n2).zfill(max(len(str(n1)), len(str(n2))))))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the largest sum of contiguous subarray in the given array.\nTest Example: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "gold_label": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far",
        "task_id": 559,
        "test_list": [
            "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7",
            "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8",
            "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the union of elements of the given tuples.\nTest Example: assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def union_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))",
        "gold_label": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ",
        "task_id": 560,
        "test_list": [
            "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
            "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)",
            "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def union_elements(test_tup1, test_tup2):\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\nTest Example: assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def assign_elements(pairs):\n    result = {}\n    for first, second in pairs:\n        result.setdefault(first, []).append(second)\n        result.setdefault(second, [])\n    return result",
        "gold_label": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) ",
        "task_id": 561,
        "test_list": [
            "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}",
            "assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}",
            "assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def assign_elements(pairs):\n    result = {}\n    for first, second in pairs:\n        result.setdefault(first, []).append(second)\n        result.setdefault(second, [])\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the maximum length of sublist.\nTest Example: assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)",
        "gold_label": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ",
        "task_id": 562,
        "test_list": [
            "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4",
            "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3",
            "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def Find_Max_Length(lst):\n    return max(len(sublist) for sublist in lst)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract values between quotation marks of a string.\nTest Example: assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
        "gold_label": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))",
        "task_id": 563,
        "test_list": [
            "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']",
            "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']",
            "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef extract_values(text):\n    return re.findall(r'\"([^\"]*)\"', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count unequal element pairs from the given array.\nTest Example: assert count_Pairs([1,2,1],3) == 2\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_Pairs(arr, n):\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum(count * (count - 1) // 2 for count in count_dict.values())\n    \n    return total_pairs - equal_pairs",
        "gold_label": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ",
        "task_id": 564,
        "test_list": [
            "assert count_Pairs([1,2,1],3) == 2",
            "assert count_Pairs([1,1,1,1],4) == 0",
            "assert count_Pairs([1,2,3,4,5],5) == 10"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_Pairs(arr, n):\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    \n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum(count * (count - 1) // 2 for count in count_dict.values())\n    \n    return total_pairs - equal_pairs",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to split a string into characters.\nTest Example: assert split('python') == ['p','y','t','h','o','n']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def split(word):\n    return list(word)",
        "gold_label": "def split(word): \r\n    return [char for char in word] ",
        "task_id": 565,
        "test_list": [
            "assert split('python') == ['p','y','t','h','o','n']",
            "assert split('Name') == ['N','a','m','e']",
            "assert split('program') == ['p','r','o','g','r','a','m']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def split(word):\n    return list(word)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get the sum of a non-negative integer.\nTest Example: assert sum_digits(345)==12\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
        "gold_label": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))",
        "task_id": 566,
        "test_list": [
            "assert sum_digits(345)==12",
            "assert sum_digits(12)==3",
            "assert sum_digits(97)==16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_digits(n):\n    return sum(int(digit) for digit in str(n))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether a specified list is sorted or not.\nTest Example: assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def issort_list(list1):\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True",
        "gold_label": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result",
        "task_id": 567,
        "test_list": [
            "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True",
            "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False",
            "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def issort_list(list1):\n    if len(list1) <= 1:\n        return True\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to create a list of empty dictionaries.\nTest Example: assert empty_list(5)==[{},{},{},{},{}]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]",
        "gold_label": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list",
        "task_id": 568,
        "test_list": [
            "assert empty_list(5)==[{},{},{},{},{}]",
            "assert empty_list(6)==[{},{},{},{},{},{}]",
            "assert empty_list(7)==[{},{},{},{},{},{},{}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def empty_list(length):\n    return [{} for _ in range(length)]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to sort each sublist of strings in a given list of lists.\nTest Example: assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
        "gold_label": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result",
        "task_id": 569,
        "test_list": [
            "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]",
            "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sort_sublists(list1):\n    return [sorted(sublist) for sublist in list1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove words from a given list of strings containing a character or string.\nTest Example: assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def remove_words(list1, charlist):\n    return [' '.join(word for word in line.split() if not any(char in word for char in charlist)).strip() for line in list1]",
        "gold_label": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list",
        "task_id": 570,
        "test_list": [
            "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']",
            "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']",
            "assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def remove_words(list1, charlist):\n    return [' '.join(word for word in line.split() if not any(char in word for char in charlist)).strip() for line in list1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\nTest Example: assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort(reverse=True)\n    result = 0\n    i = 0\n    while i < N - 1:\n        if arr[i] - arr[i + 1] < K:\n            result += arr[i] + arr[i + 1]\n            i += 2\n        else:\n            i += 1\n    return result",
        "gold_label": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]",
        "task_id": 571,
        "test_list": [
            "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62",
            "assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25",
            "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def max_sum_pair_diff_lessthan_K(arr, N, K):\n    arr.sort(reverse=True)\n    result = 0\n    i = 0\n    while i < N - 1:\n        if arr[i] - arr[i + 1] < K:\n            result += arr[i] + arr[i + 1]\n            i += 2\n        else:\n            i += 1\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to remove two duplicate numbers from a given number of lists.\nTest Example: assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def two_unique_nums(nums):\n    count_dict = {}\n    for num in nums:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    return [num for num in nums if count_dict[num] == 1]",
        "gold_label": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]",
        "task_id": 572,
        "test_list": [
            "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]",
            "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]",
            "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def two_unique_nums(nums):\n    count_dict = {}\n    for num in nums:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    return [num for num in nums if count_dict[num] == 1]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to calculate the product of the unique numbers of a given list.\nTest Example: assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    return eval('*'.join(map(str, unique_nums)))",
        "gold_label": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p",
        "task_id": 573,
        "test_list": [
            "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000",
            "assert unique_product([1, 2, 3, 1,]) == 6",
            "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    return eval('*'.join(map(str, unique_nums)))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the surface area of a cylinder.\nTest Example: assert surfacearea_cylinder(10,5)==942.45\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def surfacearea_cylinder(r, h):\n    pi = 3.14159\n    base_area = 2 * pi * r**2\n    lateral_area = 2 * pi * r * h\n    surface_area = base_area + lateral_area\n    return round(surface_area, 2)",
        "gold_label": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea",
        "task_id": 574,
        "test_list": [
            "assert surfacearea_cylinder(10,5)==942.45",
            "assert surfacearea_cylinder(4,5)==226.18800000000002",
            "assert surfacearea_cylinder(4,10)==351.848"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def surfacearea_cylinder(r, h):\n    pi = 3.14159\n    base_area = 2 * pi * r**2\n    lateral_area = 2 * pi * r * h\n    total_surface_area = base_area + lateral_area\n    return round(total_surface_area, 2)",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find nth number in a sequence which is not a multiple of a given number.\nTest Example: assert count_no(2,3,1,10) == 5\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_no(A, N, L, R):\n    count = 0\n    for num in range(L, R + 1):\n        if num % A != 0:\n            count += 1\n            if count == N:\n                return num\n    return -1  # If N-th number not found within range",
        "gold_label": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ",
        "task_id": 575,
        "test_list": [
            "assert count_no(2,3,1,10) == 5",
            "assert count_no(3,6,4,20) == 11",
            "assert count_no(5,10,4,20) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_no(A, N, L, R):\n    count = 0\n    for num in range(L, R + 1):\n        if num % A != 0:\n            count += 1\n            if count == N:\n                return num\n    return -1  # If N-th number not found within range",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether an array is subarray of another or not.\nTest Example: assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Sub_Array(A, B, n, m):\n    for i in range(n - m + 1):\n        if A[i:i+m] == B:\n            return True\n    return False",
        "gold_label": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ",
        "task_id": 576,
        "test_list": [
            "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False",
            "assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True",
            "assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Sub_Array(A, B, n, m):\n    for i in range(n - m + 1):\n        if A[i:i+m] == B:\n            return True\n    return False",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the last digit in factorial of a given number.\nTest Example: assert last_Digit_Factorial(4) == 4\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    if n < 2:\n        return 1\n    result = 2\n    for i in range(3, n + 1):\n        result = (result * i) % 10\n    return result",
        "gold_label": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0",
        "task_id": 577,
        "test_list": [
            "assert last_Digit_Factorial(4) == 4",
            "assert last_Digit_Factorial(21) == 0",
            "assert last_Digit_Factorial(30) == 0"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def last_Digit_Factorial(n):\n    if n < 0:\n        return None\n    if n < 2:\n        return 1\n    result = 2\n    for i in range(3, n + 1):\n        result = (result * i) % 10\n    return result",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to interleave lists of the same length.\nTest Example: assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def interleave_lists(*lists):\n    return [item for tuple_items in zip(*lists) for item in tuple_items]",
        "gold_label": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result",
        "task_id": 578,
        "test_list": [
            "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]",
            "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]",
            "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def interleave_lists(*lists):\n    return [item for tuple_items in zip(*lists) for item in tuple_items]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the dissimilar elements in the given two tuples.\nTest Example: assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)",
        "gold_label": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ",
        "task_id": 579,
        "test_list": [
            "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)",
            "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)",
            "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_dissimilar(tuple1, tuple2):\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to extract the even elements in the nested mixed tuple.\nTest Example: assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def extract_even(test_tuple):\n    def even_elements(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested = even_elements(item)\n                if nested:\n                    result.append(tuple(nested))\n            elif isinstance(item, int) and item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    \n    return even_elements(test_tuple)",
        "gold_label": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ",
        "task_id": 580,
        "test_list": [
            "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)",
            "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))",
            "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def extract_even(test_tuple):\n    def even_elements(tup):\n        result = []\n        for item in tup:\n            if isinstance(item, tuple):\n                nested = even_elements(item)\n                if nested:\n                    result.append(tuple(nested))\n            elif isinstance(item, int) and item % 2 == 0:\n                result.append(item)\n        return tuple(result)\n    \n    return even_elements(test_tuple)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the surface area of the square pyramid.\nTest Example: assert surface_Area(3,4) == 33\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def surface_Area(b, s):\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
        "gold_label": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ",
        "task_id": 581,
        "test_list": [
            "assert surface_Area(3,4) == 33",
            "assert surface_Area(4,5) == 56",
            "assert surface_Area(1,2) == 5"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def surface_Area(b, s):\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check if a dictionary is empty or not.\nTest Example: assert my_dict({10})==False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def my_dict(dict1):\n    return len(dict1) == 0",
        "gold_label": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True",
        "task_id": 582,
        "test_list": [
            "assert my_dict({10})==False",
            "assert my_dict({11})==False",
            "assert my_dict({})==True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def my_dict(dict1):\n    return len(dict1) == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function for nth catalan number.\nTest Example: assert catalan_number(10)==16796\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]",
        "gold_label": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num",
        "task_id": 583,
        "test_list": [
            "assert catalan_number(10)==16796",
            "assert catalan_number(9)==4862",
            "assert catalan_number(7)==429"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    \n    catalan = [0] * (n + 1)\n    catalan[0] = catalan[1] = 1\n    \n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    \n    return catalan[n]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find all adverbs and their positions in a given sentence by using regex.\nTest Example: assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text, re.IGNORECASE):\n        adverbs.append(f\"{match.start()}-{match.end()}: {match.group()}\")\n    return ', '.join(adverbs) if adverbs else ''",
        "gold_label": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
        "task_id": 584,
        "test_list": [
            "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'",
            "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'",
            "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef find_adverbs(text):\n    adverbs = []\n    for match in re.finditer(r'\\b\\w+ly\\b', text, re.IGNORECASE):\n        adverbs.append(f\"{match.start()}-{match.end()}: {match.group()}\")\n    return ', '.join(adverbs) if adverbs else ''",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\nTest Example: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    return heapq.nlargest(n, items, key=lambda item: item['price'])",
        "gold_label": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items",
        "task_id": 585,
        "test_list": [
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]",
            "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef expensive_items(items, n):\n    return heapq.nlargest(n, items, key=lambda item: item['price'])",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to split the array and add the first part to the end.\nTest Example: assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def split_Arr(arr, n, k):\n    return arr[k:] + arr[:k]",
        "gold_label": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ",
        "task_id": 586,
        "test_list": [
            "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]",
            "assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]",
            "assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def split_Arr(arr, n, k):\n    return arr[k:] + arr[:k]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert a list to a tuple.\nTest Example: assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def list_tuple(listx):\n    return tuple(listx)",
        "gold_label": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex",
        "task_id": 587,
        "test_list": [
            "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)",
            "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)",
            "assert list_tuple([58,44,56])==(58,44,56)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def list_tuple(listx):\n    return tuple(listx)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the difference between largest and smallest value in a given array.\nTest Example: assert big_diff([1,2,3,4]) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)",
        "gold_label": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff",
        "task_id": 588,
        "test_list": [
            "assert big_diff([1,2,3,4]) == 3",
            "assert big_diff([4,5,12]) == 8",
            "assert big_diff([9,2,3]) == 7"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def big_diff(nums):\n    if not nums:\n        return 0\n    return max(nums) - min(nums)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find perfect squares between two given numbers.\nTest Example: assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def perfect_squares(a, b):\n    return [i*i for i in range(int(a**0.5), int(b**0.5) + 1) if a <= i*i <= b]",
        "gold_label": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists",
        "task_id": 589,
        "test_list": [
            "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]",
            "assert perfect_squares(50,100)==[64, 81, 100]",
            "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def perfect_squares(a, b):\n    return [i*i for i in range(int(a**0.5), int(b**0.5) + 1) if a <= i*i <= b]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to convert polar coordinates to rectangular coordinates.\nTest Example: assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import math\nimport cmath\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    rectangular = (x, y)\n    complex_form = complex(x, y)\n    return (rectangular, complex_form)",
        "gold_label": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)",
        "task_id": 590,
        "test_list": [
            "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))",
            "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import cmath\nimport math\n\ndef polar_rect(r, theta):\n    # Convert polar coordinates to rectangular coordinates\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    \n    # Create complex number from rectangular coordinates\n    rect = complex(x, y)\n    \n    # Create polar representation tuple\n    polar = (r, theta)\n    \n    return polar, rect",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to interchange the first and last elements in a list.\nTest Example: assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "gold_label": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ",
        "task_id": 591,
        "test_list": [
            "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]",
            "assert swap_List([1, 2, 3]) == [3, 2, 1]",
            "assert swap_List([4, 5, 6]) == [6, 5, 4]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find sum of product of binomial co-efficients.\nTest Example: assert sum_Of_product(3) == 15\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def binomial_coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_coeff(n - 1, k - 1) + binomial_coeff(n - 1, k)\n\ndef sum_of_product(n):\n    result = 0\n    for i in range(n + 1):\n        result += binomial_coeff(n, i) * binomial_coeff(n, i)\n    return result",
        "gold_label": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ",
        "task_id": 592,
        "test_list": [
            "assert sum_Of_product(3) == 15",
            "assert sum_Of_product(4) == 56",
            "assert sum_Of_product(1) == 1"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def binomial_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\ndef sum_Of_product(n):\n    result = 0\n    for i in range(n + 1):\n        result += binomial_coefficient(n, i) * binomial_coefficient(n, i)\n    return result",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to remove leading zeroes from an ip address.\nTest Example: assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def removezero_ip(ip):\n    return '.'.join(str(int(octet)) for octet in ip.split('.'))",
        "gold_label": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r",
        "task_id": 593,
        "test_list": [
            "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') ",
            "assert removezero_ip(\"12.01.024\")==('12.1.24') ",
            "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def removezero_ip(ip):\n    return '.'.join(str(int(octet)) for octet in ip.split('.'))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the difference of first even and odd number of a given list.\nTest Example: assert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def diff_even_odd(list1):\n    first_even = next((num for num in list1 if num % 2 == 0), None)\n    first_odd = next((num for num in list1 if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even - first_odd",
        "gold_label": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)",
        "task_id": 594,
        "test_list": [
            "assert diff_even_odd([1,3,5,7,4,1,6,8])==3",
            "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1",
            "assert diff_even_odd([1,5,7,9,10])==9"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def diff_even_odd(list1):\n    first_even = next((num for num in list1 if num % 2 == 0), None)\n    first_odd = next((num for num in list1 if num % 2 != 0), None)\n    \n    if first_even is None or first_odd is None:\n        return None\n    \n    return first_even - first_odd",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to count minimum number of swaps required to convert one binary string to another.\nTest Example: assert min_Swaps(\"1101\",\"1110\") == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    diff_count = sum(a != b for a, b in zip(str1, str2))\n    \n    if diff_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return diff_count // 2",
        "gold_label": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
        "task_id": 595,
        "test_list": [
            "assert min_Swaps(\"1101\",\"1110\") == 1",
            "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"",
            "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_Swaps(str1, str2):\n    if len(str1) != len(str2):\n        return \"Not Possible\"\n    \n    diff_count = sum(a != b for a, b in zip(str1, str2))\n    \n    if diff_count % 2 != 0:\n        return \"Not Possible\"\n    \n    return diff_count // 2",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the size of the given tuple.\nTest Example: assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
        "gold_label": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) ",
        "task_id": 596,
        "test_list": [
            "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))",
            "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))",
            "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import sys\n\ndef tuple_size(tuple_list):\n    return sys.getsizeof(tuple_list)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find kth element from the given two sorted arrays.\nTest Example: assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_kth(arr1, arr2, m, n, k):\n    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    \n    low = max(0, k - n)\n    high = min(k, m)\n    \n    while low <= high:\n        cut1 = (low + high) // 2\n        cut2 = k - cut1\n        \n        left1 = float('-inf') if cut1 == 0 else arr1[cut1 - 1]\n        left2 = float('-inf') if cut2 == 0 else arr2[cut2 - 1]\n        right1 = float('inf') if cut1 == m else arr1[cut1]\n        right2 = float('inf') if cut2 == n else arr2[cut2]\n        \n        if left1 <= right2 and left2 <= right1:\n            return max(left1, left2)\n        elif left1 > right2:\n            high = cut1 - 1\n        else:\n            low = cut1 + 1\n    \n    return -1",
        "gold_label": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]",
        "task_id": 597,
        "test_list": [
            "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6",
            "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256",
            "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_kth(arr1, arr2, m, n, k):\n    if m > n:\n        return find_kth(arr2, arr1, n, m, k)\n    \n    low = max(0, k - n)\n    high = min(k, m)\n    \n    while low <= high:\n        cut1 = (low + high) // 2\n        cut2 = k - cut1\n        \n        left1 = float('-inf') if cut1 == 0 else arr1[cut1 - 1]\n        left2 = float('-inf') if cut2 == 0 else arr2[cut2 - 1]\n        right1 = float('inf') if cut1 == m else arr1[cut1]\n        right2 = float('inf') if cut2 == n else arr2[cut2]\n        \n        if left1 <= right2 and left2 <= right1:\n            return max(left1, left2)\n        elif left1 > right2:\n            high = cut1 - 1\n        else:\n            low = cut1 + 1\n    \n    return -1",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to check whether the given number is armstrong or not.\nTest Example: assert armstrong_number(153)==True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return number == sum_of_powers",
        "gold_label": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False",
        "task_id": 598,
        "test_list": [
            "assert armstrong_number(153)==True",
            "assert armstrong_number(259)==False",
            "assert armstrong_number(4458)==False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def armstrong_number(number):\n    num_str = str(number)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return number == sum_of_powers",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find sum and average of first n natural numbers.\nTest Example: assert sum_average(10)==(55, 5.5)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def sum_average(n):\n    total = sum(range(1, n + 1))\n    average = total / n\n    return (total, average)",
        "gold_label": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)",
        "task_id": 599,
        "test_list": [
            "assert sum_average(10)==(55, 5.5)",
            "assert sum_average(15)==(120, 8.0)",
            "assert sum_average(20)==(210, 10.5)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def sum_average(n):\n    total = sum(range(1, n + 1))\n    average = total / n\n    return (total, average)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the given number is even or not using bitwise operator.\nTest Example: assert is_Even(1) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_Even(n):\n    return not (n & 1)",
        "gold_label": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ",
        "task_id": 600,
        "test_list": [
            "assert is_Even(1) == False",
            "assert is_Even(2) == True",
            "assert is_Even(3) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_Even(n):\n    return not (n & 1)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\nTest Example: assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def min_cost(cost, m, n):\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
        "gold_label": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
        "task_id": 1,
        "test_list": [
            "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8",
            "assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12",
            "assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def min_cost(cost, m, n):\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    return dp[m][n]",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the similar elements from the given two tuple lists.\nTest Example: assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def similar_elements(test_tup1, test_tup2):\n    common = set(test_tup1) & set(test_tup2)\n    return tuple(sorted(common))",
        "gold_label": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
        "task_id": 2,
        "test_list": [
            "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)",
            "assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)",
            "assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def similar_elements(test_tup1, test_tup2):\n    common = set(test_tup1) & set(test_tup2)\n    return tuple(sorted(common))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to identify non-prime numbers.\nTest Example: assert is_not_prime(2) == False\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
        "gold_label": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
        "task_id": 3,
        "test_list": [
            "assert is_not_prime(2) == False",
            "assert is_not_prime(10) == True",
            "assert is_not_prime(35) == True"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def is_not_prime(n):\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return True\n    return False",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\nTest Example: assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return sorted(heap, reverse=True)",
        "gold_label": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
        "task_id": 4,
        "test_list": [
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] ",
            "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import heapq\n\ndef heap_queue_largest(nums, n):\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heapreplace(heap, num)\n    return sorted(heap, reverse=True)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\nTest Example: assert count_ways(2) == 3\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = 3\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] * 2\n    \n    return dp[n]",
        "gold_label": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
        "task_id": 5,
        "test_list": [
            "assert count_ways(2) == 3",
            "assert count_ways(8) == 153",
            "assert count_ways(12) == 2131"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def count_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    \n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 0\n    dp[2] = 3\n    \n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] * 2\n    \n    return dp[n]",
        "correct": false
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to check whether the two numbers differ at one bit position only or not.\nTest Example: assert differ_At_One_Bit_Pos(13,9) == True\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
        "gold_label": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
        "task_id": 6,
        "test_list": [
            "assert differ_At_One_Bit_Pos(13,9) == True",
            "assert differ_At_One_Bit_Pos(15,8) == False",
            "assert differ_At_One_Bit_Pos(2,4) == False"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def differ_At_One_Bit_Pos(a, b):\n    xor_result = a ^ b\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find all words which are at least 4 characters long in a string by using regex.\nTest Example: assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
        "gold_label": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
        "task_id": 7,
        "test_list": [
            "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']",
            "assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']",
            "assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "import re\n\ndef find_char_long(text):\n    return re.findall(r'\\b\\w{4,}\\b', text)",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to find squares of individual elements in a list using lambda function.\nTest Example: assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))",
        "gold_label": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
        "task_id": 8,
        "test_list": [
            "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]",
            "assert square_nums([10,20,30])==([100,400,900])",
            "assert square_nums([12,15])==([144,225])"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def square_nums(nums):\n    return list(map(lambda x: x**2, nums))",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a python function to find the minimum number of rotations required to get the same string.\nTest Example: assert find_Rotations(\"aaaa\") == 1\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def find_Rotations(s):\n    if not s:\n        return 0\n    \n    n = len(s)\n    if n == 1:\n        return 1\n    \n    s_doubled = s + s\n    for i in range(1, n):\n        if s_doubled[i:i+n] == s:\n            return i\n    \n    return n",
        "gold_label": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
        "task_id": 9,
        "test_list": [
            "assert find_Rotations(\"aaaa\") == 1",
            "assert find_Rotations(\"ab\") == 2",
            "assert find_Rotations(\"abc\") == 3"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def find_Rotations(s):\n    if not s:\n        return 0\n    \n    n = len(s)\n    if n == 1:\n        return 1\n    \n    s_doubled = s + s\n    for i in range(1, n):\n        if s_doubled[i:i+n] == s:\n            return i\n    \n    return n",
        "correct": true
    },
    {
        "question": "You are an expert Python programmer, and you have a computer task. For the task, you are given a test example to show you the input format and the function structure. Please be careful about whitespace between each line of the code. \n\n\nTask: Write a function to get the n smallest items from a dataset.\nTest Example: assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\n\n1. We wish you to answer the question.\n2. You must directly provide the code answer without say anything else. Please not saying anything 'like sure I can help you with'.\n3. The code should be runnable code which means You do not need to add ``` ``` or add python in front of the code.\n4. The test is only used to show you the input structure. Please do not run the test in your answer.\n",
        "input": "",
        "answer": "def small_nnum(list1, n):\n    return sorted(set(list1))[:n]",
        "gold_label": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
        "task_id": 10,
        "test_list": [
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]",
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]",
            "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"
        ],
        "test_setup_code": "",
        "challenge_test_list": [],
        "prediction": "def small_nnum(list1, n):\n    return sorted(set(list1))[:n]",
        "correct": false
    }
]