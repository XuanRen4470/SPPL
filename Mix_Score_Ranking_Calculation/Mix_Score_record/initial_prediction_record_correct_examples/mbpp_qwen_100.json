{
    "initial_prediction": [
        "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "def radian_degree(degree):\n    import math\n    return math.radians(degree)",
        "def find_literals(text, pattern): \n    import re \n    match = re.search(pattern, text) \n    if match: \n        return (pattern, match.start(), match.end()) \n    else: \n        return (None, -1, -1)",
        "def bell_Number(n):  \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]  \n    bell[0][0] = 1\n    for i in range(1, n+1):  \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1):  \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]  \n    return bell[n][0]",
        "def max_of_nth(data, n): \n    return max(row[n] for row in data)",
        "def maximum_value(record_list):\n    return [(key, max(values)) for key, values in record_list]",
        "def cummulative_sum(lst):\n    total = 0\n    for tup in lst:\n        total += sum(tup)\n    return total",
        "def average_tuple(tuples):\n    avg_list = []\n    for t in zip(*tuples):\n        avg_list.append(sum(t) / len(t))\n    return avg_list",
        "def tuple_modulo(t1, t2):\n    return tuple(x % y for x, y in zip(t1, t2))",
        "def div_list(lst1, lst2): \n    return list(map(lambda x, y: x / y, lst1, lst2))",
        "def increment_numerics(lst, k): \n    result = []\n    for item in lst: \n        if item.isdigit(): \n            result.append(str(int(item) + k)) \n        else: \n            result.append(item) \n    return result",
        "nth_nums = lambda nums, n: [x**n for x in nums]",
        "def is_upper(s):  \n    return s.upper()",
        "def swap_List(newList): \n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList",
        "def find_First_Missing(arr, start, end): \n    while start <= end: \n        correct = arr[start] \n        if arr[start] < len(arr) and arr[start]!= arr[correct]: \n            arr[start], arr[correct] = arr[correct], arr[start] \n        else: \n            start += 1\n    for i in range(len(arr)): \n        if arr[i]!= i: \n            return i \n    return len(arr)",
        "def replace_spaces(string):  \n    return string.replace(\" \", \"%20\")",
        "def Split(lst): \n    return [num for num in lst if num % 2 == 0]",
        "def get_coordinates(coord): \n    x, y = coord \n    return [[x-1, y-1], [x-1, y], [x-1, y+1], [x, y-1], [x, y], [x, y+1], [x+1, y-1], [x+1, y], [x+1, y+1]]",
        "def move_zero(lst):\n    non_zero = [x for x in lst if x!= 0]\n    zeros = [0] * (len(lst) - len(non_zero))\n    return non_zero + zeros",
        "def even_Power_Sum(n):  \n    sum = 0  \n    for i in range(1, n+1):  \n        even_number = 2 * i  \n        sum += even_number ** 4  \n    return sum",
        "def heap_sort(arr):\n    from heapq import heapify, heappop\n    \n    heapify(arr)\n    sorted_arr = [heappop(arr) for _ in range(len(arr))]\n    return sorted_arr",
        "def Check_Solution(a, b, c): \n    if c == 0: \n        return \"No\" \n    else: \n        return \"Yes\" if a == c else \"No\"",
        "def sample_nam(names): \n    total_length = 0 \n    for name in names: \n        if name[0].isupper(): \n            total_length += len(name) \n    return total_length",
        "def is_nonagonal(n): \n    return (7 * n * n - 5 * n) // 2",
        "def remove_similar_row(matrix): \n    unique_rows = set() \n    for row in matrix: \n        sorted_row = tuple(sorted(row)) \n        unique_rows.add(sorted_row) \n    return unique_rows",
        "def reverse_Array_Upto_K(arr, k):  \n    left = 0  \n    right = k - 1  \n    while left < right:  \n        arr[left], arr[right] = arr[right], arr[left]  \n        left += 1  \n        right -= 1  \n    return arr",
        "def find_k_product(tuples, k): \n    product = 1\n    for tup in tuples: \n        if k < len(tup): \n            product *= tup[k] \n    return product",
        "def No_of_cubes(n, k):  \n    return (n - k + 1) ** 3",
        "def split_upperstring(s):\n    import re\n    return re.findall('[A-Z][^A-Z]*', s)",
        "def exchange_elements(lst):\n    for i in range(0, len(lst)-1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst",
        "def sum_Range_list(lst, start, end):\n    return sum(lst[start:end+1])",
        "def check_subset(t1, t2): \n    return set(t2).issubset(set(t1))",
        "from collections import defaultdict\n\ndef grouping_dictionary(pairs):\n    result = defaultdict(list)\n    for key, value in pairs:\n        result[key].append(value)\n    return dict(result)",
        "def rectangle_perimeter(length, width):\n    return 2 * (length + width)",
        "def fifth_Power_Sum(n):  \n    return sum([i**5 for i in range(1, n+1)])",
        "def find_Min_Sum(arr1, arr2, n):  \n    arr1.sort()  \n    arr2.sort()  \n    min_sum = 0  \n    for i in range(n):  \n        min_sum += abs(arr1[i] - arr2[i])  \n    return min_sum",
        "def first_Digit(n): \n    if n < 0: \n        return -1 \n    fact = 1\n    for i in range(2, n + 1): \n        fact *= i \n    while fact: \n        first_digit = fact % 10 \n        fact //= 10 \n    return first_digit",
        "def max_occurrences(lst):\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    max_occurrence = max(count_dict, key=count_dict.get)\n    return max_occurrence",
        "def sorted_dict(dct): \n    return {k: sorted(v) for k, v in dct.items()}",
        "def average_Even(n):  \n    if n % 2!= 0: \n        return \"Input number must be even\" \n    total = 0 \n    count = 0 \n    for i in range(2, n+1, 2): \n        total += i \n        count += 1 \n    return total // count",
        "def move_last(lst):\n    if len(lst) > 0:\n        return lst[1:] + [lst[0]]",
        "def count_char(s, char):  \n    count = 0  \n    for c in s:  \n        if c == char:  \n            count += 1  \n    return count",
        "def Check_Vow(s, vowels):    \n    count = 0\n    for char in s:        \n        if char in vowels:            \n            count += 1\n    return count",
        "def replace(s, char):\n    result = ''\n    prev_char = ''\n    for char_in_s in s:\n        if char_in_s!= prev_char:\n            result += char_in_s\n            prev_char = char_in_s\n    return result",
        "import re\n\ndef check_IP(ip):\n    pattern = re.compile(r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    return 'Valid IP address' if pattern.match(ip) else 'Invalid IP address'",
        "def max_of_three(a, b, c):\n    return max(a, b, c)",
        "def convert(lst): \n    return int(''.join(map(str, lst)))",
        "def sum_nums(a, b, c, d):\n    sum_result = a + b\n    if c <= sum_result <= d:\n        return 20\n    else:\n        return sum_result",
        "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'\\W+', '', s)",
        "def remove_spaces(s): \n    return s.replace(\" \", \"\")",
        "def access_key(d, index): \n    return list(d.keys())[index]",
        "def increasing_trend(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return False\n    return True",
        "def smallest_Divisor(n): \n    if n <= 1: \n        return None\n    for i in range(2, n + 1): \n        if n % i == 0: \n            return i",
        "def mul_list(lst1, lst2): \n    return list(map(lambda x, y: x * y, lst1, lst2))",
        "def sum_Square(n):  \n    for i in range(int(n**0.5) + 1): \n        for j in range(int(n**0.5) + 1): \n            if i*i + j*j == n: \n                return True \n    return False",
        "def sum_Of_Primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    sum_primes = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            sum_primes += i\n    return sum_primes",
        "def freq_element(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return str(freq)",
        "def recur_gcd(a, b): \n    if b == 0: \n        return a \n    else: \n        return recur_gcd(b, a % b)",
        "def len_complex(real, imag):\n    return (real**2 + imag**2)**0.5",
        "def min_jumps(arr, n):  \n    if n <= 1: \n        return 0\n    if arr[0] == 0: \n        return -1\n    max_reach = arr[0] \n    step = arr[0] \n    jump = 1\n    for i in range(1, n): \n        if i == n-1: \n            return jump \n        max_reach = max(max_reach, i + arr[i]) \n        step -= 1\n        if step == 0: \n            jump += 1\n            if i >= max_reach: \n                return -1\n            step = max_reach - i \n    return -1",
        "def mul_consecutive_nums(lst):\n    return [lst[i] * lst[i+1] for i in range(len(lst)-1)]",
        "def group_element(lst):  \n    result = {}  \n    for first, second in lst:  \n        if second in result:  \n            result[second].append(first)  \n        else:  \n            result[second] = [first]  \n    return result",
        "def last_Two_Digits(n): \n    if n == 0 or n == 1: \n        return 1\n    last_two = 1 \n    for i in range(2, n + 1): \n        last_two = (last_two * i) % 100\n    return last_two % 100",
        "def check_greater(t1, t2): \n    return all(x < y for x, y in zip(t1, t2))",
        "def zip_list(list1, list2):\n    result = []\n    max_len = max(len(list1), len(list2))\n    for i in range(max_len):\n        row1 = list1[i] if i < len(list1) else []\n        row2 = list2[i] if i < len(list2) else []\n        result.append(row1 + row2)\n    return result",
        "count_even = lambda lst: len(list(filter(lambda x: x % 2 == 0, lst)))",
        "def sort_dict_item(d): \n    return {k: v for k, v in sorted(d.items(), key=lambda item: item[0][0] * item[0][1])}",
        "def count_range_in_list(lst, lower_limit, upper_limit):\n    count = 0\n    for num in lst:\n        if lower_limit <= num <= upper_limit:\n            count += 1\n    return count"
    ],
    "correct_index": [
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        14,
        15,
        17,
        20,
        22,
        23,
        24,
        26,
        27,
        28,
        29,
        31,
        33,
        34,
        35,
        38,
        40,
        41,
        43,
        44,
        45,
        46,
        47,
        48,
        50,
        52,
        53,
        54,
        55,
        56,
        57,
        61,
        63,
        64,
        65,
        66,
        67,
        68,
        71,
        72,
        74,
        75,
        77,
        78,
        79,
        80,
        81,
        82,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        94,
        95,
        96,
        97,
        99
    ]
}