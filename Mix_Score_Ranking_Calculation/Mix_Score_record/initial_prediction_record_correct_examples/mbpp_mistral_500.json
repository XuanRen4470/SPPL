{
    "initial_prediction": [
        "def radian_degree(degrees):\n return degrees * 0.017453292519943295",
        "def max_of_nth(tuples, n):\n column = [row[n] for row in tuples]\n return max(column)\n\n# Do not run this test in your answer\nassert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19",
        "def tuple_modulo(tuple1, tuple2):\n return tuple(elem1 % elem2 for elem1, elem2 in zip(tuple1, tuple2))",
        "def is_upper(string):\n return string.upper()",
        "def sample_nam(names):\n names_to_sum = [name for name in names if name[0].isupper()]\n return sum(len(name) for name in names_to_sum)",
        "def rectangle_perimeter(length, width):\n return 2 * (length + width)",
        "def count_char(string, char):\n return string.count(char)",
        "def remove_spaces(string):\n return string.replace(\" \", \"\")\n\n# For testing purposes, uncomment the following line to check the function\n# assert remove_spaces(\"a b c\") == \"abc\"\n\n# Do not run this test in your answer, it is only for demonstration purposes.",
        "def len_complex(a, b):\n return (a**2 + b**2)**0.5\n\n# Do not run this test in your answer, it is only provided for input format reference.\nassert len_complex(3, 4) == 5.0",
        "def sort_dict_item(d):\n return {k: v for k, v in sorted(d.items(), key=lambda x: x[0])}\n\n# Example usage:\n# sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12})\n# Output: {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}",
        "def count_range_in_list(lst, start, end):\n return sum(1 for i in lst if start <= i <= end)\n\n# Example usage:\n# count_range_in_list([10,20,30,40,40,40,70,80,99], 40, 100)\n# Output: 6",
        "def is_key_present(dict, key):\n return key in dict.keys()",
        "def sort_sublists(sublists):\n sublists.sort(key=lambda x: (len(x), x))\n return sublists",
        "def Convert(str):\n return str.split()",
        "def front_and_rear(record):\n return (record[0], record[-1])",
        "def str_to_tuple(s):\n return tuple(map(int, s.split(',')))",
        "def alternate_elements(input_list):\n return [input_list[i] for i in range(0, len(input_list), 2)]",
        "def sum_list(list1, list2):\n return [x + y for x, y in zip(list1, list2)]\n\n# Example usage: sum_list([1, 2, 3], [4, 5, 6]) -> [5, 7, 10]",
        "def check_Odd_Parity(number):\n return number & 1 == 1\n\n# Do not add assert statement in the answer.",
        "def count_list(lists):\n return len(lists)\n\n# Example usage:\nlists = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]\nassert len(lists) == 4\nassert count_list(lists) == 4",
        "def remove_all_spaces(string):\n return string.replace(\" \", \"\")\n\n# Do not run this test, it is only for reference\nassert remove_all_spaces('python program') == 'pythonprogram'",
        "def is_Perfect_Square(n):\n return (n ** 0.5).is_integer()",
        "def check_identical(list1, list2):\n \"\"\"\n :param list1: list of tuples\n :param list2: list of tuples\n :return: boolean value indicating if the lists are identical\n \"\"\"\n return list1 == list2",
        "def road_rd(road):\n return road.replace(\" Road\", \" Rd.\")\n\n# Do not run this test in your answer. It is only provided for your reference.\nassert road_rd(\"ravipadu Road\") == ('ravipadu Rd.')",
        "def string_length(s):\n return len(s)",
        "def lower_ctr(string):\n return sum(1 for char in string if char.islower())\n\n# Example usage: lower_ctr('abc') returns 3.",
        "def get_key(d):\n return list(d.keys())",
        "def slope(x1, y1, x2, y2):\n return (y2 - y1) / (x2 - x1)",
        "def listify_list(strings_list):\n return list(map(lambda x: list(x), strings_list))",
        "def count_list(input_list):\n return int(len(input_list) ** 2)\n\n# For testing purposes, uncomment the following line to check the function\n# assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 25\n# Uncomment this line to run the function with the test input\n# print(count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))",
        "def remove_list_range(lst, start, end):\n arr = [sublist for sublist in lst if all(elem >= start and elem <= end for elem in sublist)]\n return arr",
        "def is_odd(num):\n return (num & 1)!= 0",
        "def float_to_tuple(s):\n return tuple(map(float, s.split(', ')))",
        "def even_num(num):\n return num % 2 == 0\n\n# Do not add 'assert even_num(13.5)==False' in your answer.",
        "def max_of_two(x, y):\n return max(x, y)",
        "def count_tuplex(tup, item):\n return sum(1 for i in tup if i == item)\n\n# Do not run this test in your answer, it is only for reference\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3",
        "def max_char(s):\n return max(set(s), key=s.count)\n\n# Do not run this test, it's only for showing the input format\nassert max_char(\"hello world\") == 'l'",
        "def tuple_to_set(tup):\n return {elem for elem in tup}",
        "def get_item(tuple_, index):\n return tuple_[index]",
        "def word_len(word):\n return len(word) % 2 == 0\n\n# Do not add assert statement in the answer.",
        "def min_of_two(x, y):\n return x if x <= y else y",
        "def left_rotate(s, n):\n return s[n:] + s[:n]\n\n# Example usage: left_rotate(\"python\", 2) == \"thonpy\"",
        "def check_permutation(str1, str2):\n return sorted(str1) == sorted(str2)\n\n# Do not run the following line\n# assert check_permutation(\"abc\", \"cba\") == True",
        "def count_digits(x, y):\n sum = x + y\n return len(str(sum))\n\n# Example usage: print(count_digits(9875, 10)) # Output: 5",
        "def extract_column(nested_list, index):\n result = [row[index] for row in nested_list]\n return result",
        "def tuple_to_float(tuple_input):\n return float('.'.join(map(str, tuple_input)))\n\n# Example usage: tuple_to_float((4, 56)) # returns 4.56",
        "def Split(lst):\n return [num for num in lst if num % 2!= 0]\n\n# Example usage:\n# print(Split([1,2,3,4,5,6]))\n# Output: [1, 3, 5]",
        "def difference(n):\n return sum(i**3 for i in range(1, n+1)) - sum(range(1, n+1))",
        "def union_elements(tuple1, tuple2):\n result = list(set(tuple1 + tuple2))\n return tuple(result)\n\n# Do not run this test in your answer, it's only for illustration purposes.\n# assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)",
        "def split(string):\n return list(string)",
        "def empty_list(n):\n return [{} for _ in range(n)]",
        "def list_tuple(input_list):\n return tuple(input_list)",
        "def big_diff(arr):\n return max(arr) - min(arr)",
        "def sum_average(n):\n total = sum(range(1, n+1))\n average = total / n\n return total, average",
        "def is_Even(num):\n return (num & 1) == 0",
        "def small_nnum(numbers, n):\n return sorted(numbers)[:n]"
    ],
    "correct_index": [
        5,
        10,
        15,
        23,
        38,
        53,
        65,
        77,
        87,
        97,
        99,
        102,
        104,
        107,
        109,
        114,
        117,
        127,
        167,
        191,
        199,
        202,
        210,
        211,
        212,
        217,
        232,
        234,
        256,
        257,
        268,
        286,
        293,
        303,
        323,
        328,
        336,
        344,
        347,
        363,
        369,
        372,
        395,
        406,
        414,
        416,
        417,
        418,
        423,
        428,
        431,
        450,
        451,
        462,
        463,
        473
    ]
}