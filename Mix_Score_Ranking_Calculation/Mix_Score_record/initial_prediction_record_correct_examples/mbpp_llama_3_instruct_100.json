{
    "initial_prediction": [
        "def Pair(a, b):\n    return (a, b)\n\ndef max_chain_length(pairs, n):\n    pairs.sort(key=lambda x: x[1])\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if pairs[j][1] < pairs[i][0]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)",
        "def prime_num(n): \n    if n <= 1: \n        return False \n    elif n <= 3: \n        return True \n    elif n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True",
        "import math\n\ndef radian_degree(deg):\n    return deg * math.pi / 180",
        "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None",
        "def remove_kth_element(lst,k): \n    if k > len(lst): \n        return \"k is greater than the length of the list\" \n    else: \n        return lst[:k-1] + lst[k:]",
        "max_of_nth = lambda lst, n: max(x[n] for x in lst)",
        "def tuple_modulo(t1, t2):\n    return tuple(i % j for i, j in zip(t1, t2))",
        "div_list = lambda l1, l2: list(map(lambda x, y: x/y, l1, l2))",
        "def increment_numerics(lst, k):\n    return [str(int(x) + k) if x.isdigit() else x for x in lst]",
        "def is_upper(s): \n    return s.upper()",
        "def swap_List(lst): \n    if len(lst) > 1: \n        lst[0], lst[-1] = lst[-1], lst[0] \n    return lst",
        "replace_spaces = lambda s: s.replace(' ', '%20')",
        "def Split(lst):\n    return [i for i in lst if i % 2 == 0]",
        "def pair_OR_Sum(arr,n):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            result += arr[i]^arr[j]\n    return result",
        "import heapq\n\ndef heap_sort(nums):\n    heapq.heapify(nums)\n    result = []\n    while nums:\n        result.append(heapq.heappop(nums))\n    return result",
        "def sample_nam(names):\n    return sum(len(name) for name in names if name[0].isupper())",
        "def reverse_Array_Upto_K(arr,k): \n    return arr[:k][::-1] + arr[k:]",
        "sum_Range_list = lambda lst, start, end: sum(lst[start:end+1])",
        "from collections import defaultdict\n\ndef grouping_dictionary(lst):\n    result = defaultdict(list)\n    for key, value in lst:\n        result[key].append(value)\n    return dict(result)",
        "def rectangle_perimeter(length,width): \n    return 2*(length+width)",
        "import math\n\ndef first_Digit(n):\n    factorial = math.factorial(n)\n    str_factorial = str(factorial)\n    for i in range(len(str_factorial)):\n        if str_factorial[i]!= '0':\n            return int(str_factorial[i])",
        "from collections import Counter\n\ndef max_occurrences(lst):\n    count = Counter(lst)\n    return max(count, key=count.get)",
        "def average_Even(n): \n    sum = 0 \n    count = 0 \n    for i in range(2, n+1, 2): \n        sum += i \n        count += 1 \n    return sum / count",
        "def move_last(lst): \n    if len(lst) == 0: \n        return lst \n    else: \n        return lst[1:] + [lst[0]]",
        "def count_char(s, c): \n    return s.count(c)",
        "def Check_Vow(s, vowels): \n    return sum(1 for char in s if char.upper() in vowels)",
        "import re\n\ndef check_IP(ip):\n    pattern = re.compile(r\"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    if pattern.match(ip):\n        return 'Valid IP address'\n    else:\n        return 'Invalid IP address'",
        "def decreasing_trend(sequence): \n    for i in range(1, len(sequence)): \n        if sequence[i-1] >= sequence[i]: \n            return False \n    return True",
        "max_of_three = lambda a, b, c: max(a, b, c)",
        "def sum_nums(a, b, min_range, max_range):\n    if min_range <= a + b <= max_range:\n        return 20\n    else:\n        return a + b",
        "import re\n\ndef remove_extra_char(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)",
        "remove_spaces = lambda s: s.replace(\" \", \"\")",
        "def access_key(d, index):\n    return list(d.keys())[index]",
        "def increasing_trend(seq):\n    for i in range(1, len(seq)):\n        if seq[i] <= seq[i-1]:\n            return False\n    return True",
        "def smallest_Divisor(n): \n    if n < 2: \n        return n \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return i \n    return n",
        "mul_list = lambda x, y: list(map(lambda a, b: a * b, x, y))",
        "def sum_Square(n):\n    for i in range(int(n**0.5) + 1):\n        j = (n - i**2)**0.5\n        if j == int(j):\n            return True\n    return False",
        "def sum_Of_Primes(n): \n    def is_prime(num): \n        if num < 2: \n            return False \n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False \n        return True \n    return sum(num for num in range(2, n+1) if is_prime(num))",
        "def recur_gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)",
        "def len_complex(real, imag): \n    return (real**2 + imag**2)**0.5",
        "def group_element(lst):\n    result = {}\n    for key, value in lst:\n        if value in result:\n            result[value].append(key)\n        else:\n            result[value] = [key]\n    return result",
        "import math\n\ndef last_Two_Digits(n):\n    return int(str(math.factorial(n))[-2:])",
        "def check_greater(t1, t2): \n    return all(i < j for i, j in zip(t1, t2))",
        "zip_list = lambda x, y: [a + b for a, b in zip(map(lambda z: list(z), x), map(lambda z: list(z), y))]",
        "def count_range_in_list(lst, start, end): \n    return sum(1 for x in lst if start <= x <= end)"
    ],
    "correct_index": [
        0,
        4,
        5,
        6,
        9,
        10,
        15,
        17,
        20,
        23,
        24,
        27,
        28,
        32,
        34,
        38,
        43,
        48,
        52,
        53,
        56,
        57,
        63,
        64,
        65,
        66,
        68,
        69,
        71,
        74,
        75,
        77,
        78,
        79,
        80,
        81,
        82,
        84,
        86,
        87,
        90,
        91,
        94,
        95,
        99
    ]
}